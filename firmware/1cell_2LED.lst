
1cell_2LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001750  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  0080006a  0080006a  000017ee  2**0
                  ALLOC
  3 .stab         00004968  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a5e  00000000  00000000  00006158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007bb6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
       2:	ab c0       	rjmp	.+342    	; 0x15a <__bad_interrupt>
       4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
       6:	95 c5       	rjmp	.+2858   	; 0xb32 <__vector_3>
       8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
       a:	a7 c0       	rjmp	.+334    	; 0x15a <__bad_interrupt>
       c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
       e:	a5 c0       	rjmp	.+330    	; 0x15a <__bad_interrupt>
      10:	e9 c3       	rjmp	.+2002   	; 0x7e4 <__vector_8>
      12:	a3 c0       	rjmp	.+326    	; 0x15a <__bad_interrupt>
      14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
      16:	9f c3       	rjmp	.+1854   	; 0x756 <__vector_11>
      18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
      1a:	35 c2       	rjmp	.+1130   	; 0x486 <__vector_13>
      1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
      1e:	9d c0       	rjmp	.+314    	; 0x15a <__bad_interrupt>
      20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>

00000022 <__c.2086>:
      22:	6e 61 6e 00                                         nan.

00000026 <__c.2084>:
      26:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      36:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      46:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      56:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      66:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      76:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      86:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      96:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      a6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      b6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      c6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
      d6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
      e6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
      f6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     106:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     116:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf e5       	ldi	r28, 0x5F	; 95
     12a:	d2 e0       	ldi	r29, 0x02	; 2
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	10 e0       	ldi	r17, 0x00	; 0
     132:	a0 e6       	ldi	r26, 0x60	; 96
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e0 e5       	ldi	r30, 0x50	; 80
     138:	f7 e1       	ldi	r31, 0x17	; 23
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	aa 36       	cpi	r26, 0x6A	; 106
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	aa e6       	ldi	r26, 0x6A	; 106
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a6 3e       	cpi	r26, 0xE6	; 230
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	42 d8       	rcall	.-3964   	; 0xfffff1dc <__eeprom_end+0xff7ef1dc>
     158:	f9 ca       	rjmp	.-2574   	; 0xfffff74c <__eeprom_end+0xff7ef74c>

0000015a <__bad_interrupt>:
     15a:	52 cf       	rjmp	.-348    	; 0x0 <__vectors>

0000015c <init_sw>:
#define BUTTON_DEBOUNCE_TIME 25 // in timer1 cycles
#define BUTTON_REPEAT_TIME 50  // how long to hold it before repeating #FIX

void init_sw()
{
  LEDS[LED_L].PWM_out = &OCR0B;
     15c:	8c e5       	ldi	r24, 0x5C	; 92
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 a0 00 	sts	0x00A0, r25
     164:	80 93 9f 00 	sts	0x009F, r24
  *(LEDS[LED_L].PWM_out) = 0;
     168:	1c be       	out	0x3c, r1	; 60
  LEDS[LED_L].ADC_value = 0;
     16a:	10 92 99 00 	sts	0x0099, r1
     16e:	10 92 9a 00 	sts	0x009A, r1
     172:	10 92 9b 00 	sts	0x009B, r1
     176:	10 92 9c 00 	sts	0x009C, r1
  LEDS[LED_L].setpoints[0] = 0;
     17a:	10 92 8d 00 	sts	0x008D, r1
  LEDS[LED_L].setpoints[1] = 0;
     17e:	10 92 8e 00 	sts	0x008E, r1
  LEDS[LED_L].setpoints[2] = 0;
     182:	10 92 8f 00 	sts	0x008F, r1
  LEDS[LED_L].setpoints[3] = 93;
     186:	8d e5       	ldi	r24, 0x5D	; 93
     188:	80 93 90 00 	sts	0x0090, r24
  LEDS[LED_L].setpoints[4] = 93;  
     18c:	80 93 91 00 	sts	0x0091, r24
  LEDS[LED_L].setpoints[5] = 0;  
     190:	10 92 92 00 	sts	0x0092, r1
  LEDS[LED_L].hints[0] = 0;  
     194:	10 92 93 00 	sts	0x0093, r1
  LEDS[LED_L].hints[1] = 0;  
     198:	10 92 94 00 	sts	0x0094, r1
  LEDS[LED_L].hints[2] = 0;  
     19c:	10 92 95 00 	sts	0x0095, r1
  LEDS[LED_L].hints[3] = 61;        
     1a0:	8d e3       	ldi	r24, 0x3D	; 61
     1a2:	80 93 96 00 	sts	0x0096, r24
  LEDS[LED_L].hints[4] = 61;
     1a6:	80 93 97 00 	sts	0x0097, r24
  LEDS[LED_L].hints[5] = 0;    
     1aa:	10 92 98 00 	sts	0x0098, r1
  LEDS[LED_L].setpoint_index = 0;
     1ae:	10 92 8b 00 	sts	0x008B, r1
  
  LEDS[LED_R].PWM_out = &OCR0A;
     1b2:	86 e5       	ldi	r24, 0x56	; 86
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	90 93 b6 00 	sts	0x00B6, r25
     1ba:	80 93 b5 00 	sts	0x00B5, r24
  *(LEDS[LED_R].PWM_out) = 0;
     1be:	16 be       	out	0x36, r1	; 54
  LEDS[LED_R].ADC_value = 0;
     1c0:	10 92 af 00 	sts	0x00AF, r1
     1c4:	10 92 b0 00 	sts	0x00B0, r1
     1c8:	10 92 b1 00 	sts	0x00B1, r1
     1cc:	10 92 b2 00 	sts	0x00B2, r1
  LEDS[LED_R].setpoints[0] = 0;
     1d0:	10 92 a3 00 	sts	0x00A3, r1
  LEDS[LED_R].setpoints[1] = 10; //10
     1d4:	8a e0       	ldi	r24, 0x0A	; 10
     1d6:	80 93 a4 00 	sts	0x00A4, r24
  LEDS[LED_R].setpoints[2] = 55;
     1da:	87 e3       	ldi	r24, 0x37	; 55
     1dc:	80 93 a5 00 	sts	0x00A5, r24
  LEDS[LED_R].setpoints[3] = 163;
     1e0:	83 ea       	ldi	r24, 0xA3	; 163
     1e2:	80 93 a6 00 	sts	0x00A6, r24
  LEDS[LED_R].setpoints[4] = 0;
     1e6:	10 92 a7 00 	sts	0x00A7, r1
  LEDS[LED_R].setpoints[5] = 163;  
     1ea:	80 93 a8 00 	sts	0x00A8, r24
  LEDS[LED_R].hints[0] = 0;  
     1ee:	10 92 a9 00 	sts	0x00A9, r1
  LEDS[LED_R].hints[1] = 35;  
     1f2:	83 e2       	ldi	r24, 0x23	; 35
     1f4:	80 93 aa 00 	sts	0x00AA, r24
  LEDS[LED_R].hints[2] = 60;  
     1f8:	8c e3       	ldi	r24, 0x3C	; 60
     1fa:	80 93 ab 00 	sts	0x00AB, r24
  LEDS[LED_R].hints[3] = 70;
     1fe:	86 e4       	ldi	r24, 0x46	; 70
     200:	80 93 ac 00 	sts	0x00AC, r24
  LEDS[LED_R].hints[4] = 0; 
     204:	10 92 ad 00 	sts	0x00AD, r1
  LEDS[LED_R].hints[5] = 70;     
     208:	80 93 ae 00 	sts	0x00AE, r24
  
  
  LEDS[LED_R].setpoint_index = 0;
     20c:	10 92 a1 00 	sts	0x00A1, r1
  
  adc_muxes[LED_L] = AMUX_L;
     210:	8f e8       	ldi	r24, 0x8F	; 143
     212:	80 93 84 00 	sts	0x0084, r24
  adc_muxes[LED_R] = AMUX_R;
     216:	81 e9       	ldi	r24, 0x91	; 145
     218:	80 93 85 00 	sts	0x0085, r24
  adc_muxes[VBAT] = AMUX_VBAT;
     21c:	81 e2       	ldi	r24, 0x21	; 33
     21e:	80 93 86 00 	sts	0x0086, r24
  
  shop_flag = INUSE;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	90 93 88 00 	sts	0x0088, r25
     22a:	80 93 87 00 	sts	0x0087, r24
  button_state = UP;
     22e:	10 92 e4 00 	sts	0x00E4, r1
     232:	10 92 e3 00 	sts	0x00E3, r1
     236:	08 95       	ret

00000238 <init_hw>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	20 e8       	ldi	r18, 0x80	; 128
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	26 bd       	out	0x26, r18	; 38
     244:	86 bd       	out	0x26, r24	; 38
     246:	0f be       	out	0x3f, r0	; 63
  //deal with anything that might be floating.
 //  PORTA=255;
 //  PORTB=255;

  //set both LEDs out and off
  SETBIT(LED_R_DDR,LED_R_PIN);
     248:	ba 9a       	sbi	0x17, 2	; 23
  C_CLEARBIT(LED_R_LED);  
     24a:	c2 98       	cbi	0x18, 2	; 24
  SETBIT(LED_L_DDR,LED_L_PIN);
     24c:	d7 9a       	sbi	0x1a, 7	; 26
  C_CLEARBIT(LED_L_LED);
     24e:	df 98       	cbi	0x1b, 7	; 27
  
  


  //set button as input with pullup
  CLEARBIT(BUTTON1_DDR,BUTTON1_PIN);
     250:	b8 98       	cbi	0x17, 0	; 23
  C_SETBIT(BUTTON1_OUT); //pullup
     252:	c0 9a       	sbi	0x18, 0	; 24

  CLEARBIT(CHARGE_DDR,CHARGE_PIN);
     254:	b9 98       	cbi	0x17, 1	; 23
  C_SETBIT(CHARGE_OUT); //pullup
     256:	c1 9a       	sbi	0x18, 1	; 24


  //Setup TIMER1 used for house keeping, 16bit timer so overflows every 65536 clocks or approx 122Hz at 8mhz
  TCCR1B |= (1 << CS10)| (1 << ICNC1); //no prescaler and noise canceler is on
     258:	8e b5       	in	r24, 0x2e	; 46
     25a:	81 68       	ori	r24, 0x81	; 129
     25c:	8e bd       	out	0x2e, r24	; 46
  TIMSK1=(1<<TOIE1); //enable timer 1 overflow   
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	9c b9       	out	0x0c, r25	; 12

  // Setup Timer0 used for PWM outputs, Running at 31Khz at 8mhz
  OCR0B = 0;  
     262:	1c be       	out	0x3c, r1	; 60
  OCR0A = 0;
     264:	16 be       	out	0x36, r1	; 54
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     266:	80 b7       	in	r24, 0x30	; 48
     268:	83 6a       	ori	r24, 0xA3	; 163
     26a:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00));
     26c:	83 b7       	in	r24, 0x33	; 51
     26e:	81 60       	ori	r24, 0x01	; 1
     270:	83 bf       	out	0x33, r24	; 51
  TIMSK0=(1<<TOIE0); //overflow interrupt
     272:	99 bf       	out	0x39, r25	; 57
//  LED_L.PWM_out = &OCR0B;

  
  //Setup ADC
// ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz 
  ADCSRB |= (1 << ADLAR); // left align results, 8 bit ftw
     274:	1c 9a       	sbi	0x03, 4	; 3
  ADMUX = 0b100001; //give it something to start with
     276:	81 e2       	ldi	r24, 0x21	; 33
     278:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADEN);  // Enable ADC 
     27a:	37 9a       	sbi	0x06, 7	; 6
  ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt 
     27c:	33 9a       	sbi	0x06, 3	; 6
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // prescaler to /64 = 125khz adc clock @ 8mhz
     27e:	86 b1       	in	r24, 0x06	; 6
     280:	86 60       	ori	r24, 0x06	; 6
     282:	86 b9       	out	0x06, r24	; 6
  
  GIMSK |= (1 << PCIE1);  //enable pcint1 interrupt source
     284:	8b b7       	in	r24, 0x3b	; 59
     286:	80 62       	ori	r24, 0x20	; 32
     288:	8b bf       	out	0x3b, r24	; 59
  PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);  //turn interrupts on for pin b0/pcint8 , b1/pcint9, button, charger respectivley
     28a:	80 b5       	in	r24, 0x20	; 32
     28c:	83 60       	ori	r24, 0x03	; 3
     28e:	80 bd       	out	0x20, r24	; 32
  MCUCR |= (1 << ISC00);   // set the interrupt to fire on any level change of an external interrupt
     290:	85 b7       	in	r24, 0x35	; 53
     292:	81 60       	ori	r24, 0x01	; 1
     294:	85 bf       	out	0x35, r24	; 53
 //SETPOINT_R = 50; 
 
 //power_spi_disable();
 //power_twi_disable();
 //power_usart_disable();
 power_usi_disable();
     296:	01 9a       	sbi	0x00, 1	; 0
 ACSR |= (1 << ACD);
     298:	47 9a       	sbi	0x08, 7	; 8
     29a:	08 95       	ret

0000029c <advance_LED>:

}
void advance_LED()
{
  mode_changed = 32;
     29c:	80 e2       	ldi	r24, 0x20	; 32
     29e:	80 93 62 00 	sts	0x0062, r24
  current_setpoint++;
     2a2:	80 91 6e 00 	lds	r24, 0x006E
     2a6:	8f 5f       	subi	r24, 0xFF	; 255

  if (current_setpoint >= NUM_OF_LED_STATES)
     2a8:	86 30       	cpi	r24, 0x06	; 6
     2aa:	98 f5       	brcc	.+102    	; 0x312 <advance_LED+0x76>

}
void advance_LED()
{
  mode_changed = 32;
  current_setpoint++;
     2ac:	80 93 6e 00 	sts	0x006E, r24
     2b0:	e8 2f       	mov	r30, r24
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
  {
     current_setpoint = 0;
     //killit = 1;
  }
  //SETPOINT_R = LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index];
  LEDS[LED_L].setpoint_index = current_setpoint;                        
     2b4:	80 93 8b 00 	sts	0x008B, r24
  LEDS[LED_R].setpoint_index = current_setpoint; 
     2b8:	80 93 a1 00 	sts	0x00A1, r24
  LEDS[LED_L].seeking = 20;                        
     2bc:	84 e1       	ldi	r24, 0x14	; 20
     2be:	80 93 8c 00 	sts	0x008C, r24
  LEDS[LED_R].seeking = 20; 
     2c2:	80 93 a2 00 	sts	0x00A2, r24
 // (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[current_setpoint];
 // (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[current_setpoint];
  if (LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index] == 0) 
     2c6:	e5 57       	subi	r30, 0x75	; 117
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	81 11       	cpse	r24, r1
     2ce:	0e c0       	rjmp	.+28     	; 0x2ec <advance_LED+0x50>
  {
    (*(LEDS[LED_L].PWM_out)) = 0;
     2d0:	e0 91 9f 00 	lds	r30, 0x009F
     2d4:	f0 91 a0 00 	lds	r31, 0x00A0
     2d8:	10 82       	st	Z, r1
    LEDS[LED_L].pwm_buffer = 0;
     2da:	10 92 9d 00 	sts	0x009D, r1
    LEDS[LED_L].pwm_dither = 0;    
     2de:	10 92 9e 00 	sts	0x009E, r1
     2e2:	e0 91 a1 00 	lds	r30, 0x00A1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	e5 57       	subi	r30, 0x75	; 117
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
  }
  if (LEDS[LED_R].setpoints[LEDS[LED_R].setpoint_index] == 0) 
     2ec:	80 8d       	ldd	r24, Z+24	; 0x18
     2ee:	81 11       	cpse	r24, r1
     2f0:	09 c0       	rjmp	.+18     	; 0x304 <advance_LED+0x68>
  {
    (*(LEDS[LED_R].PWM_out)) = 0;
     2f2:	e0 91 b5 00 	lds	r30, 0x00B5
     2f6:	f0 91 b6 00 	lds	r31, 0x00B6
     2fa:	10 82       	st	Z, r1
    LEDS[LED_R].pwm_buffer = 0;
     2fc:	10 92 b3 00 	sts	0x00B3, r1
    LEDS[LED_R].pwm_dither = 0;
     300:	10 92 b4 00 	sts	0x00B4, r1
  }
  
  if (current_setpoint == 0)
     304:	80 91 6e 00 	lds	r24, 0x006E
     308:	81 11       	cpse	r24, r1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <advance_LED+0x74>
  {
    runtime = 0;
     30c:	10 92 6d 00 	sts	0x006D, r1
     310:	08 95       	ret
  mode_changed = 32;
  current_setpoint++;

  if (current_setpoint >= NUM_OF_LED_STATES)
  {
     current_setpoint = 0;
     312:	10 92 6e 00 	sts	0x006E, r1
     316:	e0 e0       	ldi	r30, 0x00	; 0
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	cb cf       	rjmp	.-106    	; 0x2b4 <advance_LED+0x18>

0000031e <shutdown>:
 
}

void shutdown() //turn everything off then go into powerdown, note execution will resume from within this function.
{
  cli();
     31e:	f8 94       	cli
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
  _delay_ms(100);
  */
//reset LED state to being off
 last_setpoint = current_setpoint; 
     320:	80 91 6e 00 	lds	r24, 0x006E
     324:	80 93 6c 00 	sts	0x006C, r24
 current_setpoint = NUM_OF_LED_STATES-1;
     328:	85 e0       	ldi	r24, 0x05	; 5
     32a:	80 93 6e 00 	sts	0x006E, r24
 advance_LED();
     32e:	b6 df       	rcall	.-148    	; 0x29c <advance_LED>

//really turn it off.  
  OCR0A = 0;
     330:	16 be       	out	0x36, r1	; 54
  OCR0B = 0;
     332:	1c be       	out	0x3c, r1	; 60
  TCCR0A = 0;
     334:	10 be       	out	0x30, r1	; 48
  TCCR0B = 0;     
     336:	13 be       	out	0x33, r1	; 51
  PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     338:	80 b5       	in	r24, 0x20	; 32
     33a:	83 60       	ori	r24, 0x03	; 3
     33c:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     33e:	2f ef       	ldi	r18, 0xFF	; 255
     340:	8f e3       	ldi	r24, 0x3F	; 63
     342:	96 e0       	ldi	r25, 0x06	; 6
     344:	21 50       	subi	r18, 0x01	; 1
     346:	80 40       	sbci	r24, 0x00	; 0
     348:	90 40       	sbci	r25, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <shutdown+0x26>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <shutdown+0x30>
     34e:	00 00       	nop
  _delay_ms(256);
  //power_all_disable();
  //power_adc_disable();

  ADCSRA &= ~(1 << ADEN);  //disable adc power, the thing in power.h doesnt work
     350:	37 98       	cbi	0x06, 7	; 6
  set_sleep_mode(SLEEP_MODE_PWR_DOWN); 
     352:	85 b7       	in	r24, 0x35	; 53
     354:	87 7e       	andi	r24, 0xE7	; 231
     356:	80 61       	ori	r24, 0x10	; 16
     358:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     35a:	85 b7       	in	r24, 0x35	; 53
     35c:	80 62       	ori	r24, 0x20	; 32
     35e:	85 bf       	out	0x35, r24	; 53
  //sleep_bod_disable();
  sei();
     360:	78 94       	sei
  sleep_cpu();
     362:	88 95       	sleep
  //power_all_enable();
  ADCSRA |= (1 << ADEN);  //enable adc power, the thing in power.h doesnt work
     364:	37 9a       	sbi	0x06, 7	; 6
  power_usi_disable();  
     366:	01 9a       	sbi	0x00, 1	; 0
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     368:	80 b7       	in	r24, 0x30	; 48
     36a:	83 6a       	ori	r24, 0xA3	; 163
     36c:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00)); 
     36e:	83 b7       	in	r24, 0x33	; 51
     370:	81 60       	ori	r24, 0x01	; 1
     372:	83 bf       	out	0x33, r24	; 51
  vbat_cut_noise = 255;
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	80 93 63 00 	sts	0x0063, r24
     37a:	08 95       	ret

0000037c <idle>:

}    

void idle()
{
 cli();
     37c:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE); 
     37e:	85 b7       	in	r24, 0x35	; 53
     380:	87 7e       	andi	r24, 0xE7	; 231
     382:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     384:	85 b7       	in	r24, 0x35	; 53
     386:	80 62       	ori	r24, 0x20	; 32
     388:	85 bf       	out	0x35, r24	; 53
  sei();
     38a:	78 94       	sei
  sleep_cpu();
     38c:	88 95       	sleep
     38e:	08 95       	ret

00000390 <button_down>:
} 


void button_down()
{
     390:	08 95       	ret

00000392 <button_up>:
//  static enum BUTTON_STATES last_button_state = UP
}

void button_up()
{
  vbat_cut_noise = 255;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	80 93 63 00 	sts	0x0063, r24

  
  if ((button_hold_down_time < 50) && (mode != LOCK)) // this is a short button press
     398:	80 91 6f 00 	lds	r24, 0x006F
     39c:	90 91 70 00 	lds	r25, 0x0070
     3a0:	20 91 89 00 	lds	r18, 0x0089
     3a4:	30 91 8a 00 	lds	r19, 0x008A
     3a8:	82 33       	cpi	r24, 0x32	; 50
     3aa:	91 05       	cpc	r25, r1
     3ac:	58 f4       	brcc	.+22     	; 0x3c4 <button_up+0x32>
     3ae:	21 30       	cpi	r18, 0x01	; 1
     3b0:	31 05       	cpc	r19, r1
     3b2:	f1 f1       	breq	.+124    	; 0x430 <button_up+0x9e>
  {
    if (current_setpoint > 0) //torch is on
     3b4:	40 91 6e 00 	lds	r20, 0x006E
     3b8:	44 23       	and	r20, r20
     3ba:	09 f4       	brne	.+2      	; 0x3be <button_up+0x2c>
     3bc:	49 c0       	rjmp	.+146    	; 0x450 <button_up+0xbe>
    {
     killit = 1;
     3be:	41 e0       	ldi	r20, 0x01	; 1
     3c0:	40 93 6b 00 	sts	0x006B, r20
      current_setpoint = 2;        // full power
      advance_LED(); 
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
     3c4:	ac 01       	movw	r20, r24
     3c6:	41 50       	subi	r20, 0x01	; 1
     3c8:	56 40       	sbci	r21, 0x06	; 6
     3ca:	4d 3f       	cpi	r20, 0xFD	; 253
     3cc:	51 40       	sbci	r21, 0x01	; 1
     3ce:	38 f4       	brcc	.+14     	; 0x3de <button_up+0x4c>
     3d0:	40 91 87 00 	lds	r20, 0x0087
     3d4:	50 91 88 00 	lds	r21, 0x0088
     3d8:	41 30       	cpi	r20, 0x01	; 1
     3da:	51 05       	cpc	r21, r1
     3dc:	61 f1       	breq	.+88     	; 0x436 <button_up+0xa4>
     mode = LOCK;
     killit = 1;
    }
  }
      
  if ((button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END)) //toggle shop mode
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	90 41       	sbci	r25, 0x10	; 16
     3e2:	8f 3f       	cpi	r24, 0xFF	; 255
     3e4:	91 40       	sbci	r25, 0x01	; 1
     3e6:	60 f4       	brcc	.+24     	; 0x400 <button_up+0x6e>
  {
    if (shop_flag == INSTORE)
     3e8:	80 91 87 00 	lds	r24, 0x0087
     3ec:	90 91 88 00 	lds	r25, 0x0088
     3f0:	89 2b       	or	r24, r25
     3f2:	91 f4       	brne	.+36     	; 0x418 <button_up+0x86>
    {
      shop_flag = INUSE;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 88 00 	sts	0x0088, r25
     3fc:	80 93 87 00 	sts	0x0087, r24
    } else {
     shop_flag = INSTORE;
    }
  }    
         
  button_hold_down_time = 0;
     400:	10 92 70 00 	sts	0x0070, r1
     404:	10 92 6f 00 	sts	0x006F, r1
  
  if (mode == LOCK)
     408:	21 30       	cpi	r18, 0x01	; 1
     40a:	31 05       	cpc	r19, r1
     40c:	09 f0       	breq	.+2      	; 0x410 <button_up+0x7e>
     40e:	08 95       	ret
  {
    killit = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 6b 00 	sts	0x006B, r24
     416:	08 95       	ret
  {
    if (shop_flag == INSTORE)
    {
      shop_flag = INUSE;
    } else {
     shop_flag = INSTORE;
     418:	10 92 88 00 	sts	0x0088, r1
     41c:	10 92 87 00 	sts	0x0087, r1
    }
  }    
         
  button_hold_down_time = 0;
     420:	10 92 70 00 	sts	0x0070, r1
     424:	10 92 6f 00 	sts	0x006F, r1
  
  if (mode == LOCK)
     428:	21 30       	cpi	r18, 0x01	; 1
     42a:	31 05       	cpc	r19, r1
     42c:	81 f7       	brne	.-32     	; 0x40e <button_up+0x7c>
     42e:	f0 cf       	rjmp	.-32     	; 0x410 <button_up+0x7e>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	c7 cf       	rjmp	.-114    	; 0x3c4 <button_up+0x32>
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	31 05       	cpc	r19, r1
     43a:	b9 f0       	breq	.+46     	; 0x46a <button_up+0xd8>
    {
      mode = NORMAL;
    } else {
     mode = LOCK;
     43c:	50 93 8a 00 	sts	0x008A, r21
     440:	40 93 89 00 	sts	0x0089, r20
     killit = 1;
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	20 93 6b 00 	sts	0x006B, r18
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	c7 cf       	rjmp	.-114    	; 0x3de <button_up+0x4c>
    if (current_setpoint > 0) //torch is on
    {
     killit = 1;
    } else {                  // torch is off

      current_setpoint = 2;        // full power
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	80 93 6e 00 	sts	0x006E, r24
      advance_LED(); 
     456:	22 df       	rcall	.-444    	; 0x29c <advance_LED>
     458:	80 91 6f 00 	lds	r24, 0x006F
     45c:	90 91 70 00 	lds	r25, 0x0070
     460:	20 91 89 00 	lds	r18, 0x0089
     464:	30 91 8a 00 	lds	r19, 0x008A
     468:	ad cf       	rjmp	.-166    	; 0x3c4 <button_up+0x32>

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
    {
      mode = NORMAL;
     46a:	10 92 8a 00 	sts	0x008A, r1
     46e:	10 92 89 00 	sts	0x0089, r1
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	b3 cf       	rjmp	.-154    	; 0x3de <button_up+0x4c>

00000478 <WDT_off>:
  }
}

void WDT_off(void)
{
   wdt_reset();
     478:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
     47a:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
     47c:	81 b5       	in	r24, 0x21	; 33
     47e:	88 61       	ori	r24, 0x18	; 24
     480:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
     482:	11 bc       	out	0x21, r1	; 33
     484:	08 95       	ret

00000486 <__vector_13>:
 }
}


ISR(ADC_vect) 
{ 
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
  static uint16_t num_of_samples = 0; //how many samples have we taken for this channel.
  static uint16_t battery_delayer = 0;
  
  uint8_t adc_val = 0;
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
     4ac:	80 91 62 00 	lds	r24, 0x0062
     4b0:	88 23       	and	r24, r24
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__vector_13+0x30>
     4b4:	59 c0       	rjmp	.+178    	; 0x568 <__vector_13+0xe2>
  {
    SAMPLES_TO_AVG = 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 61 00 	sts	0x0061, r24
  } else {
    SAMPLES_TO_AVG = 128;
  }
  if (ADC_changed == 0)
     4bc:	80 91 76 00 	lds	r24, 0x0076
     4c0:	81 11       	cpse	r24, r1
     4c2:	5a c0       	rjmp	.+180    	; 0x578 <__vector_13+0xf2>
  {
    num_of_samples++;
     4c4:	40 91 81 00 	lds	r20, 0x0081
     4c8:	50 91 82 00 	lds	r21, 0x0082
     4cc:	4f 5f       	subi	r20, 0xFF	; 255
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255
     4d0:	50 93 82 00 	sts	0x0082, r21
     4d4:	40 93 81 00 	sts	0x0081, r20
    avg_adc_val += ADCH;
     4d8:	25 b1       	in	r18, 0x05	; 5
     4da:	60 91 7d 00 	lds	r22, 0x007D
     4de:	70 91 7e 00 	lds	r23, 0x007E
     4e2:	80 91 7f 00 	lds	r24, 0x007F
     4e6:	90 91 80 00 	lds	r25, 0x0080
     4ea:	62 0f       	add	r22, r18
     4ec:	71 1d       	adc	r23, r1
     4ee:	81 1d       	adc	r24, r1
     4f0:	91 1d       	adc	r25, r1
     4f2:	60 93 7d 00 	sts	0x007D, r22
     4f6:	70 93 7e 00 	sts	0x007E, r23
     4fa:	80 93 7f 00 	sts	0x007F, r24
     4fe:	90 93 80 00 	sts	0x0080, r25
    if (num_of_samples >= SAMPLES_TO_AVG )
     502:	20 91 61 00 	lds	r18, 0x0061
     506:	e2 2f       	mov	r30, r18
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	4e 17       	cp	r20, r30
     50c:	5f 07       	cpc	r21, r31
     50e:	08 f4       	brcc	.+2      	; 0x512 <__vector_13+0x8c>
     510:	4b c0       	rjmp	.+150    	; 0x5a8 <__vector_13+0x122>
    {
 
      adc_val = avg_adc_val / SAMPLES_TO_AVG ;
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	40 d7       	rcall	.+3712   	; 0x139a <__udivmodsi4>
      
      avg_adc_val = 0;
     51a:	10 92 7d 00 	sts	0x007D, r1
     51e:	10 92 7e 00 	sts	0x007E, r1
     522:	10 92 7f 00 	sts	0x007F, r1
     526:	10 92 80 00 	sts	0x0080, r1
      num_of_samples = 0;
     52a:	10 92 82 00 	sts	0x0082, r1
     52e:	10 92 81 00 	sts	0x0081, r1
      
      if (working_LED < 2)   
     532:	30 91 77 00 	lds	r19, 0x0077
     536:	32 30       	cpi	r19, 0x02	; 2
     538:	c8 f1       	brcs	.+114    	; 0x5ac <__vector_13+0x126>
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     53a:	32 30       	cpi	r19, 0x02	; 2
     53c:	09 f4       	brne	.+2      	; 0x540 <__vector_13+0xba>
     53e:	86 c0       	rjmp	.+268    	; 0x64c <__vector_13+0x1c6>
            }
          }
        }
      }

    working_LED++;
     540:	3f 5f       	subi	r19, 0xFF	; 255
     542:	30 93 77 00 	sts	0x0077, r19
    if (working_LED == 2)
     546:	32 30       	cpi	r19, 0x02	; 2
     548:	09 f4       	brne	.+2      	; 0x54c <__vector_13+0xc6>
     54a:	89 c0       	rjmp	.+274    	; 0x65e <__vector_13+0x1d8>
      } else {
        working_LED = 2;
      }
      
    }
    if (working_LED == 3)
     54c:	33 30       	cpi	r19, 0x03	; 3
     54e:	09 f4       	brne	.+2      	; 0x552 <__vector_13+0xcc>
     550:	81 c0       	rjmp	.+258    	; 0x654 <__vector_13+0x1ce>
     552:	e3 2f       	mov	r30, r19
     554:	f0 e0       	ldi	r31, 0x00	; 0
    {
      working_LED = 0;
    }
      ADMUX = adc_muxes[working_LED];      
     556:	ec 57       	subi	r30, 0x7C	; 124
     558:	ff 4f       	sbci	r31, 0xFF	; 255
     55a:	80 81       	ld	r24, Z
     55c:	87 b9       	out	0x07, r24	; 7
      ADC_changed = 2;
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	80 93 76 00 	sts	0x0076, r24
      ADCSRA |= (1 << ADSC); // take another sample
     564:	36 9a       	sbi	0x06, 6	; 6
     566:	0c c0       	rjmp	.+24     	; 0x580 <__vector_13+0xfa>
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
  {
    SAMPLES_TO_AVG = 1;
  } else {
    SAMPLES_TO_AVG = 128;
     568:	80 e8       	ldi	r24, 0x80	; 128
     56a:	80 93 61 00 	sts	0x0061, r24
  }
  if (ADC_changed == 0)
     56e:	80 91 76 00 	lds	r24, 0x0076
     572:	88 23       	and	r24, r24
     574:	09 f4       	brne	.+2      	; 0x578 <__vector_13+0xf2>
     576:	a6 cf       	rjmp	.-180    	; 0x4c4 <__vector_13+0x3e>
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
    }
    ADCSRA |= (1 << ADSC); // take another sample  
  } else {
    adc_val = ADCH; //toss this out
     578:	95 b1       	in	r25, 0x05	; 5
    ADC_changed--; //decriment to toss out N samples, set in the timer1 ISR.    
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	80 93 76 00 	sts	0x0076, r24
    ADCSRA |= (1 << ADSC); // take another sample
     580:	36 9a       	sbi	0x06, 6	; 6
  }

  
}
     582:	ff 91       	pop	r31
     584:	ef 91       	pop	r30
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
      
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
     5a8:	36 9a       	sbi	0x06, 6	; 6
     5aa:	ea cf       	rjmp	.-44     	; 0x580 <__vector_13+0xfa>
      avg_adc_val = 0;
      num_of_samples = 0;
      
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
     5ac:	83 2f       	mov	r24, r19
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	40 91 6e 00 	lds	r20, 0x006E
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	dc 01       	movw	r26, r24
     5b8:	aa 0f       	add	r26, r26
     5ba:	bb 1f       	adc	r27, r27
     5bc:	aa 0f       	add	r26, r26
     5be:	bb 1f       	adc	r27, r27
     5c0:	fd 01       	movw	r30, r26
     5c2:	e8 0f       	add	r30, r24
     5c4:	f9 1f       	adc	r31, r25
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e8 0f       	add	r30, r24
     5cc:	f9 1f       	adc	r31, r25
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e5 57       	subi	r30, 0x75	; 117
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	ef 01       	movw	r28, r30
     5d8:	c4 0f       	add	r28, r20
     5da:	d5 1f       	adc	r29, r21
     5dc:	6a 81       	ldd	r22, Y+2	; 0x02
     5de:	66 23       	and	r22, r22
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <__vector_13+0x15e>
     5e2:	4e c0       	rjmp	.+156    	; 0x680 <__vector_13+0x1fa>
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
          
        } else {
          
          if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] )) && (LEDS[working_LED].pwm_buffer > 0))
     5e4:	62 17       	cp	r22, r18
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <__vector_13+0x164>
     5e8:	6b c0       	rjmp	.+214    	; 0x6c0 <__vector_13+0x23a>
     5ea:	72 89       	ldd	r23, Z+18	; 0x12
     5ec:	77 23       	and	r23, r23
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__vector_13+0x16c>
     5f0:	67 c0       	rjmp	.+206    	; 0x6c0 <__vector_13+0x23a>
          {
            if (mode_changed > 0)
     5f2:	c0 91 62 00 	lds	r28, 0x0062
     5f6:	cc 23       	and	r28, r28
     5f8:	09 f4       	brne	.+2      	; 0x5fc <__vector_13+0x176>
     5fa:	a1 c0       	rjmp	.+322    	; 0x73e <__vector_13+0x2b8>
            { 
              LEDS[working_LED].pwm_buffer--;
     5fc:	71 50       	subi	r23, 0x01	; 1
     5fe:	72 8b       	std	Z+18, r23	; 0x12
     600:	76 2f       	mov	r23, r22
                LEDS[working_LED].pwm_buffer--;
                LEDS[working_LED].pwm_dither = 15;
              }
            }
          } 
          if ((adc_val < (LEDS[working_LED].setpoints[current_setpoint]) && (LEDS[working_LED].pwm_buffer < 255)))
     602:	26 17       	cp	r18, r22
     604:	e0 f4       	brcc	.+56     	; 0x63e <__vector_13+0x1b8>
     606:	a8 0f       	add	r26, r24
     608:	b9 1f       	adc	r27, r25
     60a:	aa 0f       	add	r26, r26
     60c:	bb 1f       	adc	r27, r27
     60e:	a8 0f       	add	r26, r24
     610:	b9 1f       	adc	r27, r25
     612:	aa 0f       	add	r26, r26
     614:	bb 1f       	adc	r27, r27
     616:	a5 57       	subi	r26, 0x75	; 117
     618:	bf 4f       	sbci	r27, 0xFF	; 255
     61a:	52 96       	adiw	r26, 0x12	; 18
     61c:	8c 91       	ld	r24, X
     61e:	52 97       	sbiw	r26, 0x12	; 18
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	81 f0       	breq	.+32     	; 0x644 <__vector_13+0x1be>
          {
            if (mode_changed > 0)
     624:	90 91 62 00 	lds	r25, 0x0062
     628:	99 23       	and	r25, r25
     62a:	09 f4       	brne	.+2      	; 0x62e <__vector_13+0x1a8>
     62c:	73 c0       	rjmp	.+230    	; 0x714 <__vector_13+0x28e>
            { 
              LEDS[working_LED].pwm_buffer++;
     62e:	8f 5f       	subi	r24, 0xFF	; 255
     630:	52 96       	adiw	r26, 0x12	; 18
     632:	8c 93       	st	X, r24
     634:	52 97       	sbiw	r26, 0x12	; 18
     636:	a4 0f       	add	r26, r20
     638:	b5 1f       	adc	r27, r21
     63a:	12 96       	adiw	r26, 0x02	; 2
     63c:	7c 91       	ld	r23, X
          /*if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (LEDS[working_LED].seeking > 0))
          {
            LEDS[working_LED].seeking--;
          }          
          */
          if ((adc_val != (LEDS[working_LED].setpoints[current_setpoint] ))) // && (LEDS[working_LED].seeking > 0))
     63e:	27 17       	cp	r18, r23
     640:	09 f4       	brne	.+2      	; 0x644 <__vector_13+0x1be>
     642:	7e cf       	rjmp	.-260    	; 0x540 <__vector_13+0xba>
          {
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
     644:	36 9a       	sbi	0x06, 6	; 6
     646:	30 91 77 00 	lds	r19, 0x0077
     64a:	7a cf       	rjmp	.-268    	; 0x540 <__vector_13+0xba>
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     64c:	80 91 62 00 	lds	r24, 0x0062
     650:	88 23       	and	r24, r24
     652:	e9 f0       	breq	.+58     	; 0x68e <__vector_13+0x208>
      }
      
    }
    if (working_LED == 3)
    {
      working_LED = 0;
     654:	10 92 77 00 	sts	0x0077, r1
     658:	e0 e0       	ldi	r30, 0x00	; 0
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	7c cf       	rjmp	.-264    	; 0x556 <__vector_13+0xd0>
      }

    working_LED++;
    if (working_LED == 2)
    {
      battery_delayer++;
     65e:	80 91 7b 00 	lds	r24, 0x007B
     662:	90 91 7c 00 	lds	r25, 0x007C
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	90 93 7c 00 	sts	0x007C, r25
     66c:	80 93 7b 00 	sts	0x007B, r24
      if (battery_delayer == 1024)
     670:	81 15       	cp	r24, r1
     672:	94 40       	sbci	r25, 0x04	; 4
     674:	39 f1       	breq	.+78     	; 0x6c4 <__vector_13+0x23e>
      {
        ADCSRA &= ~(1 << ADEN);
        ADMUX = adc_muxes[working_LED]; 
        ADCSRA |= (1 << ADEN);
      } else {
        working_LED = 2;
     676:	30 93 77 00 	sts	0x0077, r19
     67a:	e2 e0       	ldi	r30, 0x02	; 2
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	6b cf       	rjmp	.-298    	; 0x556 <__vector_13+0xd0>
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
        {
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
     680:	04 88       	ldd	r0, Z+20	; 0x14
     682:	f5 89       	ldd	r31, Z+21	; 0x15
     684:	e0 2d       	mov	r30, r0
     686:	10 82       	st	Z, r1
     688:	30 91 77 00 	lds	r19, 0x0077
     68c:	59 cf       	rjmp	.-334    	; 0x540 <__vector_13+0xba>
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
        {        
          if (adc_val >= LOW_BATTERY_WARN) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     68e:	22 35       	cpi	r18, 0x52	; 82
     690:	28 f1       	brcs	.+74     	; 0x6dc <__vector_13+0x256>
          {
          
            if (low_bat_noise > 0)
     692:	80 91 60 00 	lds	r24, 0x0060
     696:	81 11       	cpse	r24, r1
     698:	31 c0       	rjmp	.+98     	; 0x6fc <__vector_13+0x276>
            {
              vbat_cut_noise--;
            }
            if (low_bat_noise < 20)
            {
              LowBatt = 1;
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	90 93 6a 00 	sts	0x006A, r25
              LowBatt = 0;
            }
            
            if (low_bat_noise < 255)
            {
              low_bat_noise++;
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	80 93 60 00 	sts	0x0060, r24
            }            
            
          }
               
          if (adc_val >= LOW_BATTERY_CUTOFF) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     6a6:	29 35       	cpi	r18, 0x59	; 89
     6a8:	c8 f0       	brcs	.+50     	; 0x6dc <__vector_13+0x256>
          {
            if (vbat_cut_noise > 0)
     6aa:	80 91 63 00 	lds	r24, 0x0063
     6ae:	88 23       	and	r24, r24
     6b0:	01 f1       	breq	.+64     	; 0x6f2 <__vector_13+0x26c>
            {
              vbat_cut_noise--;
     6b2:	80 91 63 00 	lds	r24, 0x0063
     6b6:	81 50       	subi	r24, 0x01	; 1
     6b8:	80 93 63 00 	sts	0x0063, r24
     6bc:	32 e0       	ldi	r19, 0x02	; 2
     6be:	40 cf       	rjmp	.-384    	; 0x540 <__vector_13+0xba>
     6c0:	76 2f       	mov	r23, r22
     6c2:	9f cf       	rjmp	.-194    	; 0x602 <__vector_13+0x17c>
    if (working_LED == 2)
    {
      battery_delayer++;
      if (battery_delayer == 1024)
      {
        ADCSRA &= ~(1 << ADEN);
     6c4:	37 98       	cbi	0x06, 7	; 6
        ADMUX = adc_muxes[working_LED]; 
     6c6:	e0 91 77 00 	lds	r30, 0x0077
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 57       	subi	r30, 0x7C	; 124
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	80 81       	ld	r24, Z
     6d2:	87 b9       	out	0x07, r24	; 7
        ADCSRA |= (1 << ADEN);
     6d4:	37 9a       	sbi	0x06, 7	; 6
     6d6:	30 91 77 00 	lds	r19, 0x0077
     6da:	38 cf       	rjmp	.-400    	; 0x54c <__vector_13+0xc6>
            } else {
              killit = 1;
            }
          } else {
            
            if (vbat_cut_noise < 255)
     6dc:	80 91 63 00 	lds	r24, 0x0063
     6e0:	8f 3f       	cpi	r24, 0xFF	; 255
     6e2:	29 f0       	breq	.+10     	; 0x6ee <__vector_13+0x268>
            {
              vbat_cut_noise++;
     6e4:	80 91 63 00 	lds	r24, 0x0063
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 63 00 	sts	0x0063, r24
     6ee:	32 e0       	ldi	r19, 0x02	; 2
     6f0:	27 cf       	rjmp	.-434    	; 0x540 <__vector_13+0xba>
          {
            if (vbat_cut_noise > 0)
            {
              vbat_cut_noise--;
            } else {
              killit = 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 6b 00 	sts	0x006B, r24
     6f8:	32 e0       	ldi	r19, 0x02	; 2
     6fa:	22 cf       	rjmp	.-444    	; 0x540 <__vector_13+0xba>
          if (adc_val >= LOW_BATTERY_WARN) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
          {
          
            if (low_bat_noise > 0)
            {
              vbat_cut_noise--;
     6fc:	90 91 63 00 	lds	r25, 0x0063
     700:	91 50       	subi	r25, 0x01	; 1
     702:	90 93 63 00 	sts	0x0063, r25
            }
            if (low_bat_noise < 20)
     706:	84 31       	cpi	r24, 0x14	; 20
     708:	40 f2       	brcs	.-112    	; 0x69a <__vector_13+0x214>
            {
              LowBatt = 1;
            } else {
              LowBatt = 0;
     70a:	10 92 6a 00 	sts	0x006A, r1
            }
            
            if (low_bat_noise < 255)
     70e:	8f 3f       	cpi	r24, 0xFF	; 255
     710:	51 f2       	breq	.-108    	; 0x6a6 <__vector_13+0x220>
     712:	c6 cf       	rjmp	.-116    	; 0x6a0 <__vector_13+0x21a>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer++;
            } else {         
              LEDS[working_LED].pwm_dither++;
     714:	53 96       	adiw	r26, 0x13	; 19
     716:	9c 91       	ld	r25, X
     718:	53 97       	sbiw	r26, 0x13	; 19
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	53 96       	adiw	r26, 0x13	; 19
     71e:	9c 93       	st	X, r25
     720:	53 97       	sbiw	r26, 0x13	; 19
              if (LEDS[working_LED].pwm_dither > 15)
     722:	90 31       	cpi	r25, 0x10	; 16
     724:	38 f0       	brcs	.+14     	; 0x734 <__vector_13+0x2ae>
              {
                LEDS[working_LED].pwm_buffer++;
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	52 96       	adiw	r26, 0x12	; 18
     72a:	8c 93       	st	X, r24
     72c:	52 97       	sbiw	r26, 0x12	; 18
                LEDS[working_LED].pwm_dither = 0;
     72e:	53 96       	adiw	r26, 0x13	; 19
     730:	1c 92       	st	X, r1
     732:	53 97       	sbiw	r26, 0x13	; 19
     734:	a4 0f       	add	r26, r20
     736:	b5 1f       	adc	r27, r21
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	7c 91       	ld	r23, X
     73c:	80 cf       	rjmp	.-256    	; 0x63e <__vector_13+0x1b8>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer--;
            } else {         
              LEDS[working_LED].pwm_dither--;
     73e:	c3 89       	ldd	r28, Z+19	; 0x13
     740:	c1 50       	subi	r28, 0x01	; 1
     742:	c3 8b       	std	Z+19, r28	; 0x13
              if (LEDS[working_LED].pwm_dither > 250) //wrapped at zero
     744:	cb 3f       	cpi	r28, 0xFB	; 251
     746:	08 f4       	brcc	.+2      	; 0x74a <__vector_13+0x2c4>
     748:	bb cf       	rjmp	.-138    	; 0x6c0 <__vector_13+0x23a>
              {
                LEDS[working_LED].pwm_buffer--;
     74a:	71 50       	subi	r23, 0x01	; 1
     74c:	72 8b       	std	Z+18, r23	; 0x12
                LEDS[working_LED].pwm_dither = 15;
     74e:	7f e0       	ldi	r23, 0x0F	; 15
     750:	73 8b       	std	Z+19, r23	; 0x13
     752:	76 2f       	mov	r23, r22
     754:	56 cf       	rjmp	.-340    	; 0x602 <__vector_13+0x17c>

00000756 <__vector_11>:

  
}

ISR(TIM0_OVF_vect)
{
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
  static uint8_t dither;
  if (dither > 15)
     768:	80 91 7a 00 	lds	r24, 0x007A
     76c:	80 31       	cpi	r24, 0x10	; 16
     76e:	00 f1       	brcs	.+64     	; 0x7b0 <__vector_11+0x5a>
  {
    dither = 0;
     770:	10 92 7a 00 	sts	0x007A, r1
  } else {   
    dither++;
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     774:	80 e0       	ldi	r24, 0x00	; 0
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
     776:	e0 91 9f 00 	lds	r30, 0x009F
     77a:	f0 91 a0 00 	lds	r31, 0x00A0
     77e:	90 91 9d 00 	lds	r25, 0x009D
     782:	9f 5f       	subi	r25, 0xFF	; 255
     784:	90 83       	st	Z, r25
  }

  if (LEDS[LED_R].pwm_dither < dither)
     786:	90 91 b4 00 	lds	r25, 0x00B4
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
     78a:	e0 91 b5 00 	lds	r30, 0x00B5
     78e:	f0 91 b6 00 	lds	r31, 0x00B6
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
  }

  if (LEDS[LED_R].pwm_dither < dither)
     792:	98 17       	cp	r25, r24
     794:	18 f1       	brcs	.+70     	; 0x7dc <__vector_11+0x86>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
  }  else  {
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
     796:	80 91 b3 00 	lds	r24, 0x00B3
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	80 83       	st	Z, r24
  }      
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti
  static uint8_t dither;
  if (dither > 15)
  {
    dither = 0;
  } else {   
    dither++;
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 7a 00 	sts	0x007A, r24
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     7b6:	90 91 9e 00 	lds	r25, 0x009E
     7ba:	98 17       	cp	r25, r24
     7bc:	e0 f6       	brcc	.-72     	; 0x776 <__vector_11+0x20>
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
     7be:	e0 91 9f 00 	lds	r30, 0x009F
     7c2:	f0 91 a0 00 	lds	r31, 0x00A0
     7c6:	90 91 9d 00 	lds	r25, 0x009D
     7ca:	90 83       	st	Z, r25
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
  }

  if (LEDS[LED_R].pwm_dither < dither)
     7cc:	90 91 b4 00 	lds	r25, 0x00B4
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
     7d0:	e0 91 b5 00 	lds	r30, 0x00B5
     7d4:	f0 91 b6 00 	lds	r31, 0x00B6
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
  }

  if (LEDS[LED_R].pwm_dither < dither)
     7d8:	98 17       	cp	r25, r24
     7da:	e8 f6       	brcc	.-70     	; 0x796 <__vector_11+0x40>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
     7dc:	80 91 b3 00 	lds	r24, 0x00B3
     7e0:	80 83       	st	Z, r24
     7e2:	dd cf       	rjmp	.-70     	; 0x79e <__vector_11+0x48>

000007e4 <__vector_8>:
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
  }      
}

ISR(TIM1_OVF_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31

static uint8_t ISR_counter;
  ISR_counter++;
     806:	80 91 79 00 	lds	r24, 0x0079
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	80 93 79 00 	sts	0x0079, r24
  //++;
  if (debounce == 1)
     810:	80 91 75 00 	lds	r24, 0x0075
  {

    
  }
  if (mode_changed > 0)
     814:	80 91 62 00 	lds	r24, 0x0062
     818:	88 23       	and	r24, r24
     81a:	29 f0       	breq	.+10     	; 0x826 <__vector_8+0x42>
  {
    mode_changed--;
     81c:	80 91 62 00 	lds	r24, 0x0062
     820:	81 50       	subi	r24, 0x01	; 1
     822:	80 93 62 00 	sts	0x0062, r24
  }
  
  if (debounce > 0)
     826:	80 91 75 00 	lds	r24, 0x0075
     82a:	88 23       	and	r24, r24
     82c:	51 f0       	breq	.+20     	; 0x842 <__vector_8+0x5e>
    {
      debounce--;
     82e:	80 91 75 00 	lds	r24, 0x0075
     832:	81 50       	subi	r24, 0x01	; 1
     834:	80 93 75 00 	sts	0x0075, r24
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
     838:	80 91 75 00 	lds	r24, 0x0075
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <__vector_8+0x5e>
     840:	4c c0       	rjmp	.+152    	; 0x8da <__vector_8+0xf6>
     842:	80 91 e3 00 	lds	r24, 0x00E3
     846:	90 91 e4 00 	lds	r25, 0x00E4
          }
        }
      }
    }
  
  if (button_state == DOWN) 
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	09 f4       	brne	.+2      	; 0x850 <__vector_8+0x6c>
     84e:	5e c0       	rjmp	.+188    	; 0x90c <__vector_8+0x128>
     850:	40 91 6e 00 	lds	r20, 0x006E
    killit = 1;
  }
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
     854:	41 11       	cpse	r20, r1
     856:	24 c0       	rjmp	.+72     	; 0x8a0 <__vector_8+0xbc>
     858:	80 91 79 00 	lds	r24, 0x0079
        killit = 1;      
      } 
    }
  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
     85c:	90 91 6b 00 	lds	r25, 0x006B
     860:	91 11       	cpse	r25, r1
     862:	05 c0       	rjmp	.+10     	; 0x86e <__vector_8+0x8a>
     864:	90 91 6a 00 	lds	r25, 0x006A
     868:	91 30       	cpi	r25, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <__vector_8+0x8a>
     86c:	ed c0       	rjmp	.+474    	; 0xa48 <__vector_8+0x264>


    //static uint8_t current_channel = 0;

    static uint8_t seconds_counter=0;
    if (ISR_counter % 128 == 0)
     86e:	8f 77       	andi	r24, 0x7F	; 127
     870:	29 f4       	brne	.+10     	; 0x87c <__vector_8+0x98>
    {
      seconds_counter++;
     872:	80 91 78 00 	lds	r24, 0x0078
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 93 78 00 	sts	0x0078, r24
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
   */// }
  //} 
   ADCSRA |= (1 << ADSC); // take another sample
     87c:	36 9a       	sbi	0x06, 6	; 6

}
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti
    killit = 1;
  }
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
     8a0:	50 91 79 00 	lds	r21, 0x0079
     8a4:	85 2f       	mov	r24, r21
     8a6:	68 e7       	ldi	r22, 0x78	; 120
     8a8:	58 d5       	rcall	.+2736   	; 0x135a <__udivmodqi4>
     8aa:	91 11       	cpse	r25, r1
     8ac:	14 c0       	rjmp	.+40     	; 0x8d6 <__vector_8+0xf2>
  {
    if (runtime < 255)
     8ae:	80 91 6d 00 	lds	r24, 0x006D
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	81 f0       	breq	.+32     	; 0x8d6 <__vector_8+0xf2>
    {
      runtime++;
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
     8b8:	80 93 6d 00 	sts	0x006D, r24
      if ((shop_flag == INSTORE) && (runtime > 10))  
     8bc:	20 91 87 00 	lds	r18, 0x0087
     8c0:	30 91 88 00 	lds	r19, 0x0088
     8c4:	23 2b       	or	r18, r19
     8c6:	39 f4       	brne	.+14     	; 0x8d6 <__vector_8+0xf2>
     8c8:	8b 30       	cpi	r24, 0x0B	; 11
     8ca:	28 f0       	brcs	.+10     	; 0x8d6 <__vector_8+0xf2>
      { 
        killit = 1;      
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 6b 00 	sts	0x006B, r24
     8d2:	85 2f       	mov	r24, r21
     8d4:	c3 cf       	rjmp	.-122    	; 0x85c <__vector_8+0x78>
     8d6:	85 2f       	mov	r24, r21
     8d8:	c1 cf       	rjmp	.-126    	; 0x85c <__vector_8+0x78>
  if (debounce > 0)
    {
      debounce--;
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
      {
        PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     8da:	80 b5       	in	r24, 0x20	; 32
     8dc:	83 60       	ori	r24, 0x03	; 3
     8de:	80 bd       	out	0x20, r24	; 32
        
        if (!C_CHECKBIT(CHARGE))  //active low, button is pressed
     8e0:	b1 9b       	sbis	0x16, 1	; 22
     8e2:	be c0       	rjmp	.+380    	; 0xa60 <__vector_8+0x27c>
          if (charge_from_boot == 0)
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
          }
        } else {
          if (charging == 1)
     8e4:	80 91 72 00 	lds	r24, 0x0072
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__vector_8+0x10a>
     8ec:	06 c1       	rjmp	.+524    	; 0xafa <__vector_8+0x316>
            killit = 1;
            charge_from_boot = 0;
          } 
        }
        
        if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed
     8ee:	b0 99       	sbic	0x16, 0	; 22
     8f0:	c8 c0       	rjmp	.+400    	; 0xa82 <__vector_8+0x29e>
        {
          if (button_state == UP) //needed in case the torch is running and the charger is connected
     8f2:	80 91 e3 00 	lds	r24, 0x00E3
     8f6:	90 91 e4 00 	lds	r25, 0x00E4
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	09 f0       	breq	.+2      	; 0x900 <__vector_8+0x11c>
     8fe:	a5 cf       	rjmp	.-182    	; 0x84a <__vector_8+0x66>
          {
          //  charging = 0;
            button_down();
            button_state = DOWN;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 e4 00 	sts	0x00E4, r25
     908:	80 93 e3 00 	sts	0x00E3, r24
      }
    }
  
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
     90c:	e0 91 6f 00 	lds	r30, 0x006F
     910:	f0 91 70 00 	lds	r31, 0x0070
     914:	31 96       	adiw	r30, 0x01	; 1
     916:	f0 93 70 00 	sts	0x0070, r31
     91a:	e0 93 6f 00 	sts	0x006F, r30
    runtime = 0; // only counts time in a set state
     91e:	10 92 6d 00 	sts	0x006D, r1

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     922:	80 91 89 00 	lds	r24, 0x0089
     926:	90 91 8a 00 	lds	r25, 0x008A
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <__vector_8+0x14c>
     92e:	b6 c0       	rjmp	.+364    	; 0xa9c <__vector_8+0x2b8>
      }
    }
  
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
     930:	9f 01       	movw	r18, r30
      {
         current_setpoint = 1;
      }
      advance_LED();
    }
if ((button_hold_down_time % 64 == 0) && (button_hold_down_time < 1024) && (mode == NORMAL))
     932:	c9 01       	movw	r24, r18
     934:	8f 73       	andi	r24, 0x3F	; 63
     936:	99 27       	eor	r25, r25
     938:	89 2b       	or	r24, r25
     93a:	b1 f4       	brne	.+44     	; 0x968 <__vector_8+0x184>
     93c:	21 15       	cp	r18, r1
     93e:	44 e0       	ldi	r20, 0x04	; 4
     940:	34 07       	cpc	r19, r20
     942:	18 f5       	brcc	.+70     	; 0x98a <__vector_8+0x1a6>
     944:	80 91 89 00 	lds	r24, 0x0089
     948:	90 91 8a 00 	lds	r25, 0x008A
     94c:	89 2b       	or	r24, r25
     94e:	61 f4       	brne	.+24     	; 0x968 <__vector_8+0x184>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //skip the zero in advance_LED
     950:	80 91 6e 00 	lds	r24, 0x006E
     954:	85 30       	cpi	r24, 0x05	; 5
     956:	10 f0       	brcs	.+4      	; 0x95c <__vector_8+0x178>
    {
       current_setpoint = 0;
     958:	10 92 6e 00 	sts	0x006E, r1
    }
    advance_LED();
     95c:	9f dc       	rcall	.-1730   	; 0x29c <advance_LED>
     95e:	e0 91 6f 00 	lds	r30, 0x006F
     962:	f0 91 70 00 	lds	r31, 0x0070
     966:	9f 01       	movw	r18, r30
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
     968:	2f 3f       	cpi	r18, 0xFF	; 255
     96a:	31 05       	cpc	r19, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_8+0x18c>
     96e:	68 f4       	brcc	.+26     	; 0x98a <__vector_8+0x1a6>
     970:	c9 01       	movw	r24, r18
     972:	62 e3       	ldi	r22, 0x32	; 50
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	fd d4       	rcall	.+2554   	; 0x1372 <__udivmodhi4>
     978:	89 2b       	or	r24, r25
     97a:	39 f4       	brne	.+14     	; 0x98a <__vector_8+0x1a6>
     97c:	80 91 89 00 	lds	r24, 0x0089
     980:	90 91 8a 00 	lds	r25, 0x008A
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	09 f4       	brne	.+2      	; 0x98a <__vector_8+0x1a6>
     988:	a3 c0       	rjmp	.+326    	; 0xad0 <__vector_8+0x2ec>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     98a:	c9 01       	movw	r24, r18
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	91 40       	sbci	r25, 0x01	; 1
     990:	8f 3f       	cpi	r24, 0xFF	; 255
     992:	94 40       	sbci	r25, 0x04	; 4
     994:	08 f4       	brcc	.+2      	; 0x998 <__vector_8+0x1b4>
     996:	42 c0       	rjmp	.+132    	; 0xa1c <__vector_8+0x238>
     998:	40 91 6e 00 	lds	r20, 0x006E
      current_setpoint = NUM_OF_LED_STATES; 
      advance_LED();
    }
  }
     
  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag != INSTORE))
     99c:	c9 01       	movw	r24, r18
     99e:	62 e3       	ldi	r22, 0x32	; 50
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	e7 d4       	rcall	.+2510   	; 0x1372 <__udivmodhi4>
     9a4:	89 2b       	or	r24, r25
     9a6:	91 f5       	brne	.+100    	; 0xa0c <__vector_8+0x228>
     9a8:	c9 01       	movw	r24, r18
     9aa:	81 50       	subi	r24, 0x01	; 1
     9ac:	96 40       	sbci	r25, 0x06	; 6
     9ae:	8d 3f       	cpi	r24, 0xFD	; 253
     9b0:	91 40       	sbci	r25, 0x01	; 1
     9b2:	d0 f4       	brcc	.+52     	; 0x9e8 <__vector_8+0x204>
     9b4:	80 91 87 00 	lds	r24, 0x0087
     9b8:	90 91 88 00 	lds	r25, 0x0088
     9bc:	89 2b       	or	r24, r25
     9be:	a1 f0       	breq	.+40     	; 0x9e8 <__vector_8+0x204>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     9c0:	45 30       	cpi	r20, 0x05	; 5
     9c2:	18 f0       	brcs	.+6      	; 0x9ca <__vector_8+0x1e6>
    {
       current_setpoint = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 6e 00 	sts	0x006E, r24
    }
    advance_LED();
     9ca:	68 dc       	rcall	.-1840   	; 0x29c <advance_LED>
  }  

  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END))
     9cc:	e0 91 6f 00 	lds	r30, 0x006F
     9d0:	f0 91 70 00 	lds	r31, 0x0070
     9d4:	9f 01       	movw	r18, r30
     9d6:	cf 01       	movw	r24, r30
     9d8:	62 e3       	ldi	r22, 0x32	; 50
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	ca d4       	rcall	.+2452   	; 0x1372 <__udivmodhi4>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_8+0x200>
     9e2:	a3 c0       	rjmp	.+326    	; 0xb2a <__vector_8+0x346>
     9e4:	40 91 6e 00 	lds	r20, 0x006E
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	30 41       	sbci	r19, 0x10	; 16
     9ec:	2f 3f       	cpi	r18, 0xFF	; 255
     9ee:	31 40       	sbci	r19, 0x01	; 1
     9f0:	08 f0       	brcs	.+2      	; 0x9f4 <__vector_8+0x210>
     9f2:	6c c0       	rjmp	.+216    	; 0xacc <__vector_8+0x2e8>
  {
    if (current_setpoint >= NUM_OF_LED_STATES -1) //use the two lowest powers.
     9f4:	45 30       	cpi	r20, 0x05	; 5
     9f6:	18 f0       	brcs	.+6      	; 0x9fe <__vector_8+0x21a>
    {
       current_setpoint = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 6e 00 	sts	0x006E, r24
    }
    advance_LED();
     9fe:	4e dc       	rcall	.-1892   	; 0x29c <advance_LED>
     a00:	20 91 6f 00 	lds	r18, 0x006F
     a04:	30 91 70 00 	lds	r19, 0x0070
     a08:	40 91 6e 00 	lds	r20, 0x006E
  }

  if ((button_hold_down_time > BUTTON_STUCK))
     a0c:	29 38       	cpi	r18, 0x89	; 137
     a0e:	33 41       	sbci	r19, 0x13	; 19
     a10:	08 f4       	brcc	.+2      	; 0xa14 <__vector_8+0x230>
     a12:	20 cf       	rjmp	.-448    	; 0x854 <__vector_8+0x70>
  {
    killit = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 6b 00 	sts	0x006B, r24
     a1a:	1c cf       	rjmp	.-456    	; 0x854 <__vector_8+0x70>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     a1c:	80 91 89 00 	lds	r24, 0x0089
     a20:	90 91 8a 00 	lds	r25, 0x008A
  {
    if (current_setpoint != 0)
     a24:	40 91 6e 00 	lds	r20, 0x006E
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__vector_8+0x24a>
     a2c:	b7 cf       	rjmp	.-146    	; 0x99c <__vector_8+0x1b8>
  {
    if (current_setpoint != 0)
     a2e:	44 23       	and	r20, r20
     a30:	09 f4       	brne	.+2      	; 0xa34 <__vector_8+0x250>
     a32:	b4 cf       	rjmp	.-152    	; 0x99c <__vector_8+0x1b8>
    {
      current_setpoint = NUM_OF_LED_STATES; 
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	80 93 6e 00 	sts	0x006E, r24
      advance_LED();
     a3a:	30 dc       	rcall	.-1952   	; 0x29c <advance_LED>
     a3c:	e0 91 6f 00 	lds	r30, 0x006F
     a40:	f0 91 70 00 	lds	r31, 0x0070
     a44:	9f 01       	movw	r18, r30
     a46:	a8 cf       	rjmp	.-176    	; 0x998 <__vector_8+0x1b4>
    }
  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <__vector_8+0x26a>
     a4c:	4f c0       	rjmp	.+158    	; 0xaec <__vector_8+0x308>
    {
      last_setpoint = current_setpoint;   //save our position
      current_setpoint = NUM_OF_LED_STATES-1;
      advance_LED();
     }
    if (ISR_counter == 10)   //this should be about .1 of a second
     a4e:	8a 30       	cpi	r24, 0x0A	; 10
     a50:	09 f0       	breq	.+2      	; 0xa54 <__vector_8+0x270>
     a52:	0d cf       	rjmp	.-486    	; 0x86e <__vector_8+0x8a>
    {
      current_setpoint = last_setpoint; //restore the set point
     a54:	80 91 6c 00 	lds	r24, 0x006C
     a58:	80 93 6e 00 	sts	0x006E, r24
      advance_LED();
     a5c:	1f dc       	rcall	.-1986   	; 0x29c <advance_LED>
     a5e:	0e cf       	rjmp	.-484    	; 0x87c <__vector_8+0x98>
      {
        PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
        
        if (!C_CHECKBIT(CHARGE))  //active low, button is pressed
        {
          charging = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 72 00 	sts	0x0072, r24
          if (charge_from_boot == 0)
     a66:	80 91 71 00 	lds	r24, 0x0071
     a6a:	81 11       	cpse	r24, r1
     a6c:	40 cf       	rjmp	.-384    	; 0x8ee <__vector_8+0x10a>
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
     a6e:	28 e0       	ldi	r18, 0x08	; 8
     a70:	88 e1       	ldi	r24, 0x18	; 24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	a8 95       	wdr
     a7a:	81 bd       	out	0x21, r24	; 33
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	21 bd       	out	0x21, r18	; 33
     a80:	36 cf       	rjmp	.-404    	; 0x8ee <__vector_8+0x10a>
          //  charging = 0;
            button_down();
            button_state = DOWN;
          }
        } else {
          if (button_state == DOWN) //needed in case the torch is running and the charger is connected
     a82:	80 91 e3 00 	lds	r24, 0x00E3
     a86:	90 91 e4 00 	lds	r25, 0x00E4
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_8+0x2ac>
     a8e:	e0 ce       	rjmp	.-576    	; 0x850 <__vector_8+0x6c>
          {
          //  charging = 0;
            button_up();
     a90:	80 dc       	rcall	.-1792   	; 0x392 <button_up>
            button_state = UP;
     a92:	10 92 e4 00 	sts	0x00E4, r1
     a96:	10 92 e3 00 	sts	0x00E3, r1
     a9a:	da ce       	rjmp	.-588    	; 0x850 <__vector_8+0x6c>
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     a9c:	e3 30       	cpi	r30, 0x03	; 3
     a9e:	f1 05       	cpc	r31, r1
     aa0:	99 f1       	breq	.+102    	; 0xb08 <__vector_8+0x324>
     aa2:	9f 01       	movw	r18, r30
      advance_LED();
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     aa4:	c9 01       	movw	r24, r18
     aa6:	8f 73       	andi	r24, 0x3F	; 63
     aa8:	99 27       	eor	r25, r25
     aaa:	89 2b       	or	r24, r25
     aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_8+0x2cc>
     aae:	5c cf       	rjmp	.-328    	; 0x968 <__vector_8+0x184>
    {
      if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two highest powers.
     ab0:	80 91 6e 00 	lds	r24, 0x006E
     ab4:	85 30       	cpi	r24, 0x05	; 5
     ab6:	18 f0       	brcs	.+6      	; 0xabe <__vector_8+0x2da>
      {
         current_setpoint = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 6e 00 	sts	0x006E, r24
      }
      advance_LED();
     abe:	ee db       	rcall	.-2084   	; 0x29c <advance_LED>
     ac0:	e0 91 6f 00 	lds	r30, 0x006F
     ac4:	f0 91 70 00 	lds	r31, 0x0070
     ac8:	9f 01       	movw	r18, r30
     aca:	33 cf       	rjmp	.-410    	; 0x932 <__vector_8+0x14e>
     acc:	9f 01       	movw	r18, r30
     ace:	9e cf       	rjmp	.-196    	; 0xa0c <__vector_8+0x228>
    advance_LED();
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     ad0:	80 91 6e 00 	lds	r24, 0x006E
     ad4:	85 30       	cpi	r24, 0x05	; 5
     ad6:	18 f0       	brcs	.+6      	; 0xade <__vector_8+0x2fa>
    {
       current_setpoint = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 6e 00 	sts	0x006E, r24
    }
    advance_LED();
     ade:	de db       	rcall	.-2116   	; 0x29c <advance_LED>
     ae0:	e0 91 6f 00 	lds	r30, 0x006F
     ae4:	f0 91 70 00 	lds	r31, 0x0070
     ae8:	9f 01       	movw	r18, r30
     aea:	4f cf       	rjmp	.-354    	; 0x98a <__vector_8+0x1a6>
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
    {
      last_setpoint = current_setpoint;   //save our position
     aec:	40 93 6c 00 	sts	0x006C, r20
      current_setpoint = NUM_OF_LED_STATES-1;
     af0:	85 e0       	ldi	r24, 0x05	; 5
     af2:	80 93 6e 00 	sts	0x006E, r24
      advance_LED();
     af6:	d2 db       	rcall	.-2140   	; 0x29c <advance_LED>
     af8:	bc ce       	rjmp	.-648    	; 0x872 <__vector_8+0x8e>
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
          }
        } else {
          if (charging == 1)
          {
            charging = 0;
     afa:	10 92 72 00 	sts	0x0072, r1
            killit = 1;
     afe:	80 93 6b 00 	sts	0x006B, r24
            charge_from_boot = 0;
     b02:	10 92 71 00 	sts	0x0071, r1
     b06:	f3 ce       	rjmp	.-538    	; 0x8ee <__vector_8+0x10a>
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
    {
      current_setpoint = NUM_OF_LED_STATES - 1;
     b08:	85 e0       	ldi	r24, 0x05	; 5
     b0a:	80 93 6e 00 	sts	0x006E, r24
      advance_LED();
     b0e:	c6 db       	rcall	.-2164   	; 0x29c <advance_LED>
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     b10:	80 91 89 00 	lds	r24, 0x0089
     b14:	90 91 8a 00 	lds	r25, 0x008A
     b18:	e0 91 6f 00 	lds	r30, 0x006F
     b1c:	f0 91 70 00 	lds	r31, 0x0070
     b20:	9f 01       	movw	r18, r30
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	09 f4       	brne	.+2      	; 0xb28 <__vector_8+0x344>
     b26:	be cf       	rjmp	.-132    	; 0xaa4 <__vector_8+0x2c0>
     b28:	04 cf       	rjmp	.-504    	; 0x932 <__vector_8+0x14e>
     b2a:	9f 01       	movw	r18, r30
     b2c:	40 91 6e 00 	lds	r20, 0x006E
     b30:	6d cf       	rjmp	.-294    	; 0xa0c <__vector_8+0x228>

00000b32 <__vector_3>:
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	8f 93       	push	r24
     b3e:	10 bc       	out	0x20, r1	; 32
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	80 93 75 00 	sts	0x0075, r24
     b46:	8f 91       	pop	r24
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <vfprintf>:
     b52:	a2 e1       	ldi	r26, 0x12	; 18
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ee ea       	ldi	r30, 0xAE	; 174
     b58:	f5 e0       	ldi	r31, 0x05	; 5
     b5a:	41 c4       	rjmp	.+2178   	; 0x13de <__prologue_saves__>
     b5c:	7c 01       	movw	r14, r24
     b5e:	1b 01       	movw	r2, r22
     b60:	6a 01       	movw	r12, r20
     b62:	fc 01       	movw	r30, r24
     b64:	17 82       	std	Z+7, r1	; 0x07
     b66:	16 82       	std	Z+6, r1	; 0x06
     b68:	83 81       	ldd	r24, Z+3	; 0x03
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	32 c3       	rjmp	.+1636   	; 0x11d2 <vfprintf+0x680>
     b6e:	9e 01       	movw	r18, r28
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	49 01       	movw	r8, r18
     b76:	f7 01       	movw	r30, r14
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	f1 01       	movw	r30, r2
     b7c:	93 fd       	sbrc	r25, 3
     b7e:	85 91       	lpm	r24, Z+
     b80:	93 ff       	sbrs	r25, 3
     b82:	81 91       	ld	r24, Z+
     b84:	1f 01       	movw	r2, r30
     b86:	88 23       	and	r24, r24
     b88:	09 f4       	brne	.+2      	; 0xb8c <vfprintf+0x3a>
     b8a:	1f c3       	rjmp	.+1598   	; 0x11ca <vfprintf+0x678>
     b8c:	85 32       	cpi	r24, 0x25	; 37
     b8e:	39 f4       	brne	.+14     	; 0xb9e <vfprintf+0x4c>
     b90:	93 fd       	sbrc	r25, 3
     b92:	85 91       	lpm	r24, Z+
     b94:	93 ff       	sbrs	r25, 3
     b96:	81 91       	ld	r24, Z+
     b98:	1f 01       	movw	r2, r30
     b9a:	85 32       	cpi	r24, 0x25	; 37
     b9c:	31 f4       	brne	.+12     	; 0xbaa <vfprintf+0x58>
     b9e:	b7 01       	movw	r22, r14
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	42 d5       	rcall	.+2692   	; 0x1628 <fputc>
     ba4:	56 01       	movw	r10, r12
     ba6:	65 01       	movw	r12, r10
     ba8:	e6 cf       	rjmp	.-52     	; 0xb76 <vfprintf+0x24>
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	51 2c       	mov	r5, r1
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	20 32       	cpi	r18, 0x20	; 32
     bb2:	a0 f4       	brcc	.+40     	; 0xbdc <vfprintf+0x8a>
     bb4:	8b 32       	cpi	r24, 0x2B	; 43
     bb6:	69 f0       	breq	.+26     	; 0xbd2 <vfprintf+0x80>
     bb8:	30 f4       	brcc	.+12     	; 0xbc6 <vfprintf+0x74>
     bba:	80 32       	cpi	r24, 0x20	; 32
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <vfprintf+0x82>
     bbe:	83 32       	cpi	r24, 0x23	; 35
     bc0:	69 f4       	brne	.+26     	; 0xbdc <vfprintf+0x8a>
     bc2:	20 61       	ori	r18, 0x10	; 16
     bc4:	2c c0       	rjmp	.+88     	; 0xc1e <vfprintf+0xcc>
     bc6:	8d 32       	cpi	r24, 0x2D	; 45
     bc8:	39 f0       	breq	.+14     	; 0xbd8 <vfprintf+0x86>
     bca:	80 33       	cpi	r24, 0x30	; 48
     bcc:	39 f4       	brne	.+14     	; 0xbdc <vfprintf+0x8a>
     bce:	21 60       	ori	r18, 0x01	; 1
     bd0:	26 c0       	rjmp	.+76     	; 0xc1e <vfprintf+0xcc>
     bd2:	22 60       	ori	r18, 0x02	; 2
     bd4:	24 60       	ori	r18, 0x04	; 4
     bd6:	23 c0       	rjmp	.+70     	; 0xc1e <vfprintf+0xcc>
     bd8:	28 60       	ori	r18, 0x08	; 8
     bda:	21 c0       	rjmp	.+66     	; 0xc1e <vfprintf+0xcc>
     bdc:	27 fd       	sbrc	r18, 7
     bde:	27 c0       	rjmp	.+78     	; 0xc2e <vfprintf+0xdc>
     be0:	30 ed       	ldi	r19, 0xD0	; 208
     be2:	38 0f       	add	r19, r24
     be4:	3a 30       	cpi	r19, 0x0A	; 10
     be6:	78 f4       	brcc	.+30     	; 0xc06 <vfprintf+0xb4>
     be8:	26 ff       	sbrs	r18, 6
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <vfprintf+0xa6>
     bec:	81 2f       	mov	r24, r17
     bee:	6a e0       	ldi	r22, 0x0A	; 10
     bf0:	ab d3       	rcall	.+1878   	; 0x1348 <__mulqi3>
     bf2:	18 2f       	mov	r17, r24
     bf4:	13 0f       	add	r17, r19
     bf6:	13 c0       	rjmp	.+38     	; 0xc1e <vfprintf+0xcc>
     bf8:	85 2d       	mov	r24, r5
     bfa:	6a e0       	ldi	r22, 0x0A	; 10
     bfc:	a5 d3       	rcall	.+1866   	; 0x1348 <__mulqi3>
     bfe:	58 2e       	mov	r5, r24
     c00:	53 0e       	add	r5, r19
     c02:	20 62       	ori	r18, 0x20	; 32
     c04:	0c c0       	rjmp	.+24     	; 0xc1e <vfprintf+0xcc>
     c06:	8e 32       	cpi	r24, 0x2E	; 46
     c08:	21 f4       	brne	.+8      	; 0xc12 <vfprintf+0xc0>
     c0a:	26 fd       	sbrc	r18, 6
     c0c:	de c2       	rjmp	.+1468   	; 0x11ca <vfprintf+0x678>
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0xcc>
     c12:	8c 36       	cpi	r24, 0x6C	; 108
     c14:	11 f4       	brne	.+4      	; 0xc1a <vfprintf+0xc8>
     c16:	20 68       	ori	r18, 0x80	; 128
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfprintf+0xcc>
     c1a:	88 36       	cpi	r24, 0x68	; 104
     c1c:	41 f4       	brne	.+16     	; 0xc2e <vfprintf+0xdc>
     c1e:	f1 01       	movw	r30, r2
     c20:	93 fd       	sbrc	r25, 3
     c22:	85 91       	lpm	r24, Z+
     c24:	93 ff       	sbrs	r25, 3
     c26:	81 91       	ld	r24, Z+
     c28:	1f 01       	movw	r2, r30
     c2a:	81 11       	cpse	r24, r1
     c2c:	c1 cf       	rjmp	.-126    	; 0xbb0 <vfprintf+0x5e>
     c2e:	9b eb       	ldi	r25, 0xBB	; 187
     c30:	98 0f       	add	r25, r24
     c32:	93 30       	cpi	r25, 0x03	; 3
     c34:	18 f4       	brcc	.+6      	; 0xc3c <vfprintf+0xea>
     c36:	20 61       	ori	r18, 0x10	; 16
     c38:	80 5e       	subi	r24, 0xE0	; 224
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0xf6>
     c3c:	9b e9       	ldi	r25, 0x9B	; 155
     c3e:	98 0f       	add	r25, r24
     c40:	93 30       	cpi	r25, 0x03	; 3
     c42:	08 f0       	brcs	.+2      	; 0xc46 <vfprintf+0xf4>
     c44:	83 c1       	rjmp	.+774    	; 0xf4c <vfprintf+0x3fa>
     c46:	2f 7e       	andi	r18, 0xEF	; 239
     c48:	26 ff       	sbrs	r18, 6
     c4a:	16 e0       	ldi	r17, 0x06	; 6
     c4c:	2f 73       	andi	r18, 0x3F	; 63
     c4e:	72 2e       	mov	r7, r18
     c50:	85 36       	cpi	r24, 0x65	; 101
     c52:	19 f4       	brne	.+6      	; 0xc5a <vfprintf+0x108>
     c54:	20 64       	ori	r18, 0x40	; 64
     c56:	72 2e       	mov	r7, r18
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <vfprintf+0x118>
     c5a:	86 36       	cpi	r24, 0x66	; 102
     c5c:	21 f4       	brne	.+8      	; 0xc66 <vfprintf+0x114>
     c5e:	f2 2f       	mov	r31, r18
     c60:	f0 68       	ori	r31, 0x80	; 128
     c62:	7f 2e       	mov	r7, r31
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x118>
     c66:	11 11       	cpse	r17, r1
     c68:	11 50       	subi	r17, 0x01	; 1
     c6a:	77 fe       	sbrs	r7, 7
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <vfprintf+0x12a>
     c6e:	1c 33       	cpi	r17, 0x3C	; 60
     c70:	48 f4       	brcc	.+18     	; 0xc84 <vfprintf+0x132>
     c72:	44 24       	eor	r4, r4
     c74:	43 94       	inc	r4
     c76:	41 0e       	add	r4, r17
     c78:	27 e0       	ldi	r18, 0x07	; 7
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <vfprintf+0x140>
     c7c:	18 30       	cpi	r17, 0x08	; 8
     c7e:	30 f4       	brcc	.+12     	; 0xc8c <vfprintf+0x13a>
     c80:	21 2f       	mov	r18, r17
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <vfprintf+0x13e>
     c84:	27 e0       	ldi	r18, 0x07	; 7
     c86:	4c e3       	ldi	r20, 0x3C	; 60
     c88:	44 2e       	mov	r4, r20
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <vfprintf+0x140>
     c8c:	27 e0       	ldi	r18, 0x07	; 7
     c8e:	17 e0       	ldi	r17, 0x07	; 7
     c90:	41 2c       	mov	r4, r1
     c92:	56 01       	movw	r10, r12
     c94:	34 e0       	ldi	r19, 0x04	; 4
     c96:	a3 0e       	add	r10, r19
     c98:	b1 1c       	adc	r11, r1
     c9a:	f6 01       	movw	r30, r12
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	04 2d       	mov	r16, r4
     ca6:	a4 01       	movw	r20, r8
     ca8:	d1 d3       	rcall	.+1954   	; 0x144c <__ftoa_engine>
     caa:	6c 01       	movw	r12, r24
     cac:	09 81       	ldd	r16, Y+1	; 0x01
     cae:	00 ff       	sbrs	r16, 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x164>
     cb2:	03 ff       	sbrs	r16, 3
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x170>
     cb6:	71 fc       	sbrc	r7, 1
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x176>
     cba:	72 fc       	sbrc	r7, 2
     cbc:	08 c0       	rjmp	.+16     	; 0xcce <vfprintf+0x17c>
     cbe:	61 2c       	mov	r6, r1
     cc0:	08 c0       	rjmp	.+16     	; 0xcd2 <vfprintf+0x180>
     cc2:	3d e2       	ldi	r19, 0x2D	; 45
     cc4:	63 2e       	mov	r6, r19
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <vfprintf+0x180>
     cc8:	2b e2       	ldi	r18, 0x2B	; 43
     cca:	62 2e       	mov	r6, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x180>
     cce:	90 e2       	ldi	r25, 0x20	; 32
     cd0:	69 2e       	mov	r6, r25
     cd2:	80 2f       	mov	r24, r16
     cd4:	8c 70       	andi	r24, 0x0C	; 12
     cd6:	81 f1       	breq	.+96     	; 0xd38 <vfprintf+0x1e6>
     cd8:	66 20       	and	r6, r6
     cda:	11 f0       	breq	.+4      	; 0xce0 <vfprintf+0x18e>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <vfprintf+0x190>
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	85 15       	cp	r24, r5
     ce4:	10 f0       	brcs	.+4      	; 0xcea <vfprintf+0x198>
     ce6:	51 2c       	mov	r5, r1
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <vfprintf+0x1ac>
     cea:	58 1a       	sub	r5, r24
     cec:	73 fc       	sbrc	r7, 3
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <vfprintf+0x1ac>
     cf0:	b7 01       	movw	r22, r14
     cf2:	80 e2       	ldi	r24, 0x20	; 32
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	98 d4       	rcall	.+2352   	; 0x1628 <fputc>
     cf8:	5a 94       	dec	r5
     cfa:	d1 f7       	brne	.-12     	; 0xcf0 <vfprintf+0x19e>
     cfc:	f4 cf       	rjmp	.-24     	; 0xce6 <vfprintf+0x194>
     cfe:	66 20       	and	r6, r6
     d00:	21 f0       	breq	.+8      	; 0xd0a <vfprintf+0x1b8>
     d02:	b7 01       	movw	r22, r14
     d04:	86 2d       	mov	r24, r6
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	8f d4       	rcall	.+2334   	; 0x1628 <fputc>
     d0a:	03 fd       	sbrc	r16, 3
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x1c2>
     d0e:	06 e2       	ldi	r16, 0x26	; 38
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x1c6>
     d14:	02 e2       	ldi	r16, 0x22	; 34
     d16:	10 e0       	ldi	r17, 0x00	; 0
     d18:	f7 2d       	mov	r31, r7
     d1a:	f0 71       	andi	r31, 0x10	; 16
     d1c:	7f 2e       	mov	r7, r31
     d1e:	f8 01       	movw	r30, r16
     d20:	84 91       	lpm	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <vfprintf+0x1d6>
     d26:	48 c2       	rjmp	.+1168   	; 0x11b8 <vfprintf+0x666>
     d28:	71 10       	cpse	r7, r1
     d2a:	80 52       	subi	r24, 0x20	; 32
     d2c:	b7 01       	movw	r22, r14
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	7b d4       	rcall	.+2294   	; 0x1628 <fputc>
     d32:	0f 5f       	subi	r16, 0xFF	; 255
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	f3 cf       	rjmp	.-26     	; 0xd1e <vfprintf+0x1cc>
     d38:	77 fe       	sbrs	r7, 7
     d3a:	0f c0       	rjmp	.+30     	; 0xd5a <vfprintf+0x208>
     d3c:	4c 0c       	add	r4, r12
     d3e:	04 ff       	sbrs	r16, 4
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x1f8>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	81 33       	cpi	r24, 0x31	; 49
     d46:	09 f4       	brne	.+2      	; 0xd4a <vfprintf+0x1f8>
     d48:	4a 94       	dec	r4
     d4a:	14 14       	cp	r1, r4
     d4c:	74 f5       	brge	.+92     	; 0xdaa <vfprintf+0x258>
     d4e:	f8 e0       	ldi	r31, 0x08	; 8
     d50:	f4 15       	cp	r31, r4
     d52:	78 f5       	brcc	.+94     	; 0xdb2 <vfprintf+0x260>
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	48 2e       	mov	r4, r24
     d58:	2c c0       	rjmp	.+88     	; 0xdb2 <vfprintf+0x260>
     d5a:	76 fc       	sbrc	r7, 6
     d5c:	2a c0       	rjmp	.+84     	; 0xdb2 <vfprintf+0x260>
     d5e:	81 2f       	mov	r24, r17
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	8c 15       	cp	r24, r12
     d64:	9d 05       	cpc	r25, r13
     d66:	9c f0       	brlt	.+38     	; 0xd8e <vfprintf+0x23c>
     d68:	2c ef       	ldi	r18, 0xFC	; 252
     d6a:	c2 16       	cp	r12, r18
     d6c:	2f ef       	ldi	r18, 0xFF	; 255
     d6e:	d2 06       	cpc	r13, r18
     d70:	74 f0       	brlt	.+28     	; 0xd8e <vfprintf+0x23c>
     d72:	37 2d       	mov	r19, r7
     d74:	30 68       	ori	r19, 0x80	; 128
     d76:	73 2e       	mov	r7, r19
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <vfprintf+0x23c>
     d7a:	e2 e0       	ldi	r30, 0x02	; 2
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	e1 0f       	add	r30, r17
     d84:	f1 1d       	adc	r31, r1
     d86:	80 81       	ld	r24, Z
     d88:	80 33       	cpi	r24, 0x30	; 48
     d8a:	19 f4       	brne	.+6      	; 0xd92 <vfprintf+0x240>
     d8c:	11 50       	subi	r17, 0x01	; 1
     d8e:	11 11       	cpse	r17, r1
     d90:	f4 cf       	rjmp	.-24     	; 0xd7a <vfprintf+0x228>
     d92:	77 fe       	sbrs	r7, 7
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <vfprintf+0x260>
     d96:	44 24       	eor	r4, r4
     d98:	43 94       	inc	r4
     d9a:	41 0e       	add	r4, r17
     d9c:	81 2f       	mov	r24, r17
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	c8 16       	cp	r12, r24
     da2:	d9 06       	cpc	r13, r25
     da4:	2c f4       	brge	.+10     	; 0xdb0 <vfprintf+0x25e>
     da6:	1c 19       	sub	r17, r12
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <vfprintf+0x260>
     daa:	44 24       	eor	r4, r4
     dac:	43 94       	inc	r4
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <vfprintf+0x260>
     db0:	10 e0       	ldi	r17, 0x00	; 0
     db2:	77 fe       	sbrs	r7, 7
     db4:	07 c0       	rjmp	.+14     	; 0xdc4 <vfprintf+0x272>
     db6:	1c 14       	cp	r1, r12
     db8:	1d 04       	cpc	r1, r13
     dba:	3c f4       	brge	.+14     	; 0xdca <vfprintf+0x278>
     dbc:	96 01       	movw	r18, r12
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <vfprintf+0x27c>
     dc4:	25 e0       	ldi	r18, 0x05	; 5
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x27c>
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	66 20       	and	r6, r6
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <vfprintf+0x284>
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	11 23       	and	r17, r17
     dd8:	31 f0       	breq	.+12     	; 0xde6 <vfprintf+0x294>
     dda:	41 2f       	mov	r20, r17
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	4f 5f       	subi	r20, 0xFF	; 255
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	24 0f       	add	r18, r20
     de4:	35 1f       	adc	r19, r21
     de6:	45 2d       	mov	r20, r5
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	24 17       	cp	r18, r20
     dec:	35 07       	cpc	r19, r21
     dee:	14 f4       	brge	.+4      	; 0xdf4 <vfprintf+0x2a2>
     df0:	52 1a       	sub	r5, r18
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <vfprintf+0x2a4>
     df4:	51 2c       	mov	r5, r1
     df6:	87 2d       	mov	r24, r7
     df8:	89 70       	andi	r24, 0x09	; 9
     dfa:	41 f4       	brne	.+16     	; 0xe0c <vfprintf+0x2ba>
     dfc:	55 20       	and	r5, r5
     dfe:	31 f0       	breq	.+12     	; 0xe0c <vfprintf+0x2ba>
     e00:	b7 01       	movw	r22, r14
     e02:	80 e2       	ldi	r24, 0x20	; 32
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	10 d4       	rcall	.+2080   	; 0x1628 <fputc>
     e08:	5a 94       	dec	r5
     e0a:	f8 cf       	rjmp	.-16     	; 0xdfc <vfprintf+0x2aa>
     e0c:	66 20       	and	r6, r6
     e0e:	21 f0       	breq	.+8      	; 0xe18 <vfprintf+0x2c6>
     e10:	b7 01       	movw	r22, r14
     e12:	86 2d       	mov	r24, r6
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	08 d4       	rcall	.+2064   	; 0x1628 <fputc>
     e18:	73 fc       	sbrc	r7, 3
     e1a:	08 c0       	rjmp	.+16     	; 0xe2c <vfprintf+0x2da>
     e1c:	55 20       	and	r5, r5
     e1e:	31 f0       	breq	.+12     	; 0xe2c <vfprintf+0x2da>
     e20:	b7 01       	movw	r22, r14
     e22:	80 e3       	ldi	r24, 0x30	; 48
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	00 d4       	rcall	.+2048   	; 0x1628 <fputc>
     e28:	5a 94       	dec	r5
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <vfprintf+0x2ca>
     e2c:	77 fe       	sbrs	r7, 7
     e2e:	47 c0       	rjmp	.+142    	; 0xebe <vfprintf+0x36c>
     e30:	36 01       	movw	r6, r12
     e32:	d7 fe       	sbrs	r13, 7
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <vfprintf+0x2e8>
     e36:	61 2c       	mov	r6, r1
     e38:	71 2c       	mov	r7, r1
     e3a:	96 01       	movw	r18, r12
     e3c:	24 19       	sub	r18, r4
     e3e:	31 09       	sbc	r19, r1
     e40:	3d 87       	std	Y+13, r19	; 0x0d
     e42:	2c 87       	std	Y+12, r18	; 0x0c
     e44:	94 01       	movw	r18, r8
     e46:	2c 0d       	add	r18, r12
     e48:	3d 1d       	adc	r19, r13
     e4a:	3f 87       	std	Y+15, r19	; 0x0f
     e4c:	2e 87       	std	Y+14, r18	; 0x0e
     e4e:	81 2f       	mov	r24, r17
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	22 27       	eor	r18, r18
     e54:	33 27       	eor	r19, r19
     e56:	28 1b       	sub	r18, r24
     e58:	39 0b       	sbc	r19, r25
     e5a:	39 8b       	std	Y+17, r19	; 0x11
     e5c:	28 8b       	std	Y+16, r18	; 0x10
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	63 16       	cp	r6, r19
     e62:	73 06       	cpc	r7, r19
     e64:	21 f4       	brne	.+8      	; 0xe6e <vfprintf+0x31c>
     e66:	b7 01       	movw	r22, r14
     e68:	8e e2       	ldi	r24, 0x2E	; 46
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	dd d3       	rcall	.+1978   	; 0x1628 <fputc>
     e6e:	c6 14       	cp	r12, r6
     e70:	d7 04       	cpc	r13, r7
     e72:	5c f0       	brlt	.+22     	; 0xe8a <vfprintf+0x338>
     e74:	2c 85       	ldd	r18, Y+12	; 0x0c
     e76:	3d 85       	ldd	r19, Y+13	; 0x0d
     e78:	26 15       	cp	r18, r6
     e7a:	37 05       	cpc	r19, r7
     e7c:	34 f4       	brge	.+12     	; 0xe8a <vfprintf+0x338>
     e7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e80:	ff 85       	ldd	r31, Y+15	; 0x0f
     e82:	e6 19       	sub	r30, r6
     e84:	f7 09       	sbc	r31, r7
     e86:	81 81       	ldd	r24, Z+1	; 0x01
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <vfprintf+0x33a>
     e8a:	80 e3       	ldi	r24, 0x30	; 48
     e8c:	31 e0       	ldi	r19, 0x01	; 1
     e8e:	63 1a       	sub	r6, r19
     e90:	71 08       	sbc	r7, r1
     e92:	28 89       	ldd	r18, Y+16	; 0x10
     e94:	39 89       	ldd	r19, Y+17	; 0x11
     e96:	62 16       	cp	r6, r18
     e98:	73 06       	cpc	r7, r19
     e9a:	24 f0       	brlt	.+8      	; 0xea4 <vfprintf+0x352>
     e9c:	b7 01       	movw	r22, r14
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	c3 d3       	rcall	.+1926   	; 0x1628 <fputc>
     ea2:	dd cf       	rjmp	.-70     	; 0xe5e <vfprintf+0x30c>
     ea4:	6c 14       	cp	r6, r12
     ea6:	7d 04       	cpc	r7, r13
     ea8:	39 f4       	brne	.+14     	; 0xeb8 <vfprintf+0x366>
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	96 33       	cpi	r25, 0x36	; 54
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <vfprintf+0x364>
     eb0:	95 33       	cpi	r25, 0x35	; 53
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <vfprintf+0x366>
     eb4:	04 ff       	sbrs	r16, 4
     eb6:	81 e3       	ldi	r24, 0x31	; 49
     eb8:	b7 01       	movw	r22, r14
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	45 c0       	rjmp	.+138    	; 0xf48 <vfprintf+0x3f6>
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	81 33       	cpi	r24, 0x31	; 49
     ec2:	09 f0       	breq	.+2      	; 0xec6 <vfprintf+0x374>
     ec4:	0f 7e       	andi	r16, 0xEF	; 239
     ec6:	b7 01       	movw	r22, r14
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	ae d3       	rcall	.+1884   	; 0x1628 <fputc>
     ecc:	11 11       	cpse	r17, r1
     ece:	05 c0       	rjmp	.+10     	; 0xeda <vfprintf+0x388>
     ed0:	74 fe       	sbrs	r7, 4
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <vfprintf+0x3ae>
     ed4:	85 e4       	ldi	r24, 0x45	; 69
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	15 c0       	rjmp	.+42     	; 0xf04 <vfprintf+0x3b2>
     eda:	b7 01       	movw	r22, r14
     edc:	8e e2       	ldi	r24, 0x2E	; 46
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a3 d3       	rcall	.+1862   	; 0x1628 <fputc>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	66 24       	eor	r6, r6
     ee6:	63 94       	inc	r6
     ee8:	68 0e       	add	r6, r24
     eea:	f4 01       	movw	r30, r8
     eec:	e8 0f       	add	r30, r24
     eee:	f1 1d       	adc	r31, r1
     ef0:	80 81       	ld	r24, Z
     ef2:	b7 01       	movw	r22, r14
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	98 d3       	rcall	.+1840   	; 0x1628 <fputc>
     ef8:	11 50       	subi	r17, 0x01	; 1
     efa:	51 f3       	breq	.-44     	; 0xed0 <vfprintf+0x37e>
     efc:	86 2d       	mov	r24, r6
     efe:	f2 cf       	rjmp	.-28     	; 0xee4 <vfprintf+0x392>
     f00:	85 e6       	ldi	r24, 0x65	; 101
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	b7 01       	movw	r22, r14
     f06:	90 d3       	rcall	.+1824   	; 0x1628 <fputc>
     f08:	d7 fc       	sbrc	r13, 7
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <vfprintf+0x3c4>
     f0c:	c1 14       	cp	r12, r1
     f0e:	d1 04       	cpc	r13, r1
     f10:	39 f4       	brne	.+14     	; 0xf20 <vfprintf+0x3ce>
     f12:	04 ff       	sbrs	r16, 4
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <vfprintf+0x3ce>
     f16:	d1 94       	neg	r13
     f18:	c1 94       	neg	r12
     f1a:	d1 08       	sbc	r13, r1
     f1c:	8d e2       	ldi	r24, 0x2D	; 45
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <vfprintf+0x3d0>
     f20:	8b e2       	ldi	r24, 0x2B	; 43
     f22:	b7 01       	movw	r22, r14
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	80 d3       	rcall	.+1792   	; 0x1628 <fputc>
     f28:	80 e3       	ldi	r24, 0x30	; 48
     f2a:	9a e0       	ldi	r25, 0x0A	; 10
     f2c:	c9 16       	cp	r12, r25
     f2e:	d1 04       	cpc	r13, r1
     f30:	2c f0       	brlt	.+10     	; 0xf3c <vfprintf+0x3ea>
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	3a e0       	ldi	r19, 0x0A	; 10
     f36:	c3 1a       	sub	r12, r19
     f38:	d1 08       	sbc	r13, r1
     f3a:	f7 cf       	rjmp	.-18     	; 0xf2a <vfprintf+0x3d8>
     f3c:	b7 01       	movw	r22, r14
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	73 d3       	rcall	.+1766   	; 0x1628 <fputc>
     f42:	b7 01       	movw	r22, r14
     f44:	c6 01       	movw	r24, r12
     f46:	c0 96       	adiw	r24, 0x30	; 48
     f48:	6f d3       	rcall	.+1758   	; 0x1628 <fputc>
     f4a:	36 c1       	rjmp	.+620    	; 0x11b8 <vfprintf+0x666>
     f4c:	83 36       	cpi	r24, 0x63	; 99
     f4e:	31 f0       	breq	.+12     	; 0xf5c <vfprintf+0x40a>
     f50:	83 37       	cpi	r24, 0x73	; 115
     f52:	79 f0       	breq	.+30     	; 0xf72 <vfprintf+0x420>
     f54:	83 35       	cpi	r24, 0x53	; 83
     f56:	09 f0       	breq	.+2      	; 0xf5a <vfprintf+0x408>
     f58:	54 c0       	rjmp	.+168    	; 0x1002 <vfprintf+0x4b0>
     f5a:	20 c0       	rjmp	.+64     	; 0xf9c <vfprintf+0x44a>
     f5c:	56 01       	movw	r10, r12
     f5e:	e2 e0       	ldi	r30, 0x02	; 2
     f60:	ae 0e       	add	r10, r30
     f62:	b1 1c       	adc	r11, r1
     f64:	f6 01       	movw	r30, r12
     f66:	80 81       	ld	r24, Z
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	01 e0       	ldi	r16, 0x01	; 1
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	64 01       	movw	r12, r8
     f70:	13 c0       	rjmp	.+38     	; 0xf98 <vfprintf+0x446>
     f72:	56 01       	movw	r10, r12
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	af 0e       	add	r10, r31
     f78:	b1 1c       	adc	r11, r1
     f7a:	f6 01       	movw	r30, r12
     f7c:	c0 80       	ld	r12, Z
     f7e:	d1 80       	ldd	r13, Z+1	; 0x01
     f80:	26 ff       	sbrs	r18, 6
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <vfprintf+0x438>
     f84:	61 2f       	mov	r22, r17
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0x43c>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	c6 01       	movw	r24, r12
     f90:	2a 8b       	std	Y+18, r18	; 0x12
     f92:	3f d3       	rcall	.+1662   	; 0x1612 <strnlen>
     f94:	8c 01       	movw	r16, r24
     f96:	2a 89       	ldd	r18, Y+18	; 0x12
     f98:	2f 77       	andi	r18, 0x7F	; 127
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <vfprintf+0x472>
     f9c:	56 01       	movw	r10, r12
     f9e:	f2 e0       	ldi	r31, 0x02	; 2
     fa0:	af 0e       	add	r10, r31
     fa2:	b1 1c       	adc	r11, r1
     fa4:	f6 01       	movw	r30, r12
     fa6:	c0 80       	ld	r12, Z
     fa8:	d1 80       	ldd	r13, Z+1	; 0x01
     faa:	26 ff       	sbrs	r18, 6
     fac:	03 c0       	rjmp	.+6      	; 0xfb4 <vfprintf+0x462>
     fae:	61 2f       	mov	r22, r17
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <vfprintf+0x466>
     fb4:	6f ef       	ldi	r22, 0xFF	; 255
     fb6:	7f ef       	ldi	r23, 0xFF	; 255
     fb8:	c6 01       	movw	r24, r12
     fba:	2a 8b       	std	Y+18, r18	; 0x12
     fbc:	1f d3       	rcall	.+1598   	; 0x15fc <strnlen_P>
     fbe:	8c 01       	movw	r16, r24
     fc0:	2a 89       	ldd	r18, Y+18	; 0x12
     fc2:	20 68       	ori	r18, 0x80	; 128
     fc4:	72 2e       	mov	r7, r18
     fc6:	23 fd       	sbrc	r18, 3
     fc8:	18 c0       	rjmp	.+48     	; 0xffa <vfprintf+0x4a8>
     fca:	85 2d       	mov	r24, r5
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	08 17       	cp	r16, r24
     fd0:	19 07       	cpc	r17, r25
     fd2:	98 f4       	brcc	.+38     	; 0xffa <vfprintf+0x4a8>
     fd4:	b7 01       	movw	r22, r14
     fd6:	80 e2       	ldi	r24, 0x20	; 32
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	26 d3       	rcall	.+1612   	; 0x1628 <fputc>
     fdc:	5a 94       	dec	r5
     fde:	f5 cf       	rjmp	.-22     	; 0xfca <vfprintf+0x478>
     fe0:	f6 01       	movw	r30, r12
     fe2:	77 fc       	sbrc	r7, 7
     fe4:	85 91       	lpm	r24, Z+
     fe6:	77 fe       	sbrs	r7, 7
     fe8:	81 91       	ld	r24, Z+
     fea:	6f 01       	movw	r12, r30
     fec:	b7 01       	movw	r22, r14
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	1b d3       	rcall	.+1590   	; 0x1628 <fputc>
     ff2:	51 10       	cpse	r5, r1
     ff4:	5a 94       	dec	r5
     ff6:	01 50       	subi	r16, 0x01	; 1
     ff8:	11 09       	sbc	r17, r1
     ffa:	01 15       	cp	r16, r1
     ffc:	11 05       	cpc	r17, r1
     ffe:	81 f7       	brne	.-32     	; 0xfe0 <vfprintf+0x48e>
    1000:	db c0       	rjmp	.+438    	; 0x11b8 <vfprintf+0x666>
    1002:	84 36       	cpi	r24, 0x64	; 100
    1004:	11 f0       	breq	.+4      	; 0x100a <vfprintf+0x4b8>
    1006:	89 36       	cpi	r24, 0x69	; 105
    1008:	49 f5       	brne	.+82     	; 0x105c <vfprintf+0x50a>
    100a:	56 01       	movw	r10, r12
    100c:	27 ff       	sbrs	r18, 7
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <vfprintf+0x4d0>
    1010:	f4 e0       	ldi	r31, 0x04	; 4
    1012:	af 0e       	add	r10, r31
    1014:	b1 1c       	adc	r11, r1
    1016:	f6 01       	movw	r30, r12
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <vfprintf+0x4e4>
    1022:	f2 e0       	ldi	r31, 0x02	; 2
    1024:	af 0e       	add	r10, r31
    1026:	b1 1c       	adc	r11, r1
    1028:	f6 01       	movw	r30, r12
    102a:	60 81       	ld	r22, Z
    102c:	71 81       	ldd	r23, Z+1	; 0x01
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	02 2f       	mov	r16, r18
    1038:	0f 76       	andi	r16, 0x6F	; 111
    103a:	97 ff       	sbrs	r25, 7
    103c:	08 c0       	rjmp	.+16     	; 0x104e <vfprintf+0x4fc>
    103e:	90 95       	com	r25
    1040:	80 95       	com	r24
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	00 68       	ori	r16, 0x80	; 128
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	a4 01       	movw	r20, r8
    1054:	1b d3       	rcall	.+1590   	; 0x168c <__ultoa_invert>
    1056:	c8 2e       	mov	r12, r24
    1058:	c8 18       	sub	r12, r8
    105a:	3d c0       	rjmp	.+122    	; 0x10d6 <vfprintf+0x584>
    105c:	02 2f       	mov	r16, r18
    105e:	85 37       	cpi	r24, 0x75	; 117
    1060:	21 f4       	brne	.+8      	; 0x106a <vfprintf+0x518>
    1062:	0f 7e       	andi	r16, 0xEF	; 239
    1064:	2a e0       	ldi	r18, 0x0A	; 10
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	1d c0       	rjmp	.+58     	; 0x10a4 <vfprintf+0x552>
    106a:	09 7f       	andi	r16, 0xF9	; 249
    106c:	8f 36       	cpi	r24, 0x6F	; 111
    106e:	91 f0       	breq	.+36     	; 0x1094 <vfprintf+0x542>
    1070:	18 f4       	brcc	.+6      	; 0x1078 <vfprintf+0x526>
    1072:	88 35       	cpi	r24, 0x58	; 88
    1074:	59 f0       	breq	.+22     	; 0x108c <vfprintf+0x53a>
    1076:	a9 c0       	rjmp	.+338    	; 0x11ca <vfprintf+0x678>
    1078:	80 37       	cpi	r24, 0x70	; 112
    107a:	19 f0       	breq	.+6      	; 0x1082 <vfprintf+0x530>
    107c:	88 37       	cpi	r24, 0x78	; 120
    107e:	11 f0       	breq	.+4      	; 0x1084 <vfprintf+0x532>
    1080:	a4 c0       	rjmp	.+328    	; 0x11ca <vfprintf+0x678>
    1082:	00 61       	ori	r16, 0x10	; 16
    1084:	04 ff       	sbrs	r16, 4
    1086:	09 c0       	rjmp	.+18     	; 0x109a <vfprintf+0x548>
    1088:	04 60       	ori	r16, 0x04	; 4
    108a:	07 c0       	rjmp	.+14     	; 0x109a <vfprintf+0x548>
    108c:	24 ff       	sbrs	r18, 4
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <vfprintf+0x54e>
    1090:	06 60       	ori	r16, 0x06	; 6
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <vfprintf+0x54e>
    1094:	28 e0       	ldi	r18, 0x08	; 8
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <vfprintf+0x552>
    109a:	20 e1       	ldi	r18, 0x10	; 16
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x552>
    10a0:	20 e1       	ldi	r18, 0x10	; 16
    10a2:	32 e0       	ldi	r19, 0x02	; 2
    10a4:	56 01       	movw	r10, r12
    10a6:	07 ff       	sbrs	r16, 7
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <vfprintf+0x56a>
    10aa:	f4 e0       	ldi	r31, 0x04	; 4
    10ac:	af 0e       	add	r10, r31
    10ae:	b1 1c       	adc	r11, r1
    10b0:	f6 01       	movw	r30, r12
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <vfprintf+0x57a>
    10bc:	f2 e0       	ldi	r31, 0x02	; 2
    10be:	af 0e       	add	r10, r31
    10c0:	b1 1c       	adc	r11, r1
    10c2:	f6 01       	movw	r30, r12
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a4 01       	movw	r20, r8
    10ce:	de d2       	rcall	.+1468   	; 0x168c <__ultoa_invert>
    10d0:	c8 2e       	mov	r12, r24
    10d2:	c8 18       	sub	r12, r8
    10d4:	0f 77       	andi	r16, 0x7F	; 127
    10d6:	06 ff       	sbrs	r16, 6
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <vfprintf+0x59e>
    10da:	20 2f       	mov	r18, r16
    10dc:	2e 7f       	andi	r18, 0xFE	; 254
    10de:	c1 16       	cp	r12, r17
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <vfprintf+0x5a4>
    10e2:	04 ff       	sbrs	r16, 4
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <vfprintf+0x5a8>
    10e6:	02 fd       	sbrc	r16, 2
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x5a8>
    10ea:	20 2f       	mov	r18, r16
    10ec:	2e 7e       	andi	r18, 0xEE	; 238
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <vfprintf+0x5a8>
    10f0:	dc 2c       	mov	r13, r12
    10f2:	20 2f       	mov	r18, r16
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x5aa>
    10f6:	dc 2c       	mov	r13, r12
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x5aa>
    10fa:	d1 2e       	mov	r13, r17
    10fc:	24 ff       	sbrs	r18, 4
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x5c8>
    1100:	fe 01       	movw	r30, r28
    1102:	ec 0d       	add	r30, r12
    1104:	f1 1d       	adc	r31, r1
    1106:	80 81       	ld	r24, Z
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	11 f4       	brne	.+4      	; 0x1110 <vfprintf+0x5be>
    110c:	29 7e       	andi	r18, 0xE9	; 233
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <vfprintf+0x5d0>
    1110:	22 ff       	sbrs	r18, 2
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <vfprintf+0x5ce>
    1114:	d3 94       	inc	r13
    1116:	d3 94       	inc	r13
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <vfprintf+0x5d0>
    111a:	82 2f       	mov	r24, r18
    111c:	86 78       	andi	r24, 0x86	; 134
    111e:	09 f0       	breq	.+2      	; 0x1122 <vfprintf+0x5d0>
    1120:	d3 94       	inc	r13
    1122:	23 fd       	sbrc	r18, 3
    1124:	12 c0       	rjmp	.+36     	; 0x114a <vfprintf+0x5f8>
    1126:	20 ff       	sbrs	r18, 0
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <vfprintf+0x5e4>
    112a:	1c 2d       	mov	r17, r12
    112c:	d5 14       	cp	r13, r5
    112e:	18 f4       	brcc	.+6      	; 0x1136 <vfprintf+0x5e4>
    1130:	15 0d       	add	r17, r5
    1132:	1d 19       	sub	r17, r13
    1134:	d5 2c       	mov	r13, r5
    1136:	d5 14       	cp	r13, r5
    1138:	60 f4       	brcc	.+24     	; 0x1152 <vfprintf+0x600>
    113a:	b7 01       	movw	r22, r14
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	2a 8b       	std	Y+18, r18	; 0x12
    1142:	72 d2       	rcall	.+1252   	; 0x1628 <fputc>
    1144:	d3 94       	inc	r13
    1146:	2a 89       	ldd	r18, Y+18	; 0x12
    1148:	f6 cf       	rjmp	.-20     	; 0x1136 <vfprintf+0x5e4>
    114a:	d5 14       	cp	r13, r5
    114c:	10 f4       	brcc	.+4      	; 0x1152 <vfprintf+0x600>
    114e:	5d 18       	sub	r5, r13
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <vfprintf+0x602>
    1152:	51 2c       	mov	r5, r1
    1154:	24 ff       	sbrs	r18, 4
    1156:	11 c0       	rjmp	.+34     	; 0x117a <vfprintf+0x628>
    1158:	b7 01       	movw	r22, r14
    115a:	80 e3       	ldi	r24, 0x30	; 48
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	2a 8b       	std	Y+18, r18	; 0x12
    1160:	63 d2       	rcall	.+1222   	; 0x1628 <fputc>
    1162:	2a 89       	ldd	r18, Y+18	; 0x12
    1164:	22 ff       	sbrs	r18, 2
    1166:	16 c0       	rjmp	.+44     	; 0x1194 <vfprintf+0x642>
    1168:	21 ff       	sbrs	r18, 1
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <vfprintf+0x620>
    116c:	88 e5       	ldi	r24, 0x58	; 88
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0x624>
    1172:	88 e7       	ldi	r24, 0x78	; 120
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	b7 01       	movw	r22, r14
    1178:	0c c0       	rjmp	.+24     	; 0x1192 <vfprintf+0x640>
    117a:	82 2f       	mov	r24, r18
    117c:	86 78       	andi	r24, 0x86	; 134
    117e:	51 f0       	breq	.+20     	; 0x1194 <vfprintf+0x642>
    1180:	21 fd       	sbrc	r18, 1
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x636>
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vfprintf+0x638>
    1188:	8b e2       	ldi	r24, 0x2B	; 43
    118a:	27 fd       	sbrc	r18, 7
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	b7 01       	movw	r22, r14
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	4a d2       	rcall	.+1172   	; 0x1628 <fputc>
    1194:	c1 16       	cp	r12, r17
    1196:	30 f4       	brcc	.+12     	; 0x11a4 <vfprintf+0x652>
    1198:	b7 01       	movw	r22, r14
    119a:	80 e3       	ldi	r24, 0x30	; 48
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	44 d2       	rcall	.+1160   	; 0x1628 <fputc>
    11a0:	11 50       	subi	r17, 0x01	; 1
    11a2:	f8 cf       	rjmp	.-16     	; 0x1194 <vfprintf+0x642>
    11a4:	ca 94       	dec	r12
    11a6:	f4 01       	movw	r30, r8
    11a8:	ec 0d       	add	r30, r12
    11aa:	f1 1d       	adc	r31, r1
    11ac:	80 81       	ld	r24, Z
    11ae:	b7 01       	movw	r22, r14
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	3a d2       	rcall	.+1140   	; 0x1628 <fputc>
    11b4:	c1 10       	cpse	r12, r1
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <vfprintf+0x652>
    11b8:	55 20       	and	r5, r5
    11ba:	09 f4       	brne	.+2      	; 0x11be <vfprintf+0x66c>
    11bc:	f4 cc       	rjmp	.-1560   	; 0xba6 <vfprintf+0x54>
    11be:	b7 01       	movw	r22, r14
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	31 d2       	rcall	.+1122   	; 0x1628 <fputc>
    11c6:	5a 94       	dec	r5
    11c8:	f7 cf       	rjmp	.-18     	; 0x11b8 <vfprintf+0x666>
    11ca:	f7 01       	movw	r30, r14
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	97 81       	ldd	r25, Z+7	; 0x07
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x684>
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	62 96       	adiw	r28, 0x12	; 18
    11d8:	e2 e1       	ldi	r30, 0x12	; 18
    11da:	1d c1       	rjmp	.+570    	; 0x1416 <__epilogue_restores__>

000011dc <main>:
  }
}

void WDT_off(void)
{
   wdt_reset();
    11dc:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
    11de:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
    11e0:	81 b5       	in	r24, 0x21	; 33
    11e2:	88 61       	ori	r24, 0x18	; 24
    11e4:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
    11e6:	11 bc       	out	0x21, r1	; 33
{

  //wdt_disable();
  WDT_off();
  //wdt_enable(WDTO_4S);
  init_sw();
    11e8:	b9 d7       	rcall	.+3954   	; 0x215c <__data_load_end+0xa02>
  init_hw();
    11ea:	26 d8       	rcall	.-4020   	; 0x238 <init_hw>
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
    11ec:	e0 91 9f 00 	lds	r30, 0x009F
    11f0:	f0 91 a0 00 	lds	r31, 0x00A0
    11f4:	80 91 96 00 	lds	r24, 0x0096
    11f8:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
    11fa:	e0 91 b5 00 	lds	r30, 0x00B5
    11fe:	f0 91 b6 00 	lds	r31, 0x00B6
    1202:	80 91 ac 00 	lds	r24, 0x00AC
    1206:	80 83       	st	Z, r24
    1208:	2f ef       	ldi	r18, 0xFF	; 255
    120a:	80 e7       	ldi	r24, 0x70	; 112
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	80 40       	sbci	r24, 0x00	; 0
    1212:	90 40       	sbci	r25, 0x00	; 0
    1214:	e1 f7       	brne	.-8      	; 0x120e <main+0x32>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <main+0x3c>
    1218:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
    121a:	e0 91 9f 00 	lds	r30, 0x009F
    121e:	f0 91 a0 00 	lds	r31, 0x00A0
    1222:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
    1224:	e0 91 b5 00 	lds	r30, 0x00B5
    1228:	f0 91 b6 00 	lds	r31, 0x00B6
    122c:	10 82       	st	Z, r1
    122e:	ef ef       	ldi	r30, 0xFF	; 255
    1230:	f0 e7       	ldi	r31, 0x70	; 112
    1232:	22 e0       	ldi	r18, 0x02	; 2
    1234:	e1 50       	subi	r30, 0x01	; 1
    1236:	f0 40       	sbci	r31, 0x00	; 0
    1238:	20 40       	sbci	r18, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <main+0x58>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <main+0x62>
    123e:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
    1240:	e0 91 9f 00 	lds	r30, 0x009F
    1244:	f0 91 a0 00 	lds	r31, 0x00A0
    1248:	80 91 96 00 	lds	r24, 0x0096
    124c:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
    124e:	e0 91 b5 00 	lds	r30, 0x00B5
    1252:	f0 91 b6 00 	lds	r31, 0x00B6
    1256:	80 91 ac 00 	lds	r24, 0x00AC
    125a:	80 83       	st	Z, r24
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	90 e7       	ldi	r25, 0x70	; 112
    1260:	e2 e0       	ldi	r30, 0x02	; 2
    1262:	81 50       	subi	r24, 0x01	; 1
    1264:	90 40       	sbci	r25, 0x00	; 0
    1266:	e0 40       	sbci	r30, 0x00	; 0
    1268:	e1 f7       	brne	.-8      	; 0x1262 <main+0x86>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <main+0x90>
    126c:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
    126e:	e0 91 9f 00 	lds	r30, 0x009F
    1272:	f0 91 a0 00 	lds	r31, 0x00A0
    1276:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
    1278:	e0 91 b5 00 	lds	r30, 0x00B5
    127c:	f0 91 b6 00 	lds	r31, 0x00B6
    1280:	10 82       	st	Z, r1
    1282:	ff ef       	ldi	r31, 0xFF	; 255
    1284:	20 e7       	ldi	r18, 0x70	; 112
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	f1 50       	subi	r31, 0x01	; 1
    128a:	20 40       	sbci	r18, 0x00	; 0
    128c:	80 40       	sbci	r24, 0x00	; 0
    128e:	e1 f7       	brne	.-8      	; 0x1288 <main+0xac>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <main+0xb6>
    1292:	00 00       	nop
  _delay_ms(100);

  charge_from_boot = 0;
    1294:	10 92 71 00 	sts	0x0071, r1

    if (!C_CHECKBIT(CHARGE))
    1298:	b1 99       	sbic	0x16, 1	; 22
    129a:	53 c0       	rjmp	.+166    	; 0x1342 <main+0x166>
    {
      charging = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 72 00 	sts	0x0072, r24
      (*(LEDS[LED_R].PWM_out)) = 0;
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    {
      charging = 1;
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <main+0xd2>
    12a6:	90 93 72 00 	sts	0x0072, r25
    } else {
      charging = 0;
    }
    
    if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed kill the charge flash loop
    12aa:	b0 9b       	sbis	0x16, 0	; 22
    12ac:	1e c0       	rjmp	.+60     	; 0x12ea <main+0x10e>
      charging = 1;
    } else {
      charging = 0;
    }
      
  while (charging == 1)  
    12ae:	80 91 72 00 	lds	r24, 0x0072
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	11 f5       	brne	.+68     	; 0x12fa <main+0x11e>
    12b6:	ef e1       	ldi	r30, 0x1F	; 31
    12b8:	fe e4       	ldi	r31, 0x4E	; 78
    12ba:	31 97       	sbiw	r30, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <main+0xde>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <main+0xe4>
    12c0:	00 00       	nop
    


    if (charge_flash < 20)
    {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[2];  //medium brightness on the wide angle LED
    12c2:	e0 91 9f 00 	lds	r30, 0x009F
    12c6:	f0 91 a0 00 	lds	r31, 0x00A0
    12ca:	80 91 95 00 	lds	r24, 0x0095
    12ce:	80 83       	st	Z, r24
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[2];
    12d0:	e0 91 b5 00 	lds	r30, 0x00B5
    12d4:	f0 91 b6 00 	lds	r31, 0x00B6
    12d8:	80 91 ab 00 	lds	r24, 0x00AB
    12dc:	80 83       	st	Z, r24
    } else {
      (*(LEDS[LED_L].PWM_out)) = 0;
      (*(LEDS[LED_R].PWM_out)) = 0;
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    12de:	b1 9b       	sbis	0x16, 1	; 22
    12e0:	e2 cf       	rjmp	.-60     	; 0x12a6 <main+0xca>
    {
      charging = 1;
    } else {
      charging = 0;
    12e2:	10 92 72 00 	sts	0x0072, r1
    }
    
    if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed kill the charge flash loop
    12e6:	b0 99       	sbic	0x16, 0	; 22
    12e8:	e2 cf       	rjmp	.-60     	; 0x12ae <main+0xd2>
    {
      charge_from_boot = 1;
    12ea:	90 93 71 00 	sts	0x0071, r25
      charging = 0;
    12ee:	10 92 72 00 	sts	0x0072, r1
      charging = 1;
    } else {
      charging = 0;
    }
      
  while (charging == 1)  
    12f2:	80 91 72 00 	lds	r24, 0x0072
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	f1 f2       	breq	.-68     	; 0x12b6 <main+0xda>
    }
          
    
  } 

    if (!C_CHECKBIT(CHARGE))  // set the flag again if we got here by the button being pressed.
    12fa:	b1 99       	sbic	0x16, 1	; 22
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <main+0x128>
    {
      charging = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 72 00 	sts	0x0072, r24
    }   
        
//SETPOINT = 130;
sei();
    1304:	78 94       	sei
  if (C_CHECKBIT(BUTTON1)) //button not pressed
    1306:	b0 9b       	sbis	0x16, 0	; 22
    1308:	15 c0       	rjmp	.+42     	; 0x1334 <main+0x158>
  {
    killit = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 6b 00 	sts	0x006B, r24
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <main+0x148>

}    

void idle()
{
 cli();
    1312:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE); 
    1314:	85 b7       	in	r24, 0x35	; 53
    1316:	87 7e       	andi	r24, 0xE7	; 231
    1318:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
    131a:	85 b7       	in	r24, 0x35	; 53
    131c:	80 62       	ori	r24, 0x20	; 32
    131e:	85 bf       	out	0x35, r24	; 53
  sei();
    1320:	78 94       	sei
  sleep_cpu();
    1322:	88 95       	sleep
  }
  
 while (1 == 1)
 { 
   //this will execute after every timer interrupt, and idle the chip when it hits the end of the loop.
   if (killit == 1)
    1324:	80 91 6b 00 	lds	r24, 0x006B
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	99 f7       	brne	.-26     	; 0x1312 <main+0x136>
   {
     shutdown();
    132c:	f8 d7       	rcall	.+4080   	; 0x231e <__data_load_end+0xbc4>
     killit = 0;
    132e:	10 92 6b 00 	sts	0x006B, r1
    1332:	f8 cf       	rjmp	.-16     	; 0x1324 <main+0x148>
  if (C_CHECKBIT(BUTTON1)) //button not pressed
  {
    killit = 1;
  } else {
    button_down();
    button_state = DOWN;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	90 93 e4 00 	sts	0x00E4, r25
    133c:	80 93 e3 00 	sts	0x00E3, r24
    1340:	f1 cf       	rjmp	.-30     	; 0x1324 <main+0x148>

    if (!C_CHECKBIT(CHARGE))
    {
      charging = 1;
    } else {
      charging = 0;
    1342:	10 92 72 00 	sts	0x0072, r1
    1346:	ad cf       	rjmp	.-166    	; 0x12a2 <main+0xc6>

00001348 <__mulqi3>:
    1348:	00 24       	eor	r0, r0

0000134a <__mulqi3_loop>:
    134a:	80 fd       	sbrc	r24, 0
    134c:	06 0e       	add	r0, r22
    134e:	66 0f       	add	r22, r22
    1350:	11 f0       	breq	.+4      	; 0x1356 <__mulqi3_exit>
    1352:	86 95       	lsr	r24
    1354:	d1 f7       	brne	.-12     	; 0x134a <__mulqi3_loop>

00001356 <__mulqi3_exit>:
    1356:	80 2d       	mov	r24, r0
    1358:	08 95       	ret

0000135a <__udivmodqi4>:
    135a:	99 1b       	sub	r25, r25
    135c:	79 e0       	ldi	r23, 0x09	; 9
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__udivmodqi4_ep>

00001360 <__udivmodqi4_loop>:
    1360:	99 1f       	adc	r25, r25
    1362:	96 17       	cp	r25, r22
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__udivmodqi4_ep>
    1366:	96 1b       	sub	r25, r22

00001368 <__udivmodqi4_ep>:
    1368:	88 1f       	adc	r24, r24
    136a:	7a 95       	dec	r23
    136c:	c9 f7       	brne	.-14     	; 0x1360 <__udivmodqi4_loop>
    136e:	80 95       	com	r24
    1370:	08 95       	ret

00001372 <__udivmodhi4>:
    1372:	aa 1b       	sub	r26, r26
    1374:	bb 1b       	sub	r27, r27
    1376:	51 e1       	ldi	r21, 0x11	; 17
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <__udivmodhi4_ep>

0000137a <__udivmodhi4_loop>:
    137a:	aa 1f       	adc	r26, r26
    137c:	bb 1f       	adc	r27, r27
    137e:	a6 17       	cp	r26, r22
    1380:	b7 07       	cpc	r27, r23
    1382:	10 f0       	brcs	.+4      	; 0x1388 <__udivmodhi4_ep>
    1384:	a6 1b       	sub	r26, r22
    1386:	b7 0b       	sbc	r27, r23

00001388 <__udivmodhi4_ep>:
    1388:	88 1f       	adc	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	5a 95       	dec	r21
    138e:	a9 f7       	brne	.-22     	; 0x137a <__udivmodhi4_loop>
    1390:	80 95       	com	r24
    1392:	90 95       	com	r25
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	08 95       	ret

0000139a <__udivmodsi4>:
    139a:	a1 e2       	ldi	r26, 0x21	; 33
    139c:	1a 2e       	mov	r1, r26
    139e:	aa 1b       	sub	r26, r26
    13a0:	bb 1b       	sub	r27, r27
    13a2:	fd 01       	movw	r30, r26
    13a4:	0d c0       	rjmp	.+26     	; 0x13c0 <__udivmodsi4_ep>

000013a6 <__udivmodsi4_loop>:
    13a6:	aa 1f       	adc	r26, r26
    13a8:	bb 1f       	adc	r27, r27
    13aa:	ee 1f       	adc	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	a2 17       	cp	r26, r18
    13b0:	b3 07       	cpc	r27, r19
    13b2:	e4 07       	cpc	r30, r20
    13b4:	f5 07       	cpc	r31, r21
    13b6:	20 f0       	brcs	.+8      	; 0x13c0 <__udivmodsi4_ep>
    13b8:	a2 1b       	sub	r26, r18
    13ba:	b3 0b       	sbc	r27, r19
    13bc:	e4 0b       	sbc	r30, r20
    13be:	f5 0b       	sbc	r31, r21

000013c0 <__udivmodsi4_ep>:
    13c0:	66 1f       	adc	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	1a 94       	dec	r1
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <__udivmodsi4_loop>
    13cc:	60 95       	com	r22
    13ce:	70 95       	com	r23
    13d0:	80 95       	com	r24
    13d2:	90 95       	com	r25
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	bd 01       	movw	r22, r26
    13da:	cf 01       	movw	r24, r30
    13dc:	08 95       	ret

000013de <__prologue_saves__>:
    13de:	2f 92       	push	r2
    13e0:	3f 92       	push	r3
    13e2:	4f 92       	push	r4
    13e4:	5f 92       	push	r5
    13e6:	6f 92       	push	r6
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	ca 1b       	sub	r28, r26
    1408:	db 0b       	sbc	r29, r27
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	09 94       	ijmp

00001416 <__epilogue_restores__>:
    1416:	2a 88       	ldd	r2, Y+18	; 0x12
    1418:	39 88       	ldd	r3, Y+17	; 0x11
    141a:	48 88       	ldd	r4, Y+16	; 0x10
    141c:	5f 84       	ldd	r5, Y+15	; 0x0f
    141e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1420:	7d 84       	ldd	r7, Y+13	; 0x0d
    1422:	8c 84       	ldd	r8, Y+12	; 0x0c
    1424:	9b 84       	ldd	r9, Y+11	; 0x0b
    1426:	aa 84       	ldd	r10, Y+10	; 0x0a
    1428:	b9 84       	ldd	r11, Y+9	; 0x09
    142a:	c8 84       	ldd	r12, Y+8	; 0x08
    142c:	df 80       	ldd	r13, Y+7	; 0x07
    142e:	ee 80       	ldd	r14, Y+6	; 0x06
    1430:	fd 80       	ldd	r15, Y+5	; 0x05
    1432:	0c 81       	ldd	r16, Y+4	; 0x04
    1434:	1b 81       	ldd	r17, Y+3	; 0x03
    1436:	aa 81       	ldd	r26, Y+2	; 0x02
    1438:	b9 81       	ldd	r27, Y+1	; 0x01
    143a:	ce 0f       	add	r28, r30
    143c:	d1 1d       	adc	r29, r1
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	ed 01       	movw	r28, r26
    144a:	08 95       	ret

0000144c <__ftoa_engine>:
    144c:	28 30       	cpi	r18, 0x08	; 8
    144e:	08 f0       	brcs	.+2      	; 0x1452 <__ftoa_engine+0x6>
    1450:	27 e0       	ldi	r18, 0x07	; 7
    1452:	33 27       	eor	r19, r19
    1454:	da 01       	movw	r26, r20
    1456:	99 0f       	add	r25, r25
    1458:	31 1d       	adc	r19, r1
    145a:	87 fd       	sbrc	r24, 7
    145c:	91 60       	ori	r25, 0x01	; 1
    145e:	00 96       	adiw	r24, 0x00	; 0
    1460:	61 05       	cpc	r22, r1
    1462:	71 05       	cpc	r23, r1
    1464:	39 f4       	brne	.+14     	; 0x1474 <__ftoa_engine+0x28>
    1466:	32 60       	ori	r19, 0x02	; 2
    1468:	2e 5f       	subi	r18, 0xFE	; 254
    146a:	3d 93       	st	X+, r19
    146c:	30 e3       	ldi	r19, 0x30	; 48
    146e:	2a 95       	dec	r18
    1470:	e1 f7       	brne	.-8      	; 0x146a <__ftoa_engine+0x1e>
    1472:	08 95       	ret
    1474:	9f 3f       	cpi	r25, 0xFF	; 255
    1476:	30 f0       	brcs	.+12     	; 0x1484 <__ftoa_engine+0x38>
    1478:	80 38       	cpi	r24, 0x80	; 128
    147a:	71 05       	cpc	r23, r1
    147c:	61 05       	cpc	r22, r1
    147e:	09 f0       	breq	.+2      	; 0x1482 <__ftoa_engine+0x36>
    1480:	3c 5f       	subi	r19, 0xFC	; 252
    1482:	3c 5f       	subi	r19, 0xFC	; 252
    1484:	3d 93       	st	X+, r19
    1486:	91 30       	cpi	r25, 0x01	; 1
    1488:	08 f0       	brcs	.+2      	; 0x148c <__ftoa_engine+0x40>
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	91 1d       	adc	r25, r1
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	1f 93       	push	r17
    1494:	0f 93       	push	r16
    1496:	ff 92       	push	r15
    1498:	ef 92       	push	r14
    149a:	19 2f       	mov	r17, r25
    149c:	98 7f       	andi	r25, 0xF8	; 248
    149e:	96 95       	lsr	r25
    14a0:	e9 2f       	mov	r30, r25
    14a2:	96 95       	lsr	r25
    14a4:	96 95       	lsr	r25
    14a6:	e9 0f       	add	r30, r25
    14a8:	ff 27       	eor	r31, r31
    14aa:	ec 57       	subi	r30, 0x7C	; 124
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	99 27       	eor	r25, r25
    14b0:	33 27       	eor	r19, r19
    14b2:	ee 24       	eor	r14, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	a7 01       	movw	r20, r14
    14b8:	e7 01       	movw	r28, r14
    14ba:	05 90       	lpm	r0, Z+
    14bc:	08 94       	sec
    14be:	07 94       	ror	r0
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <__ftoa_engine+0x80>
    14c2:	36 0f       	add	r19, r22
    14c4:	e7 1e       	adc	r14, r23
    14c6:	f8 1e       	adc	r15, r24
    14c8:	49 1f       	adc	r20, r25
    14ca:	51 1d       	adc	r21, r1
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	06 94       	lsr	r0
    14d6:	a1 f7       	brne	.-24     	; 0x14c0 <__ftoa_engine+0x74>
    14d8:	05 90       	lpm	r0, Z+
    14da:	07 94       	ror	r0
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <__ftoa_engine+0x9c>
    14de:	e7 0e       	add	r14, r23
    14e0:	f8 1e       	adc	r15, r24
    14e2:	49 1f       	adc	r20, r25
    14e4:	56 1f       	adc	r21, r22
    14e6:	c1 1d       	adc	r28, r1
    14e8:	77 0f       	add	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	66 1f       	adc	r22, r22
    14f0:	06 94       	lsr	r0
    14f2:	a1 f7       	brne	.-24     	; 0x14dc <__ftoa_engine+0x90>
    14f4:	05 90       	lpm	r0, Z+
    14f6:	07 94       	ror	r0
    14f8:	28 f4       	brcc	.+10     	; 0x1504 <__ftoa_engine+0xb8>
    14fa:	f8 0e       	add	r15, r24
    14fc:	49 1f       	adc	r20, r25
    14fe:	56 1f       	adc	r21, r22
    1500:	c7 1f       	adc	r28, r23
    1502:	d1 1d       	adc	r29, r1
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	06 94       	lsr	r0
    150e:	a1 f7       	brne	.-24     	; 0x14f8 <__ftoa_engine+0xac>
    1510:	05 90       	lpm	r0, Z+
    1512:	07 94       	ror	r0
    1514:	20 f4       	brcc	.+8      	; 0x151e <__ftoa_engine+0xd2>
    1516:	49 0f       	add	r20, r25
    1518:	56 1f       	adc	r21, r22
    151a:	c7 1f       	adc	r28, r23
    151c:	d8 1f       	adc	r29, r24
    151e:	99 0f       	add	r25, r25
    1520:	66 1f       	adc	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	88 1f       	adc	r24, r24
    1526:	06 94       	lsr	r0
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__ftoa_engine+0xc8>
    152a:	84 91       	lpm	r24, Z
    152c:	10 95       	com	r17
    152e:	17 70       	andi	r17, 0x07	; 7
    1530:	41 f0       	breq	.+16     	; 0x1542 <__ftoa_engine+0xf6>
    1532:	d6 95       	lsr	r29
    1534:	c7 95       	ror	r28
    1536:	57 95       	ror	r21
    1538:	47 95       	ror	r20
    153a:	f7 94       	ror	r15
    153c:	e7 94       	ror	r14
    153e:	1a 95       	dec	r17
    1540:	c1 f7       	brne	.-16     	; 0x1532 <__ftoa_engine+0xe6>
    1542:	ea e2       	ldi	r30, 0x2A	; 42
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	68 94       	set
    1548:	15 90       	lpm	r1, Z+
    154a:	15 91       	lpm	r17, Z+
    154c:	35 91       	lpm	r19, Z+
    154e:	65 91       	lpm	r22, Z+
    1550:	95 91       	lpm	r25, Z+
    1552:	05 90       	lpm	r0, Z+
    1554:	7f e2       	ldi	r23, 0x2F	; 47
    1556:	73 95       	inc	r23
    1558:	e1 18       	sub	r14, r1
    155a:	f1 0a       	sbc	r15, r17
    155c:	43 0b       	sbc	r20, r19
    155e:	56 0b       	sbc	r21, r22
    1560:	c9 0b       	sbc	r28, r25
    1562:	d0 09       	sbc	r29, r0
    1564:	c0 f7       	brcc	.-16     	; 0x1556 <__ftoa_engine+0x10a>
    1566:	e1 0c       	add	r14, r1
    1568:	f1 1e       	adc	r15, r17
    156a:	43 1f       	adc	r20, r19
    156c:	56 1f       	adc	r21, r22
    156e:	c9 1f       	adc	r28, r25
    1570:	d0 1d       	adc	r29, r0
    1572:	7e f4       	brtc	.+30     	; 0x1592 <__ftoa_engine+0x146>
    1574:	70 33       	cpi	r23, 0x30	; 48
    1576:	11 f4       	brne	.+4      	; 0x157c <__ftoa_engine+0x130>
    1578:	8a 95       	dec	r24
    157a:	e6 cf       	rjmp	.-52     	; 0x1548 <__ftoa_engine+0xfc>
    157c:	e8 94       	clt
    157e:	01 50       	subi	r16, 0x01	; 1
    1580:	30 f0       	brcs	.+12     	; 0x158e <__ftoa_engine+0x142>
    1582:	08 0f       	add	r16, r24
    1584:	0a f4       	brpl	.+2      	; 0x1588 <__ftoa_engine+0x13c>
    1586:	00 27       	eor	r16, r16
    1588:	02 17       	cp	r16, r18
    158a:	08 f4       	brcc	.+2      	; 0x158e <__ftoa_engine+0x142>
    158c:	20 2f       	mov	r18, r16
    158e:	23 95       	inc	r18
    1590:	02 2f       	mov	r16, r18
    1592:	7a 33       	cpi	r23, 0x3A	; 58
    1594:	28 f0       	brcs	.+10     	; 0x15a0 <__ftoa_engine+0x154>
    1596:	79 e3       	ldi	r23, 0x39	; 57
    1598:	7d 93       	st	X+, r23
    159a:	2a 95       	dec	r18
    159c:	e9 f7       	brne	.-6      	; 0x1598 <__ftoa_engine+0x14c>
    159e:	10 c0       	rjmp	.+32     	; 0x15c0 <__ftoa_engine+0x174>
    15a0:	7d 93       	st	X+, r23
    15a2:	2a 95       	dec	r18
    15a4:	89 f6       	brne	.-94     	; 0x1548 <__ftoa_engine+0xfc>
    15a6:	06 94       	lsr	r0
    15a8:	97 95       	ror	r25
    15aa:	67 95       	ror	r22
    15ac:	37 95       	ror	r19
    15ae:	17 95       	ror	r17
    15b0:	17 94       	ror	r1
    15b2:	e1 18       	sub	r14, r1
    15b4:	f1 0a       	sbc	r15, r17
    15b6:	43 0b       	sbc	r20, r19
    15b8:	56 0b       	sbc	r21, r22
    15ba:	c9 0b       	sbc	r28, r25
    15bc:	d0 09       	sbc	r29, r0
    15be:	98 f0       	brcs	.+38     	; 0x15e6 <__ftoa_engine+0x19a>
    15c0:	23 95       	inc	r18
    15c2:	7e 91       	ld	r23, -X
    15c4:	73 95       	inc	r23
    15c6:	7a 33       	cpi	r23, 0x3A	; 58
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__ftoa_engine+0x180>
    15ca:	70 e3       	ldi	r23, 0x30	; 48
    15cc:	7c 93       	st	X, r23
    15ce:	20 13       	cpse	r18, r16
    15d0:	b8 f7       	brcc	.-18     	; 0x15c0 <__ftoa_engine+0x174>
    15d2:	7e 91       	ld	r23, -X
    15d4:	70 61       	ori	r23, 0x10	; 16
    15d6:	7d 93       	st	X+, r23
    15d8:	30 f0       	brcs	.+12     	; 0x15e6 <__ftoa_engine+0x19a>
    15da:	83 95       	inc	r24
    15dc:	71 e3       	ldi	r23, 0x31	; 49
    15de:	7d 93       	st	X+, r23
    15e0:	70 e3       	ldi	r23, 0x30	; 48
    15e2:	2a 95       	dec	r18
    15e4:	e1 f7       	brne	.-8      	; 0x15de <__ftoa_engine+0x192>
    15e6:	11 24       	eor	r1, r1
    15e8:	ef 90       	pop	r14
    15ea:	ff 90       	pop	r15
    15ec:	0f 91       	pop	r16
    15ee:	1f 91       	pop	r17
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	99 27       	eor	r25, r25
    15f6:	87 fd       	sbrc	r24, 7
    15f8:	90 95       	com	r25
    15fa:	08 95       	ret

000015fc <strnlen_P>:
    15fc:	fc 01       	movw	r30, r24
    15fe:	05 90       	lpm	r0, Z+
    1600:	61 50       	subi	r22, 0x01	; 1
    1602:	70 40       	sbci	r23, 0x00	; 0
    1604:	01 10       	cpse	r0, r1
    1606:	d8 f7       	brcc	.-10     	; 0x15fe <strnlen_P+0x2>
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	8e 0f       	add	r24, r30
    160e:	9f 1f       	adc	r25, r31
    1610:	08 95       	ret

00001612 <strnlen>:
    1612:	fc 01       	movw	r30, r24
    1614:	61 50       	subi	r22, 0x01	; 1
    1616:	70 40       	sbci	r23, 0x00	; 0
    1618:	01 90       	ld	r0, Z+
    161a:	01 10       	cpse	r0, r1
    161c:	d8 f7       	brcc	.-10     	; 0x1614 <strnlen+0x2>
    161e:	80 95       	com	r24
    1620:	90 95       	com	r25
    1622:	8e 0f       	add	r24, r30
    1624:	9f 1f       	adc	r25, r31
    1626:	08 95       	ret

00001628 <fputc>:
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	18 2f       	mov	r17, r24
    1632:	09 2f       	mov	r16, r25
    1634:	eb 01       	movw	r28, r22
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 fd       	sbrc	r24, 1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <fputc+0x1a>
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <fputc+0x5a>
    1642:	82 ff       	sbrs	r24, 2
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <fputc+0x3e>
    1646:	4e 81       	ldd	r20, Y+6	; 0x06
    1648:	5f 81       	ldd	r21, Y+7	; 0x07
    164a:	2c 81       	ldd	r18, Y+4	; 0x04
    164c:	3d 81       	ldd	r19, Y+5	; 0x05
    164e:	42 17       	cp	r20, r18
    1650:	53 07       	cpc	r21, r19
    1652:	7c f4       	brge	.+30     	; 0x1672 <fputc+0x4a>
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	9f 01       	movw	r18, r30
    165a:	2f 5f       	subi	r18, 0xFF	; 255
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	39 83       	std	Y+1, r19	; 0x01
    1660:	28 83       	st	Y, r18
    1662:	10 83       	st	Z, r17
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <fputc+0x4a>
    1666:	e8 85       	ldd	r30, Y+8	; 0x08
    1668:	f9 85       	ldd	r31, Y+9	; 0x09
    166a:	81 2f       	mov	r24, r17
    166c:	09 95       	icall
    166e:	89 2b       	or	r24, r25
    1670:	29 f7       	brne	.-54     	; 0x163c <fputc+0x14>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	3f 83       	std	Y+7, r19	; 0x07
    167c:	2e 83       	std	Y+6, r18	; 0x06
    167e:	81 2f       	mov	r24, r17
    1680:	90 2f       	mov	r25, r16
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <__ultoa_invert>:
    168c:	fa 01       	movw	r30, r20
    168e:	aa 27       	eor	r26, r26
    1690:	28 30       	cpi	r18, 0x08	; 8
    1692:	61 f1       	breq	.+88     	; 0x16ec <__ultoa_invert+0x60>
    1694:	20 31       	cpi	r18, 0x10	; 16
    1696:	91 f1       	breq	.+100    	; 0x16fc <__ultoa_invert+0x70>
    1698:	e8 94       	clt
    169a:	6f 93       	push	r22
    169c:	6e 7f       	andi	r22, 0xFE	; 254
    169e:	6e 5f       	subi	r22, 0xFE	; 254
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	af 4f       	sbci	r26, 0xFF	; 255
    16a8:	b1 e0       	ldi	r27, 0x01	; 1
    16aa:	40 d0       	rcall	.+128    	; 0x172c <__ultoa_invert+0xa0>
    16ac:	b4 e0       	ldi	r27, 0x04	; 4
    16ae:	3e d0       	rcall	.+124    	; 0x172c <__ultoa_invert+0xa0>
    16b0:	67 0f       	add	r22, r23
    16b2:	78 1f       	adc	r23, r24
    16b4:	89 1f       	adc	r24, r25
    16b6:	9a 1f       	adc	r25, r26
    16b8:	a1 1d       	adc	r26, r1
    16ba:	68 0f       	add	r22, r24
    16bc:	79 1f       	adc	r23, r25
    16be:	8a 1f       	adc	r24, r26
    16c0:	91 1d       	adc	r25, r1
    16c2:	a1 1d       	adc	r26, r1
    16c4:	6a 0f       	add	r22, r26
    16c6:	71 1d       	adc	r23, r1
    16c8:	81 1d       	adc	r24, r1
    16ca:	91 1d       	adc	r25, r1
    16cc:	a1 1d       	adc	r26, r1
    16ce:	22 d0       	rcall	.+68     	; 0x1714 <__ultoa_invert+0x88>
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__ultoa_invert+0x48>
    16d2:	68 94       	set
    16d4:	3f 91       	pop	r19
    16d6:	06 2e       	mov	r0, r22
    16d8:	00 0c       	add	r0, r0
    16da:	30 19       	sub	r19, r0
    16dc:	00 0c       	add	r0, r0
    16de:	00 0c       	add	r0, r0
    16e0:	30 19       	sub	r19, r0
    16e2:	30 5d       	subi	r19, 0xD0	; 208
    16e4:	31 93       	st	Z+, r19
    16e6:	ce f6       	brtc	.-78     	; 0x169a <__ultoa_invert+0xe>
    16e8:	cf 01       	movw	r24, r30
    16ea:	08 95       	ret
    16ec:	46 2f       	mov	r20, r22
    16ee:	47 70       	andi	r20, 0x07	; 7
    16f0:	40 5d       	subi	r20, 0xD0	; 208
    16f2:	41 93       	st	Z+, r20
    16f4:	b3 e0       	ldi	r27, 0x03	; 3
    16f6:	0f d0       	rcall	.+30     	; 0x1716 <__ultoa_invert+0x8a>
    16f8:	c9 f7       	brne	.-14     	; 0x16ec <__ultoa_invert+0x60>
    16fa:	f6 cf       	rjmp	.-20     	; 0x16e8 <__ultoa_invert+0x5c>
    16fc:	46 2f       	mov	r20, r22
    16fe:	4f 70       	andi	r20, 0x0F	; 15
    1700:	40 5d       	subi	r20, 0xD0	; 208
    1702:	4a 33       	cpi	r20, 0x3A	; 58
    1704:	18 f0       	brcs	.+6      	; 0x170c <__ultoa_invert+0x80>
    1706:	49 5d       	subi	r20, 0xD9	; 217
    1708:	31 fd       	sbrc	r19, 1
    170a:	40 52       	subi	r20, 0x20	; 32
    170c:	41 93       	st	Z+, r20
    170e:	02 d0       	rcall	.+4      	; 0x1714 <__ultoa_invert+0x88>
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__ultoa_invert+0x70>
    1712:	ea cf       	rjmp	.-44     	; 0x16e8 <__ultoa_invert+0x5c>
    1714:	b4 e0       	ldi	r27, 0x04	; 4
    1716:	a6 95       	lsr	r26
    1718:	97 95       	ror	r25
    171a:	87 95       	ror	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	ba 95       	dec	r27
    1722:	c9 f7       	brne	.-14     	; 0x1716 <__ultoa_invert+0x8a>
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	61 05       	cpc	r22, r1
    1728:	71 05       	cpc	r23, r1
    172a:	08 95       	ret
    172c:	9b 01       	movw	r18, r22
    172e:	ac 01       	movw	r20, r24
    1730:	0a 2e       	mov	r0, r26
    1732:	06 94       	lsr	r0
    1734:	57 95       	ror	r21
    1736:	47 95       	ror	r20
    1738:	37 95       	ror	r19
    173a:	27 95       	ror	r18
    173c:	ba 95       	dec	r27
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__ultoa_invert+0xa6>
    1740:	62 0f       	add	r22, r18
    1742:	73 1f       	adc	r23, r19
    1744:	84 1f       	adc	r24, r20
    1746:	95 1f       	adc	r25, r21
    1748:	a0 1d       	adc	r26, r0
    174a:	08 95       	ret

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
