
1cell_2LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000018c6  0000195a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  0080006a  0080006a  00001964  2**0
                  ALLOC
  3 .stab         00004638  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ff  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
       2:	ab c0       	rjmp	.+342    	; 0x15a <__bad_interrupt>
       4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
       6:	dc c6       	rjmp	.+3512   	; 0xdc0 <__vector_3>
       8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
       a:	a7 c0       	rjmp	.+334    	; 0x15a <__bad_interrupt>
       c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
       e:	a5 c0       	rjmp	.+330    	; 0x15a <__bad_interrupt>
      10:	18 c5       	rjmp	.+2608   	; 0xa42 <__vector_8>
      12:	a3 c0       	rjmp	.+326    	; 0x15a <__bad_interrupt>
      14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
      16:	ce c4       	rjmp	.+2460   	; 0x9b4 <__vector_11>
      18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
      1a:	e2 c2       	rjmp	.+1476   	; 0x5e0 <__vector_13>
      1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
      1e:	9d c0       	rjmp	.+314    	; 0x15a <__bad_interrupt>
      20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>

00000022 <__c.1862>:
      22:	6e 61 6e 00                                         nan.

00000026 <__c.1860>:
      26:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      36:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      46:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      56:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      66:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      76:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      86:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      96:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      a6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      b6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      c6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
      d6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
      e6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
      f6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     106:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     116:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf e5       	ldi	r28, 0x5F	; 95
     12a:	d2 e0       	ldi	r29, 0x02	; 2
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	10 e0       	ldi	r17, 0x00	; 0
     132:	a0 e6       	ldi	r26, 0x60	; 96
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e6 ec       	ldi	r30, 0xC6	; 198
     138:	f8 e1       	ldi	r31, 0x18	; 24
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	aa 36       	cpi	r26, 0x6A	; 106
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	aa e6       	ldi	r26, 0x6A	; 106
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a6 3e       	cpi	r26, 0xE6	; 230
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	87 d1       	rcall	.+782    	; 0x466 <main>
     158:	b4 cb       	rjmp	.-2200   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>

0000015a <__bad_interrupt>:
     15a:	52 cf       	rjmp	.-348    	; 0x0 <__vectors>

0000015c <init_sw>:
#define BUTTON_DEBOUNCE_TIME 25 // in timer1 cycles
#define BUTTON_REPEAT_TIME 50  // how long to hold it before repeating #FIX

void init_sw()
{
  LEDS[LED_L].PWM_out = &OCR0B;
     15c:	8c e5       	ldi	r24, 0x5C	; 92
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 a0 00 	sts	0x00A0, r25
     164:	80 93 9f 00 	sts	0x009F, r24
  *(LEDS[LED_L].PWM_out) = 0;
     168:	1c be       	out	0x3c, r1	; 60
  LEDS[LED_L].ADC_value = 0;
     16a:	10 92 99 00 	sts	0x0099, r1
     16e:	10 92 9a 00 	sts	0x009A, r1
     172:	10 92 9b 00 	sts	0x009B, r1
     176:	10 92 9c 00 	sts	0x009C, r1
  LEDS[LED_L].setpoints[0] = 0;
     17a:	10 92 8d 00 	sts	0x008D, r1
  LEDS[LED_L].setpoints[1] = 0;
     17e:	10 92 8e 00 	sts	0x008E, r1
  LEDS[LED_L].setpoints[2] = 0;
     182:	10 92 8f 00 	sts	0x008F, r1
  LEDS[LED_L].setpoints[3] = 93;
     186:	8d e5       	ldi	r24, 0x5D	; 93
     188:	80 93 90 00 	sts	0x0090, r24
  LEDS[LED_L].setpoints[4] = 93;  
     18c:	80 93 91 00 	sts	0x0091, r24
  LEDS[LED_L].setpoints[5] = 0;  
     190:	10 92 92 00 	sts	0x0092, r1
  LEDS[LED_L].hints[0] = 0;  
     194:	10 92 93 00 	sts	0x0093, r1
  LEDS[LED_L].hints[1] = 0;  
     198:	10 92 94 00 	sts	0x0094, r1
  LEDS[LED_L].hints[2] = 0;  
     19c:	10 92 95 00 	sts	0x0095, r1
  LEDS[LED_L].hints[3] = 61;        
     1a0:	8d e3       	ldi	r24, 0x3D	; 61
     1a2:	80 93 96 00 	sts	0x0096, r24
  LEDS[LED_L].hints[4] = 61;
     1a6:	80 93 97 00 	sts	0x0097, r24
  LEDS[LED_L].hints[5] = 0;    
     1aa:	10 92 98 00 	sts	0x0098, r1
  LEDS[LED_L].setpoint_index = 0;
     1ae:	eb e8       	ldi	r30, 0x8B	; 139
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	10 82       	st	Z, r1
  
  LEDS[LED_R].PWM_out = &OCR0A;
     1b4:	86 e5       	ldi	r24, 0x56	; 86
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	93 a7       	std	Z+43, r25	; 0x2b
     1ba:	82 a7       	std	Z+42, r24	; 0x2a
  *(LEDS[LED_R].PWM_out) = 0;
     1bc:	16 be       	out	0x36, r1	; 54
  LEDS[LED_R].ADC_value = 0;
     1be:	14 a2       	std	Z+36, r1	; 0x24
     1c0:	15 a2       	std	Z+37, r1	; 0x25
     1c2:	16 a2       	std	Z+38, r1	; 0x26
     1c4:	17 a2       	std	Z+39, r1	; 0x27
  LEDS[LED_R].setpoints[0] = 0;
     1c6:	10 8e       	std	Z+24, r1	; 0x18
  LEDS[LED_R].setpoints[1] = 10; //10
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	81 8f       	std	Z+25, r24	; 0x19
  LEDS[LED_R].setpoints[2] = 55;
     1cc:	87 e3       	ldi	r24, 0x37	; 55
     1ce:	82 8f       	std	Z+26, r24	; 0x1a
  LEDS[LED_R].setpoints[3] = 163;
     1d0:	83 ea       	ldi	r24, 0xA3	; 163
     1d2:	83 8f       	std	Z+27, r24	; 0x1b
  LEDS[LED_R].setpoints[4] = 0;
     1d4:	14 8e       	std	Z+28, r1	; 0x1c
  LEDS[LED_R].setpoints[5] = 163;  
     1d6:	85 8f       	std	Z+29, r24	; 0x1d
  LEDS[LED_R].hints[0] = 0;  
     1d8:	16 8e       	std	Z+30, r1	; 0x1e
  LEDS[LED_R].hints[1] = 35;  
     1da:	83 e2       	ldi	r24, 0x23	; 35
     1dc:	87 8f       	std	Z+31, r24	; 0x1f
  LEDS[LED_R].hints[2] = 60;  
     1de:	8c e3       	ldi	r24, 0x3C	; 60
     1e0:	80 a3       	std	Z+32, r24	; 0x20
  LEDS[LED_R].hints[3] = 70;
     1e2:	86 e4       	ldi	r24, 0x46	; 70
     1e4:	81 a3       	std	Z+33, r24	; 0x21
  LEDS[LED_R].hints[4] = 0; 
     1e6:	12 a2       	std	Z+34, r1	; 0x22
  LEDS[LED_R].hints[5] = 70;     
     1e8:	83 a3       	std	Z+35, r24	; 0x23
  
  
  LEDS[LED_R].setpoint_index = 0;
     1ea:	16 8a       	std	Z+22, r1	; 0x16
  
  adc_muxes[LED_L] = AMUX_L;
     1ec:	8f e8       	ldi	r24, 0x8F	; 143
     1ee:	80 93 84 00 	sts	0x0084, r24
  adc_muxes[LED_R] = AMUX_R;
     1f2:	81 e9       	ldi	r24, 0x91	; 145
     1f4:	80 93 85 00 	sts	0x0085, r24
  adc_muxes[VBAT] = AMUX_VBAT;
     1f8:	81 e2       	ldi	r24, 0x21	; 33
     1fa:	80 93 86 00 	sts	0x0086, r24
  
  shop_flag = INUSE;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	90 93 88 00 	sts	0x0088, r25
     206:	80 93 87 00 	sts	0x0087, r24
  button_state = UP;
     20a:	10 92 e4 00 	sts	0x00E4, r1
     20e:	10 92 e3 00 	sts	0x00E3, r1
  
}
     212:	08 95       	ret

00000214 <init_hw>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	20 e8       	ldi	r18, 0x80	; 128
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	f8 94       	cli
     21e:	26 bd       	out	0x26, r18	; 38
     220:	86 bd       	out	0x26, r24	; 38
     222:	0f be       	out	0x3f, r0	; 63
  //deal with anything that might be floating.
 //  PORTA=255;
 //  PORTB=255;

  //set both LEDs out and off
  SETBIT(LED_R_DDR,LED_R_PIN);
     224:	ba 9a       	sbi	0x17, 2	; 23
  C_CLEARBIT(LED_R_LED);  
     226:	c2 98       	cbi	0x18, 2	; 24
  SETBIT(LED_L_DDR,LED_L_PIN);
     228:	d7 9a       	sbi	0x1a, 7	; 26
  C_CLEARBIT(LED_L_LED);
     22a:	df 98       	cbi	0x1b, 7	; 27
  
  


  //set button as input with pullup
  CLEARBIT(BUTTON1_DDR,BUTTON1_PIN);
     22c:	b8 98       	cbi	0x17, 0	; 23
  C_SETBIT(BUTTON1_OUT); //pullup
     22e:	c0 9a       	sbi	0x18, 0	; 24

  CLEARBIT(CHARGE_DDR,CHARGE_PIN);
     230:	b9 98       	cbi	0x17, 1	; 23
  C_SETBIT(CHARGE_OUT); //pullup
     232:	c1 9a       	sbi	0x18, 1	; 24


  //Setup TIMER1 used for house keeping, 16bit timer so overflows every 65536 clocks or approx 122Hz at 8mhz
  TCCR1B |= (1 << CS10)| (1 << ICNC1); //no prescaler and noise canceler is on
     234:	8e b5       	in	r24, 0x2e	; 46
     236:	81 68       	ori	r24, 0x81	; 129
     238:	8e bd       	out	0x2e, r24	; 46
  TIMSK1=(1<<TOIE1); //enable timer 1 overflow   
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	9c b9       	out	0x0c, r25	; 12

  // Setup Timer0 used for PWM outputs, Running at 31Khz at 8mhz
  OCR0B = 0;  
     23e:	1c be       	out	0x3c, r1	; 60
  OCR0A = 0;
     240:	16 be       	out	0x36, r1	; 54
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     242:	80 b7       	in	r24, 0x30	; 48
     244:	83 6a       	ori	r24, 0xA3	; 163
     246:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00));
     248:	83 b7       	in	r24, 0x33	; 51
     24a:	81 60       	ori	r24, 0x01	; 1
     24c:	83 bf       	out	0x33, r24	; 51
  TIMSK0=(1<<TOIE0); //overflow interrupt
     24e:	99 bf       	out	0x39, r25	; 57
//  LED_L.PWM_out = &OCR0B;

  
  //Setup ADC
// ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz 
  ADCSRB |= (1 << ADLAR); // left align results, 8 bit ftw
     250:	1c 9a       	sbi	0x03, 4	; 3
  ADMUX = 0b100001; //give it something to start with
     252:	81 e2       	ldi	r24, 0x21	; 33
     254:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADEN);  // Enable ADC 
     256:	37 9a       	sbi	0x06, 7	; 6
  ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt 
     258:	33 9a       	sbi	0x06, 3	; 6
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // prescaler to /64 = 125khz adc clock @ 8mhz
     25a:	86 b1       	in	r24, 0x06	; 6
     25c:	86 60       	ori	r24, 0x06	; 6
     25e:	86 b9       	out	0x06, r24	; 6
  
  GIMSK |= (1 << PCIE1);  //enable pcint1 interrupt source
     260:	8b b7       	in	r24, 0x3b	; 59
     262:	80 62       	ori	r24, 0x20	; 32
     264:	8b bf       	out	0x3b, r24	; 59
  PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);  //turn interrupts on for pin b0/pcint8 , b1/pcint9, button, charger respectivley
     266:	80 b5       	in	r24, 0x20	; 32
     268:	83 60       	ori	r24, 0x03	; 3
     26a:	80 bd       	out	0x20, r24	; 32
  MCUCR |= (1 << ISC00);   // set the interrupt to fire on any level change of an external interrupt
     26c:	85 b7       	in	r24, 0x35	; 53
     26e:	81 60       	ori	r24, 0x01	; 1
     270:	85 bf       	out	0x35, r24	; 53
 //SETPOINT_R = 50; 
 
 //power_spi_disable();
 //power_twi_disable();
 //power_usart_disable();
 power_usi_disable();
     272:	01 9a       	sbi	0x00, 1	; 0
 ACSR |= (1 << ACD);
     274:	47 9a       	sbi	0x08, 7	; 8

}
     276:	08 95       	ret

00000278 <advance_LED>:
void advance_LED()
{
  mode_changed = 32;
     278:	80 e2       	ldi	r24, 0x20	; 32
     27a:	80 93 68 00 	sts	0x0068, r24
  current_setpoint++;
     27e:	80 91 73 00 	lds	r24, 0x0073
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	80 93 73 00 	sts	0x0073, r24

  if (current_setpoint >= NUM_OF_LED_STATES)
     288:	86 30       	cpi	r24, 0x06	; 6
     28a:	88 f5       	brcc	.+98     	; 0x2ee <advance_LED+0x76>
     28c:	e8 2f       	mov	r30, r24
     28e:	f0 e0       	ldi	r31, 0x00	; 0
  {
     current_setpoint = 0;
     //killit = 1;
  }
  //SETPOINT_R = LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index];
  LEDS[LED_L].setpoint_index = current_setpoint;                        
     290:	80 93 8b 00 	sts	0x008B, r24
  LEDS[LED_R].setpoint_index = current_setpoint; 
     294:	80 93 a1 00 	sts	0x00A1, r24
  LEDS[LED_L].seeking = 20;                        
     298:	84 e1       	ldi	r24, 0x14	; 20
     29a:	80 93 8c 00 	sts	0x008C, r24
  LEDS[LED_R].seeking = 20; 
     29e:	80 93 a2 00 	sts	0x00A2, r24
 // (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[current_setpoint];
 // (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[current_setpoint];
  if (LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index] == 0) 
     2a2:	e5 57       	subi	r30, 0x75	; 117
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	88 23       	and	r24, r24
     2aa:	71 f4       	brne	.+28     	; 0x2c8 <advance_LED+0x50>
  {
    (*(LEDS[LED_L].PWM_out)) = 0;
     2ac:	e0 91 9f 00 	lds	r30, 0x009F
     2b0:	f0 91 a0 00 	lds	r31, 0x00A0
     2b4:	10 82       	st	Z, r1
    LEDS[LED_L].pwm_buffer = 0;
     2b6:	10 92 9d 00 	sts	0x009D, r1
    LEDS[LED_L].pwm_dither = 0;    
     2ba:	10 92 9e 00 	sts	0x009E, r1
     2be:	e0 91 a1 00 	lds	r30, 0x00A1
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	e5 57       	subi	r30, 0x75	; 117
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
  }
  if (LEDS[LED_R].setpoints[LEDS[LED_R].setpoint_index] == 0) 
     2c8:	80 8d       	ldd	r24, Z+24	; 0x18
     2ca:	88 23       	and	r24, r24
     2cc:	49 f4       	brne	.+18     	; 0x2e0 <advance_LED+0x68>
  {
    (*(LEDS[LED_R].PWM_out)) = 0;
     2ce:	e0 91 b5 00 	lds	r30, 0x00B5
     2d2:	f0 91 b6 00 	lds	r31, 0x00B6
     2d6:	10 82       	st	Z, r1
    LEDS[LED_R].pwm_buffer = 0;
     2d8:	10 92 b3 00 	sts	0x00B3, r1
    LEDS[LED_R].pwm_dither = 0;
     2dc:	10 92 b4 00 	sts	0x00B4, r1
  }
  
  if (current_setpoint == 0)
     2e0:	80 91 73 00 	lds	r24, 0x0073
     2e4:	88 23       	and	r24, r24
     2e6:	11 f4       	brne	.+4      	; 0x2ec <advance_LED+0x74>
  {
    runtime = 0;
     2e8:	10 92 74 00 	sts	0x0074, r1
     2ec:	08 95       	ret
  mode_changed = 32;
  current_setpoint++;

  if (current_setpoint >= NUM_OF_LED_STATES)
  {
     current_setpoint = 0;
     2ee:	10 92 73 00 	sts	0x0073, r1
     2f2:	e0 e0       	ldi	r30, 0x00	; 0
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	cb cf       	rjmp	.-106    	; 0x290 <advance_LED+0x18>

000002fa <shutdown>:
 
}

void shutdown() //turn everything off then go into powerdown, note execution will resume from within this function.
{
  cli();
     2fa:	f8 94       	cli
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
  _delay_ms(100);
  */
//reset LED state to being off
 last_setpoint = current_setpoint; 
     2fc:	80 91 73 00 	lds	r24, 0x0073
     300:	80 93 75 00 	sts	0x0075, r24
 current_setpoint = NUM_OF_LED_STATES-1;
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	80 93 73 00 	sts	0x0073, r24
 advance_LED();
     30a:	b6 df       	rcall	.-148    	; 0x278 <advance_LED>

//really turn it off.  
  OCR0A = 0;
     30c:	16 be       	out	0x36, r1	; 54
  OCR0B = 0;
     30e:	1c be       	out	0x3c, r1	; 60
  TCCR0A = 0;
     310:	10 be       	out	0x30, r1	; 48
  TCCR0B = 0;     
     312:	13 be       	out	0x33, r1	; 51
  PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     314:	80 b5       	in	r24, 0x20	; 32
     316:	83 60       	ori	r24, 0x03	; 3
     318:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	9f e3       	ldi	r25, 0x3F	; 63
     31e:	a6 e0       	ldi	r26, 0x06	; 6
     320:	81 50       	subi	r24, 0x01	; 1
     322:	90 40       	sbci	r25, 0x00	; 0
     324:	a0 40       	sbci	r26, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <shutdown+0x26>
     328:	00 c0       	rjmp	.+0      	; 0x32a <shutdown+0x30>
     32a:	00 00       	nop
  _delay_ms(256);
  //power_all_disable();
  //power_adc_disable();

  ADCSRA &= ~(1 << ADEN);  //disable adc power, the thing in power.h doesnt work
     32c:	37 98       	cbi	0x06, 7	; 6
  set_sleep_mode(SLEEP_MODE_PWR_DOWN); 
     32e:	85 b7       	in	r24, 0x35	; 53
     330:	87 7e       	andi	r24, 0xE7	; 231
     332:	80 61       	ori	r24, 0x10	; 16
     334:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     336:	85 b7       	in	r24, 0x35	; 53
     338:	80 62       	ori	r24, 0x20	; 32
     33a:	85 bf       	out	0x35, r24	; 53
  //sleep_bod_disable();
  sei();
     33c:	78 94       	sei
  sleep_cpu();
     33e:	88 95       	sleep
  //power_all_enable();
  ADCSRA |= (1 << ADEN);  //enable adc power, the thing in power.h doesnt work
     340:	37 9a       	sbi	0x06, 7	; 6
  power_usi_disable();  
     342:	01 9a       	sbi	0x00, 1	; 0
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     344:	80 b7       	in	r24, 0x30	; 48
     346:	83 6a       	ori	r24, 0xA3	; 163
     348:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00)); 
     34a:	83 b7       	in	r24, 0x33	; 51
     34c:	81 60       	ori	r24, 0x01	; 1
     34e:	83 bf       	out	0x33, r24	; 51
  vbat_cut_noise = 255;
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	80 93 67 00 	sts	0x0067, r24
  low_bat_noise = 255;
     356:	80 93 66 00 	sts	0x0066, r24
  LowBatt = 0;
     35a:	10 92 77 00 	sts	0x0077, r1

}    
     35e:	08 95       	ret

00000360 <idle>:

void idle()
{
 cli();
     360:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE); 
     362:	85 b7       	in	r24, 0x35	; 53
     364:	87 7e       	andi	r24, 0xE7	; 231
     366:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     368:	85 b7       	in	r24, 0x35	; 53
     36a:	80 62       	ori	r24, 0x20	; 32
     36c:	85 bf       	out	0x35, r24	; 53
  sei();
     36e:	78 94       	sei
  sleep_cpu();
     370:	88 95       	sleep
} 
     372:	08 95       	ret

00000374 <button_down>:


void button_down()
{
//  static enum BUTTON_STATES last_button_state = UP
}
     374:	08 95       	ret

00000376 <button_up>:

void button_up()
{
  vbat_cut_noise = 255;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	80 93 67 00 	sts	0x0067, r24

  
  if ((button_hold_down_time < 50) && (mode != LOCK)) // this is a short button press
     37c:	80 91 71 00 	lds	r24, 0x0071
     380:	90 91 72 00 	lds	r25, 0x0072
     384:	82 33       	cpi	r24, 0x32	; 50
     386:	91 05       	cpc	r25, r1
     388:	f0 f5       	brcc	.+124    	; 0x406 <button_up+0x90>
     38a:	20 91 89 00 	lds	r18, 0x0089
     38e:	30 91 8a 00 	lds	r19, 0x008A
     392:	21 30       	cpi	r18, 0x01	; 1
     394:	31 05       	cpc	r19, r1
     396:	39 f0       	breq	.+14     	; 0x3a6 <button_up+0x30>
  {
    if (current_setpoint > 0) //torch is on
     398:	40 91 73 00 	lds	r20, 0x0073
     39c:	44 23       	and	r20, r20
     39e:	59 f1       	breq	.+86     	; 0x3f6 <button_up+0x80>
    {
     killit = 1;
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	40 93 76 00 	sts	0x0076, r20
      current_setpoint = 2;        // full power
      advance_LED(); 
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
     3a6:	ac 01       	movw	r20, r24
     3a8:	41 50       	subi	r20, 0x01	; 1
     3aa:	56 40       	sbci	r21, 0x06	; 6
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	4d 3f       	cpi	r20, 0xFD	; 253
     3b0:	56 07       	cpc	r21, r22
     3b2:	38 f4       	brcc	.+14     	; 0x3c2 <button_up+0x4c>
     3b4:	40 91 87 00 	lds	r20, 0x0087
     3b8:	50 91 88 00 	lds	r21, 0x0088
     3bc:	41 30       	cpi	r20, 0x01	; 1
     3be:	51 05       	cpc	r21, r1
     3c0:	b9 f1       	breq	.+110    	; 0x430 <button_up+0xba>
     mode = LOCK;
     killit = 1;
    }
  }
      
  if ((button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END)) //toggle shop mode
     3c2:	81 50       	subi	r24, 0x01	; 1
     3c4:	90 41       	sbci	r25, 0x10	; 16
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ca:	94 07       	cpc	r25, r20
     3cc:	60 f4       	brcc	.+24     	; 0x3e6 <button_up+0x70>
  {
    if (shop_flag == INSTORE)
     3ce:	80 91 87 00 	lds	r24, 0x0087
     3d2:	90 91 88 00 	lds	r25, 0x0088
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	f9 f4       	brne	.+62     	; 0x418 <button_up+0xa2>
    {
      shop_flag = INUSE;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	90 93 88 00 	sts	0x0088, r25
     3e2:	80 93 87 00 	sts	0x0087, r24
    } else {
     shop_flag = INSTORE;
    }
  }    
         
  button_hold_down_time = 0;
     3e6:	10 92 72 00 	sts	0x0072, r1
     3ea:	10 92 71 00 	sts	0x0071, r1
  
  if (mode == LOCK)
     3ee:	21 30       	cpi	r18, 0x01	; 1
     3f0:	31 05       	cpc	r19, r1
     3f2:	71 f0       	breq	.+28     	; 0x410 <button_up+0x9a>
     3f4:	08 95       	ret
  {
    if (current_setpoint > 0) //torch is on
    {
     killit = 1;
    } else {                  // torch is off
      current_setpoint = 2;        // full power
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	80 93 73 00 	sts	0x0073, r24
      advance_LED(); 
     3fc:	3d df       	rcall	.-390    	; 0x278 <advance_LED>
     3fe:	80 91 71 00 	lds	r24, 0x0071
     402:	90 91 72 00 	lds	r25, 0x0072
     406:	20 91 89 00 	lds	r18, 0x0089
     40a:	30 91 8a 00 	lds	r19, 0x008A
     40e:	cb cf       	rjmp	.-106    	; 0x3a6 <button_up+0x30>
         
  button_hold_down_time = 0;
  
  if (mode == LOCK)
  {
    killit = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 76 00 	sts	0x0076, r24
     416:	08 95       	ret
  {
    if (shop_flag == INSTORE)
    {
      shop_flag = INUSE;
    } else {
     shop_flag = INSTORE;
     418:	10 92 88 00 	sts	0x0088, r1
     41c:	10 92 87 00 	sts	0x0087, r1
    }
  }    
         
  button_hold_down_time = 0;
     420:	10 92 72 00 	sts	0x0072, r1
     424:	10 92 71 00 	sts	0x0071, r1
  
  if (mode == LOCK)
     428:	21 30       	cpi	r18, 0x01	; 1
     42a:	31 05       	cpc	r19, r1
     42c:	19 f7       	brne	.-58     	; 0x3f4 <button_up+0x7e>
     42e:	f0 cf       	rjmp	.-32     	; 0x410 <button_up+0x9a>
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
     430:	21 30       	cpi	r18, 0x01	; 1
     432:	31 05       	cpc	r19, r1
     434:	51 f0       	breq	.+20     	; 0x44a <button_up+0xd4>
    {
      mode = NORMAL;
    } else {
     mode = LOCK;
     436:	50 93 8a 00 	sts	0x008A, r21
     43a:	40 93 89 00 	sts	0x0089, r20
     killit = 1;
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	20 93 76 00 	sts	0x0076, r18
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	bc cf       	rjmp	.-136    	; 0x3c2 <button_up+0x4c>

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
    {
      mode = NORMAL;
     44a:	10 92 8a 00 	sts	0x008A, r1
     44e:	10 92 89 00 	sts	0x0089, r1
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	b5 cf       	rjmp	.-150    	; 0x3c2 <button_up+0x4c>

00000458 <WDT_off>:
  }
}

void WDT_off(void)
{
   wdt_reset();
     458:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
     45a:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
     45c:	81 b5       	in	r24, 0x21	; 33
     45e:	88 61       	ori	r24, 0x18	; 24
     460:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
     462:	11 bc       	out	0x21, r1	; 33
}
     464:	08 95       	ret

00000466 <main>:
  }
}

void WDT_off(void)
{
   wdt_reset();
     466:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
     468:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
     46a:	81 b5       	in	r24, 0x21	; 33
     46c:	88 61       	ori	r24, 0x18	; 24
     46e:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
     470:	11 bc       	out	0x21, r1	; 33
{

  //wdt_disable();
  WDT_off();
  //wdt_enable(WDTO_4S);
  init_sw();
     472:	74 de       	rcall	.-792    	; 0x15c <init_sw>
  init_hw();
     474:	cf de       	rcall	.-610    	; 0x214 <init_hw>
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
     476:	e0 91 9f 00 	lds	r30, 0x009F
     47a:	f0 91 a0 00 	lds	r31, 0x00A0
     47e:	80 91 96 00 	lds	r24, 0x0096
     482:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
     484:	e0 91 b5 00 	lds	r30, 0x00B5
     488:	f0 91 b6 00 	lds	r31, 0x00B6
     48c:	80 91 ac 00 	lds	r24, 0x00AC
     490:	80 83       	st	Z, r24
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	90 e7       	ldi	r25, 0x70	; 112
     496:	a2 e0       	ldi	r26, 0x02	; 2
     498:	81 50       	subi	r24, 0x01	; 1
     49a:	90 40       	sbci	r25, 0x00	; 0
     49c:	a0 40       	sbci	r26, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <main+0x32>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x3c>
     4a2:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
     4a4:	e0 91 9f 00 	lds	r30, 0x009F
     4a8:	f0 91 a0 00 	lds	r31, 0x00A0
     4ac:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
     4ae:	e0 91 b5 00 	lds	r30, 0x00B5
     4b2:	f0 91 b6 00 	lds	r31, 0x00B6
     4b6:	10 82       	st	Z, r1
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	90 e7       	ldi	r25, 0x70	; 112
     4bc:	a2 e0       	ldi	r26, 0x02	; 2
     4be:	81 50       	subi	r24, 0x01	; 1
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	a0 40       	sbci	r26, 0x00	; 0
     4c4:	e1 f7       	brne	.-8      	; 0x4be <main+0x58>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <main+0x62>
     4c8:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
     4ca:	e0 91 9f 00 	lds	r30, 0x009F
     4ce:	f0 91 a0 00 	lds	r31, 0x00A0
     4d2:	80 91 96 00 	lds	r24, 0x0096
     4d6:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
     4d8:	e0 91 b5 00 	lds	r30, 0x00B5
     4dc:	f0 91 b6 00 	lds	r31, 0x00B6
     4e0:	80 91 ac 00 	lds	r24, 0x00AC
     4e4:	80 83       	st	Z, r24
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	90 e7       	ldi	r25, 0x70	; 112
     4ea:	a2 e0       	ldi	r26, 0x02	; 2
     4ec:	81 50       	subi	r24, 0x01	; 1
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	a0 40       	sbci	r26, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <main+0x86>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <main+0x90>
     4f6:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
     4f8:	e0 91 9f 00 	lds	r30, 0x009F
     4fc:	f0 91 a0 00 	lds	r31, 0x00A0
     500:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
     502:	e0 91 b5 00 	lds	r30, 0x00B5
     506:	f0 91 b6 00 	lds	r31, 0x00B6
     50a:	10 82       	st	Z, r1
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	90 e7       	ldi	r25, 0x70	; 112
     510:	a2 e0       	ldi	r26, 0x02	; 2
     512:	81 50       	subi	r24, 0x01	; 1
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	a0 40       	sbci	r26, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <main+0xac>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0xb6>
     51c:	00 00       	nop
  _delay_ms(100);

  charge_from_boot = 0;
     51e:	10 92 70 00 	sts	0x0070, r1

    if (!C_CHECKBIT(CHARGE))
     522:	b1 99       	sbic	0x16, 1	; 22
     524:	5a c0       	rjmp	.+180    	; 0x5da <main+0x174>
    {
      charging = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 6f 00 	sts	0x006F, r24
    charge_flash++;
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
    {
      charge_flash = 0;
     52c:	80 e0       	ldi	r24, 0x00	; 0
      (*(LEDS[LED_R].PWM_out)) = 0;
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    {
      charging = 1;
     52e:	91 e0       	ldi	r25, 0x01	; 1
      charging = 1;
    } else {
      charging = 0;
    }
  uint8_t charge_flash = 0;  //used for the delay loop to flash the charging LED, each count is 10msec    
  while (charging == 1)  
     530:	20 91 6f 00 	lds	r18, 0x006F
     534:	21 30       	cpi	r18, 0x01	; 1
     536:	99 f5       	brne	.+102    	; 0x59e <main+0x138>
  {
    
    charge_flash++;
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	af e1       	ldi	r26, 0x1F	; 31
     53c:	be e4       	ldi	r27, 0x4E	; 78
     53e:	11 97       	sbiw	r26, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <main+0xd8>
     542:	00 c0       	rjmp	.+0      	; 0x544 <main+0xde>
     544:	00 00       	nop
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
     546:	85 36       	cpi	r24, 0x65	; 101
     548:	b8 f4       	brcc	.+46     	; 0x578 <main+0x112>
      charge_flash = 0;
    }
    


    if (charge_flash < 20)
     54a:	84 31       	cpi	r24, 0x14	; 20
     54c:	b0 f0       	brcs	.+44     	; 0x57a <main+0x114>
    {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[2];  //medium brightness on the wide angle LED
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[2];
    } else {
      (*(LEDS[LED_L].PWM_out)) = 0;
     54e:	e0 91 9f 00 	lds	r30, 0x009F
     552:	f0 91 a0 00 	lds	r31, 0x00A0
     556:	10 82       	st	Z, r1
      (*(LEDS[LED_R].PWM_out)) = 0;
     558:	e0 91 b5 00 	lds	r30, 0x00B5
     55c:	f0 91 b6 00 	lds	r31, 0x00B6
     560:	10 82       	st	Z, r1
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
     562:	b1 99       	sbic	0x16, 1	; 22
     564:	19 c0       	rjmp	.+50     	; 0x598 <main+0x132>
    {
      charging = 1;
     566:	90 93 6f 00 	sts	0x006F, r25
    } else {
      charging = 0;
    }
    
    if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed kill the charge flash loop
     56a:	b0 99       	sbic	0x16, 0	; 22
     56c:	e1 cf       	rjmp	.-62     	; 0x530 <main+0xca>
    {
      charge_from_boot = 1;
     56e:	90 93 70 00 	sts	0x0070, r25
      charging = 0;
     572:	10 92 6f 00 	sts	0x006F, r1
     576:	dc cf       	rjmp	.-72     	; 0x530 <main+0xca>
    charge_flash++;
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
    {
      charge_flash = 0;
     578:	80 e0       	ldi	r24, 0x00	; 0
    


    if (charge_flash < 20)
    {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[2];  //medium brightness on the wide angle LED
     57a:	e0 91 9f 00 	lds	r30, 0x009F
     57e:	f0 91 a0 00 	lds	r31, 0x00A0
     582:	20 91 95 00 	lds	r18, 0x0095
     586:	20 83       	st	Z, r18
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[2];
     588:	e0 91 b5 00 	lds	r30, 0x00B5
     58c:	f0 91 b6 00 	lds	r31, 0x00B6
     590:	20 91 ab 00 	lds	r18, 0x00AB
     594:	20 83       	st	Z, r18
     596:	e5 cf       	rjmp	.-54     	; 0x562 <main+0xfc>

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    {
      charging = 1;
    } else {
      charging = 0;
     598:	10 92 6f 00 	sts	0x006F, r1
     59c:	e6 cf       	rjmp	.-52     	; 0x56a <main+0x104>
    }
          
    
  } 

  if (!C_CHECKBIT(CHARGE))  // set the flag again if we got here by the button being pressed.
     59e:	b1 99       	sbic	0x16, 1	; 22
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <main+0x142>
  {
    charging = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 6f 00 	sts	0x006F, r24
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	90 e7       	ldi	r25, 0x70	; 112
     5ac:	a2 e0       	ldi	r26, 0x02	; 2
     5ae:	81 50       	subi	r24, 0x01	; 1
     5b0:	90 40       	sbci	r25, 0x00	; 0
     5b2:	a0 40       	sbci	r26, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x148>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x152>
     5b8:	00 00       	nop
  } 
  
  _delay_ms(100); //debounce button
  while (!C_CHECKBIT(BUTTON1))  //wait for button to be released
     5ba:	b0 9b       	sbis	0x16, 0	; 22
     5bc:	fe cf       	rjmp	.-4      	; 0x5ba <main+0x154>
  }  

  
        
//SETPOINT = 130;
sei();
     5be:	78 94       	sei

killit = 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 76 00 	sts	0x0076, r24
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <main+0x164>
   if (killit == 1)
   {
     shutdown();
     killit = 0;
   } else {
     idle(); 
     5c8:	cb de       	rcall	.-618    	; 0x360 <idle>

  
 while (1 == 1)
 { 
   //this will execute after every timer interrupt, and idle the chip when it hits the end of the loop.
   if (killit == 1)
     5ca:	80 91 76 00 	lds	r24, 0x0076
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <main+0x162>
   {
     shutdown();
     5d2:	93 de       	rcall	.-730    	; 0x2fa <shutdown>
     killit = 0;
     5d4:	10 92 76 00 	sts	0x0076, r1
     5d8:	f8 cf       	rjmp	.-16     	; 0x5ca <main+0x164>

    if (!C_CHECKBIT(CHARGE))
    {
      charging = 1;
    } else {
      charging = 0;
     5da:	10 92 6f 00 	sts	0x006F, r1
     5de:	a6 cf       	rjmp	.-180    	; 0x52c <main+0xc6>

000005e0 <__vector_13>:
 }
}


ISR(ADC_vect) 
{ 
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	2f 93       	push	r18
     5f0:	3f 93       	push	r19
     5f2:	4f 93       	push	r20
     5f4:	5f 93       	push	r21
     5f6:	6f 93       	push	r22
     5f8:	7f 93       	push	r23
     5fa:	8f 93       	push	r24
     5fc:	9f 93       	push	r25
     5fe:	af 93       	push	r26
     600:	bf 93       	push	r27
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
  static uint16_t num_of_samples = 0; //how many samples have we taken for this channel.
  static uint16_t battery_delayer = 0;
  
  uint8_t adc_val = 0;
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
     60a:	80 91 68 00 	lds	r24, 0x0068
     60e:	88 23       	and	r24, r24
     610:	09 f4       	brne	.+2      	; 0x614 <__vector_13+0x34>
     612:	5b c0       	rjmp	.+182    	; 0x6ca <__vector_13+0xea>
  {
    SAMPLES_TO_AVG = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 69 00 	sts	0x0069, r24
  } else {
    SAMPLES_TO_AVG = 128;
  }
  if (ADC_changed == 0)
     61a:	80 91 6b 00 	lds	r24, 0x006B
     61e:	88 23       	and	r24, r24
     620:	09 f0       	breq	.+2      	; 0x624 <__vector_13+0x44>
     622:	5b c0       	rjmp	.+182    	; 0x6da <__vector_13+0xfa>
  {
    num_of_samples++;
     624:	40 91 7d 00 	lds	r20, 0x007D
     628:	50 91 7e 00 	lds	r21, 0x007E
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	50 93 7e 00 	sts	0x007E, r21
     634:	40 93 7d 00 	sts	0x007D, r20
    avg_adc_val += ADCH;
     638:	25 b1       	in	r18, 0x05	; 5
     63a:	60 91 7f 00 	lds	r22, 0x007F
     63e:	70 91 80 00 	lds	r23, 0x0080
     642:	80 91 81 00 	lds	r24, 0x0081
     646:	90 91 82 00 	lds	r25, 0x0082
     64a:	62 0f       	add	r22, r18
     64c:	71 1d       	adc	r23, r1
     64e:	81 1d       	adc	r24, r1
     650:	91 1d       	adc	r25, r1
     652:	60 93 7f 00 	sts	0x007F, r22
     656:	70 93 80 00 	sts	0x0080, r23
     65a:	80 93 81 00 	sts	0x0081, r24
     65e:	90 93 82 00 	sts	0x0082, r25
    if (num_of_samples >= SAMPLES_TO_AVG )
     662:	20 91 69 00 	lds	r18, 0x0069
     666:	e2 2f       	mov	r30, r18
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	4e 17       	cp	r20, r30
     66c:	5f 07       	cpc	r21, r31
     66e:	08 f4       	brcc	.+2      	; 0x672 <__vector_13+0x92>
     670:	4e c0       	rjmp	.+156    	; 0x70e <__vector_13+0x12e>
    {
 
      adc_val = avg_adc_val / SAMPLES_TO_AVG ;
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	51 d7       	rcall	.+3746   	; 0x151c <__udivmodsi4>
      
      avg_adc_val = 0;
     67a:	10 92 7f 00 	sts	0x007F, r1
     67e:	10 92 80 00 	sts	0x0080, r1
     682:	10 92 81 00 	sts	0x0081, r1
     686:	10 92 82 00 	sts	0x0082, r1
      num_of_samples = 0;
     68a:	10 92 7e 00 	sts	0x007E, r1
     68e:	10 92 7d 00 	sts	0x007D, r1
      
      if (working_LED < 2)   
     692:	30 91 6a 00 	lds	r19, 0x006A
     696:	43 2f       	mov	r20, r19
     698:	32 30       	cpi	r19, 0x02	; 2
     69a:	d8 f1       	brcs	.+118    	; 0x712 <__vector_13+0x132>
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     69c:	32 30       	cpi	r19, 0x02	; 2
     69e:	09 f4       	brne	.+2      	; 0x6a2 <__vector_13+0xc2>
     6a0:	a9 c0       	rjmp	.+338    	; 0x7f4 <__vector_13+0x214>
            }
          }
        }
      }

    working_LED++;
     6a2:	e3 2f       	mov	r30, r19
     6a4:	ef 5f       	subi	r30, 0xFF	; 255
     6a6:	e0 93 6a 00 	sts	0x006A, r30
    if (working_LED == 2)
     6aa:	e2 30       	cpi	r30, 0x02	; 2
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <__vector_13+0xd0>
     6ae:	ab c0       	rjmp	.+342    	; 0x806 <__vector_13+0x226>
      } else {
        working_LED = 2;
      }
      
    }
    if (working_LED == 3)
     6b0:	e3 30       	cpi	r30, 0x03	; 3
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <__vector_13+0xd6>
     6b4:	a3 c0       	rjmp	.+326    	; 0x7fc <__vector_13+0x21c>
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
    {
      working_LED = 0;
    }
      ADMUX = adc_muxes[working_LED];      
     6b8:	ec 57       	subi	r30, 0x7C	; 124
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	80 81       	ld	r24, Z
     6be:	87 b9       	out	0x07, r24	; 7
      ADC_changed = 2;
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	80 93 6b 00 	sts	0x006B, r24
      ADCSRA |= (1 << ADSC); // take another sample
     6c6:	36 9a       	sbi	0x06, 6	; 6
     6c8:	0c c0       	rjmp	.+24     	; 0x6e2 <__vector_13+0x102>
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
  {
    SAMPLES_TO_AVG = 1;
  } else {
    SAMPLES_TO_AVG = 128;
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	80 93 69 00 	sts	0x0069, r24
  }
  if (ADC_changed == 0)
     6d0:	80 91 6b 00 	lds	r24, 0x006B
     6d4:	88 23       	and	r24, r24
     6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_13+0xfa>
     6d8:	a5 cf       	rjmp	.-182    	; 0x624 <__vector_13+0x44>
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
    }
    ADCSRA |= (1 << ADSC); // take another sample  
  } else {
    adc_val = ADCH; //toss this out
     6da:	95 b1       	in	r25, 0x05	; 5
    ADC_changed--; //decriment to toss out N samples, set in the timer1 ISR.    
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	80 93 6b 00 	sts	0x006B, r24
    ADCSRA |= (1 << ADSC); // take another sample
     6e2:	36 9a       	sbi	0x06, 6	; 6
  }

  
}
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	bf 91       	pop	r27
     6ee:	af 91       	pop	r26
     6f0:	9f 91       	pop	r25
     6f2:	8f 91       	pop	r24
     6f4:	7f 91       	pop	r23
     6f6:	6f 91       	pop	r22
     6f8:	5f 91       	pop	r21
     6fa:	4f 91       	pop	r20
     6fc:	3f 91       	pop	r19
     6fe:	2f 91       	pop	r18
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
      
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
     70e:	36 9a       	sbi	0x06, 6	; 6
     710:	e8 cf       	rjmp	.-48     	; 0x6e2 <__vector_13+0x102>
      avg_adc_val = 0;
      num_of_samples = 0;
      
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
     712:	e0 91 73 00 	lds	r30, 0x0073
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	83 2f       	mov	r24, r19
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	66 e1       	ldi	r22, 0x16	; 22
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb d6       	rcall	.+3478   	; 0x14b8 <__mulhi3>
     722:	dc 01       	movw	r26, r24
     724:	a5 57       	subi	r26, 0x75	; 117
     726:	bf 4f       	sbci	r27, 0xFF	; 255
     728:	ae 0f       	add	r26, r30
     72a:	bf 1f       	adc	r27, r31
     72c:	12 96       	adiw	r26, 0x02	; 2
     72e:	1c 91       	ld	r17, X
     730:	12 97       	sbiw	r26, 0x02	; 2
     732:	11 23       	and	r17, r17
     734:	09 f4       	brne	.+2      	; 0x738 <__vector_13+0x158>
     736:	7a c0       	rjmp	.+244    	; 0x82c <__vector_13+0x24c>
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
          
        } else {
          
          if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] )) && (LEDS[working_LED].pwm_buffer > 0))
     738:	12 17       	cp	r17, r18
     73a:	50 f5       	brcc	.+84     	; 0x790 <__vector_13+0x1b0>
     73c:	83 2f       	mov	r24, r19
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	66 e1       	ldi	r22, 0x16	; 22
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	b9 d6       	rcall	.+3442   	; 0x14b8 <__mulhi3>
     746:	dc 01       	movw	r26, r24
     748:	a5 57       	subi	r26, 0x75	; 117
     74a:	bf 4f       	sbci	r27, 0xFF	; 255
     74c:	52 96       	adiw	r26, 0x12	; 18
     74e:	0c 91       	ld	r16, X
     750:	52 97       	sbiw	r26, 0x12	; 18
     752:	00 23       	and	r16, r16
     754:	e9 f0       	breq	.+58     	; 0x790 <__vector_13+0x1b0>
          {
            if (mode_changed > 0)
     756:	80 91 68 00 	lds	r24, 0x0068
     75a:	88 23       	and	r24, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <__vector_13+0x180>
     75e:	f0 c0       	rjmp	.+480    	; 0x940 <__vector_13+0x360>
            { 
              LEDS[working_LED].pwm_buffer--;
     760:	83 2f       	mov	r24, r19
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	66 e1       	ldi	r22, 0x16	; 22
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	a7 d6       	rcall	.+3406   	; 0x14b8 <__mulhi3>
     76a:	dc 01       	movw	r26, r24
     76c:	a5 57       	subi	r26, 0x75	; 117
     76e:	bf 4f       	sbci	r27, 0xFF	; 255
     770:	01 50       	subi	r16, 0x01	; 1
     772:	52 96       	adiw	r26, 0x12	; 18
     774:	0c 93       	st	X, r16
            } else {         
              LEDS[working_LED].pwm_dither--;
              if (LEDS[working_LED].pwm_dither > 250) //wrapped at zero
              {
                LEDS[working_LED].pwm_buffer--;
                LEDS[working_LED].pwm_dither = 15;
     776:	84 2f       	mov	r24, r20
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	66 e1       	ldi	r22, 0x16	; 22
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	9c d6       	rcall	.+3384   	; 0x14b8 <__mulhi3>
     780:	dc 01       	movw	r26, r24
     782:	a5 57       	subi	r26, 0x75	; 117
     784:	bf 4f       	sbci	r27, 0xFF	; 255
     786:	ae 0f       	add	r26, r30
     788:	bf 1f       	adc	r27, r31
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	1c 91       	ld	r17, X
     78e:	12 97       	sbiw	r26, 0x02	; 2
              }
            }
          } 
          if ((adc_val < (LEDS[working_LED].setpoints[current_setpoint]) && (LEDS[working_LED].pwm_buffer < 255)))
     790:	21 17       	cp	r18, r17
     792:	50 f5       	brcc	.+84     	; 0x7e8 <__vector_13+0x208>
     794:	84 2f       	mov	r24, r20
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	66 e1       	ldi	r22, 0x16	; 22
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	8d d6       	rcall	.+3354   	; 0x14b8 <__mulhi3>
     79e:	dc 01       	movw	r26, r24
     7a0:	a5 57       	subi	r26, 0x75	; 117
     7a2:	bf 4f       	sbci	r27, 0xFF	; 255
     7a4:	52 96       	adiw	r26, 0x12	; 18
     7a6:	1c 91       	ld	r17, X
     7a8:	52 97       	sbiw	r26, 0x12	; 18
     7aa:	1f 3f       	cpi	r17, 0xFF	; 255
     7ac:	01 f1       	breq	.+64     	; 0x7ee <__vector_13+0x20e>
          {
            if (mode_changed > 0)
     7ae:	80 91 68 00 	lds	r24, 0x0068
     7b2:	88 23       	and	r24, r24
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <__vector_13+0x1d8>
     7b6:	8b c0       	rjmp	.+278    	; 0x8ce <__vector_13+0x2ee>
            { 
              LEDS[working_LED].pwm_buffer++;
     7b8:	84 2f       	mov	r24, r20
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	66 e1       	ldi	r22, 0x16	; 22
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	7b d6       	rcall	.+3318   	; 0x14b8 <__mulhi3>
     7c2:	dc 01       	movw	r26, r24
     7c4:	a5 57       	subi	r26, 0x75	; 117
     7c6:	bf 4f       	sbci	r27, 0xFF	; 255
     7c8:	1f 5f       	subi	r17, 0xFF	; 255
     7ca:	52 96       	adiw	r26, 0x12	; 18
     7cc:	1c 93       	st	X, r17
            } else {         
              LEDS[working_LED].pwm_dither++;
              if (LEDS[working_LED].pwm_dither > 15)
              {
                LEDS[working_LED].pwm_buffer++;
                LEDS[working_LED].pwm_dither = 0;
     7ce:	84 2f       	mov	r24, r20
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	66 e1       	ldi	r22, 0x16	; 22
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	70 d6       	rcall	.+3296   	; 0x14b8 <__mulhi3>
     7d8:	dc 01       	movw	r26, r24
     7da:	a5 57       	subi	r26, 0x75	; 117
     7dc:	bf 4f       	sbci	r27, 0xFF	; 255
     7de:	ae 0f       	add	r26, r30
     7e0:	bf 1f       	adc	r27, r31
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	1c 91       	ld	r17, X
     7e6:	12 97       	sbiw	r26, 0x02	; 2
          /*if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (LEDS[working_LED].seeking > 0))
          {
            LEDS[working_LED].seeking--;
          }          
          */
          if ((adc_val != (LEDS[working_LED].setpoints[current_setpoint] ))) // && (LEDS[working_LED].seeking > 0))
     7e8:	21 17       	cp	r18, r17
     7ea:	09 f4       	brne	.+2      	; 0x7ee <__vector_13+0x20e>
     7ec:	5a cf       	rjmp	.-332    	; 0x6a2 <__vector_13+0xc2>
          {
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
     7ee:	36 9a       	sbi	0x06, 6	; 6
     7f0:	34 2f       	mov	r19, r20
     7f2:	57 cf       	rjmp	.-338    	; 0x6a2 <__vector_13+0xc2>
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     7f4:	80 91 68 00 	lds	r24, 0x0068
     7f8:	88 23       	and	r24, r24
     7fa:	39 f1       	breq	.+78     	; 0x84a <__vector_13+0x26a>
      }
      
    }
    if (working_LED == 3)
    {
      working_LED = 0;
     7fc:	10 92 6a 00 	sts	0x006A, r1
     800:	e0 e0       	ldi	r30, 0x00	; 0
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	59 cf       	rjmp	.-334    	; 0x6b8 <__vector_13+0xd8>
      }

    working_LED++;
    if (working_LED == 2)
    {
      battery_delayer++;
     806:	20 91 7b 00 	lds	r18, 0x007B
     80a:	30 91 7c 00 	lds	r19, 0x007C
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	30 93 7c 00 	sts	0x007C, r19
     816:	20 93 7b 00 	sts	0x007B, r18
      if (battery_delayer == 1024)
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	20 30       	cpi	r18, 0x00	; 0
     81e:	38 07       	cpc	r19, r24
     820:	99 f1       	breq	.+102    	; 0x888 <__vector_13+0x2a8>
      {
        ADCSRA &= ~(1 << ADEN);
        ADMUX = adc_muxes[working_LED]; 
        ADCSRA |= (1 << ADEN);
      } else {
        working_LED = 2;
     822:	e0 93 6a 00 	sts	0x006A, r30
     826:	e2 e0       	ldi	r30, 0x02	; 2
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	46 cf       	rjmp	.-372    	; 0x6b8 <__vector_13+0xd8>
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
        {
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
     82c:	83 2f       	mov	r24, r19
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	66 e1       	ldi	r22, 0x16	; 22
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	41 d6       	rcall	.+3202   	; 0x14b8 <__mulhi3>
     836:	fc 01       	movw	r30, r24
     838:	e5 57       	subi	r30, 0x75	; 117
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	04 88       	ldd	r0, Z+20	; 0x14
     83e:	f5 89       	ldd	r31, Z+21	; 0x15
     840:	e0 2d       	mov	r30, r0
     842:	10 82       	st	Z, r1
     844:	30 91 6a 00 	lds	r19, 0x006A
     848:	2c cf       	rjmp	.-424    	; 0x6a2 <__vector_13+0xc2>
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
        {        
          if (adc_val >= LOW_BATTERY_WARN) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     84a:	25 35       	cpi	r18, 0x55	; 85
     84c:	18 f1       	brcs	.+70     	; 0x894 <__vector_13+0x2b4>
          {
           // killit = 1;
            if (low_bat_noise > 0)
     84e:	80 91 66 00 	lds	r24, 0x0066
     852:	88 23       	and	r24, r24
     854:	29 f0       	breq	.+10     	; 0x860 <__vector_13+0x280>
            {
              low_bat_noise--;
     856:	80 91 66 00 	lds	r24, 0x0066
     85a:	81 50       	subi	r24, 0x01	; 1
     85c:	80 93 66 00 	sts	0x0066, r24
            {
              low_bat_noise++;
            }   
          }

          if (low_bat_noise < 20)
     860:	80 91 66 00 	lds	r24, 0x0066
     864:	84 31       	cpi	r24, 0x14	; 20
     866:	58 f5       	brcc	.+86     	; 0x8be <__vector_13+0x2de>
          {
            LowBatt = 1;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 77 00 	sts	0x0077, r24
          } else {
            LowBatt = 0;
          }

                
          if (adc_val >= LOW_BATTERY_CUTOFF) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     86e:	29 35       	cpi	r18, 0x59	; 89
     870:	d8 f0       	brcs	.+54     	; 0x8a8 <__vector_13+0x2c8>
          {
            if (vbat_cut_noise > 0)
     872:	80 91 67 00 	lds	r24, 0x0067
     876:	88 23       	and	r24, r24
     878:	29 f1       	breq	.+74     	; 0x8c4 <__vector_13+0x2e4>
            {
              vbat_cut_noise--;
     87a:	80 91 67 00 	lds	r24, 0x0067
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	80 93 67 00 	sts	0x0067, r24
     884:	32 e0       	ldi	r19, 0x02	; 2
     886:	0d cf       	rjmp	.-486    	; 0x6a2 <__vector_13+0xc2>
    if (working_LED == 2)
    {
      battery_delayer++;
      if (battery_delayer == 1024)
      {
        ADCSRA &= ~(1 << ADEN);
     888:	37 98       	cbi	0x06, 7	; 6
        ADMUX = adc_muxes[working_LED]; 
     88a:	80 91 86 00 	lds	r24, 0x0086
     88e:	87 b9       	out	0x07, r24	; 7
        ADCSRA |= (1 << ADEN);
     890:	37 9a       	sbi	0x06, 7	; 6
     892:	11 cf       	rjmp	.-478    	; 0x6b6 <__vector_13+0xd6>
              low_bat_noise--;
            }                         
         
            
          } else {
            if (low_bat_noise < 255)
     894:	80 91 66 00 	lds	r24, 0x0066
     898:	8f 3f       	cpi	r24, 0xFF	; 255
     89a:	11 f3       	breq	.-60     	; 0x860 <__vector_13+0x280>
            {
              low_bat_noise++;
     89c:	80 91 66 00 	lds	r24, 0x0066
     8a0:	8f 5f       	subi	r24, 0xFF	; 255
     8a2:	80 93 66 00 	sts	0x0066, r24
     8a6:	dc cf       	rjmp	.-72     	; 0x860 <__vector_13+0x280>
            } else {
              killit = 1;
            }
          } else {
            
            if (vbat_cut_noise < 255)
     8a8:	80 91 67 00 	lds	r24, 0x0067
     8ac:	8f 3f       	cpi	r24, 0xFF	; 255
     8ae:	29 f0       	breq	.+10     	; 0x8ba <__vector_13+0x2da>
            {
              vbat_cut_noise++;
     8b0:	80 91 67 00 	lds	r24, 0x0067
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 93 67 00 	sts	0x0067, r24
     8ba:	32 e0       	ldi	r19, 0x02	; 2
     8bc:	f2 ce       	rjmp	.-540    	; 0x6a2 <__vector_13+0xc2>

          if (low_bat_noise < 20)
          {
            LowBatt = 1;
          } else {
            LowBatt = 0;
     8be:	10 92 77 00 	sts	0x0077, r1
     8c2:	d5 cf       	rjmp	.-86     	; 0x86e <__vector_13+0x28e>
          {
            if (vbat_cut_noise > 0)
            {
              vbat_cut_noise--;
            } else {
              killit = 1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 76 00 	sts	0x0076, r24
     8ca:	32 e0       	ldi	r19, 0x02	; 2
     8cc:	ea ce       	rjmp	.-556    	; 0x6a2 <__vector_13+0xc2>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer++;
            } else {         
              LEDS[working_LED].pwm_dither++;
     8ce:	84 2f       	mov	r24, r20
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	66 e1       	ldi	r22, 0x16	; 22
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	f0 d5       	rcall	.+3040   	; 0x14b8 <__mulhi3>
     8d8:	dc 01       	movw	r26, r24
     8da:	a5 57       	subi	r26, 0x75	; 117
     8dc:	bf 4f       	sbci	r27, 0xFF	; 255
     8de:	53 96       	adiw	r26, 0x13	; 19
     8e0:	1c 91       	ld	r17, X
     8e2:	1f 5f       	subi	r17, 0xFF	; 255
     8e4:	84 2f       	mov	r24, r20
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	66 e1       	ldi	r22, 0x16	; 22
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	e5 d5       	rcall	.+3018   	; 0x14b8 <__mulhi3>
     8ee:	dc 01       	movw	r26, r24
     8f0:	a5 57       	subi	r26, 0x75	; 117
     8f2:	bf 4f       	sbci	r27, 0xFF	; 255
     8f4:	53 96       	adiw	r26, 0x13	; 19
     8f6:	1c 93       	st	X, r17
     8f8:	53 97       	sbiw	r26, 0x13	; 19
              if (LEDS[working_LED].pwm_dither > 15)
     8fa:	10 31       	cpi	r17, 0x10	; 16
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__vector_13+0x320>
     8fe:	67 cf       	rjmp	.-306    	; 0x7ce <__vector_13+0x1ee>
              {
                LEDS[working_LED].pwm_buffer++;
     900:	84 2f       	mov	r24, r20
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	66 e1       	ldi	r22, 0x16	; 22
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	d7 d5       	rcall	.+2990   	; 0x14b8 <__mulhi3>
     90a:	dc 01       	movw	r26, r24
     90c:	a5 57       	subi	r26, 0x75	; 117
     90e:	bf 4f       	sbci	r27, 0xFF	; 255
     910:	84 2f       	mov	r24, r20
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	66 e1       	ldi	r22, 0x16	; 22
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	cf d5       	rcall	.+2974   	; 0x14b8 <__mulhi3>
     91a:	85 57       	subi	r24, 0x75	; 117
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	ec 01       	movw	r28, r24
     920:	8a 89       	ldd	r24, Y+18	; 0x12
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	52 96       	adiw	r26, 0x12	; 18
     926:	8c 93       	st	X, r24
                LEDS[working_LED].pwm_dither = 0;
     928:	84 2f       	mov	r24, r20
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	66 e1       	ldi	r22, 0x16	; 22
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	c3 d5       	rcall	.+2950   	; 0x14b8 <__mulhi3>
     932:	dc 01       	movw	r26, r24
     934:	a5 57       	subi	r26, 0x75	; 117
     936:	bf 4f       	sbci	r27, 0xFF	; 255
     938:	53 96       	adiw	r26, 0x13	; 19
     93a:	1c 92       	st	X, r1
     93c:	53 97       	sbiw	r26, 0x13	; 19
     93e:	47 cf       	rjmp	.-370    	; 0x7ce <__vector_13+0x1ee>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer--;
            } else {         
              LEDS[working_LED].pwm_dither--;
     940:	83 2f       	mov	r24, r19
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	66 e1       	ldi	r22, 0x16	; 22
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	b7 d5       	rcall	.+2926   	; 0x14b8 <__mulhi3>
     94a:	dc 01       	movw	r26, r24
     94c:	a5 57       	subi	r26, 0x75	; 117
     94e:	bf 4f       	sbci	r27, 0xFF	; 255
     950:	53 96       	adiw	r26, 0x13	; 19
     952:	1c 91       	ld	r17, X
     954:	11 50       	subi	r17, 0x01	; 1
     956:	83 2f       	mov	r24, r19
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	66 e1       	ldi	r22, 0x16	; 22
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	ac d5       	rcall	.+2904   	; 0x14b8 <__mulhi3>
     960:	dc 01       	movw	r26, r24
     962:	a5 57       	subi	r26, 0x75	; 117
     964:	bf 4f       	sbci	r27, 0xFF	; 255
     966:	53 96       	adiw	r26, 0x13	; 19
     968:	1c 93       	st	X, r17
     96a:	53 97       	sbiw	r26, 0x13	; 19
              if (LEDS[working_LED].pwm_dither > 250) //wrapped at zero
     96c:	1b 3f       	cpi	r17, 0xFB	; 251
     96e:	08 f4       	brcc	.+2      	; 0x972 <__vector_13+0x392>
     970:	02 cf       	rjmp	.-508    	; 0x776 <__vector_13+0x196>
              {
                LEDS[working_LED].pwm_buffer--;
     972:	83 2f       	mov	r24, r19
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	66 e1       	ldi	r22, 0x16	; 22
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	9e d5       	rcall	.+2876   	; 0x14b8 <__mulhi3>
     97c:	dc 01       	movw	r26, r24
     97e:	a5 57       	subi	r26, 0x75	; 117
     980:	bf 4f       	sbci	r27, 0xFF	; 255
     982:	83 2f       	mov	r24, r19
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	66 e1       	ldi	r22, 0x16	; 22
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	96 d5       	rcall	.+2860   	; 0x14b8 <__mulhi3>
     98c:	85 57       	subi	r24, 0x75	; 117
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	ec 01       	movw	r28, r24
     992:	8a 89       	ldd	r24, Y+18	; 0x12
     994:	81 50       	subi	r24, 0x01	; 1
     996:	52 96       	adiw	r26, 0x12	; 18
     998:	8c 93       	st	X, r24
                LEDS[working_LED].pwm_dither = 15;
     99a:	83 2f       	mov	r24, r19
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	66 e1       	ldi	r22, 0x16	; 22
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8a d5       	rcall	.+2836   	; 0x14b8 <__mulhi3>
     9a4:	dc 01       	movw	r26, r24
     9a6:	a5 57       	subi	r26, 0x75	; 117
     9a8:	bf 4f       	sbci	r27, 0xFF	; 255
     9aa:	8f e0       	ldi	r24, 0x0F	; 15
     9ac:	53 96       	adiw	r26, 0x13	; 19
     9ae:	8c 93       	st	X, r24
     9b0:	53 97       	sbiw	r26, 0x13	; 19
     9b2:	e1 ce       	rjmp	.-574    	; 0x776 <__vector_13+0x196>

000009b4 <__vector_11>:

  
}

ISR(TIM0_OVF_vect)
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
  static uint8_t dither;
  if (dither > 15)
     9c6:	80 91 7a 00 	lds	r24, 0x007A
     9ca:	80 31       	cpi	r24, 0x10	; 16
     9cc:	00 f1       	brcs	.+64     	; 0xa0e <__vector_11+0x5a>
  {
    dither = 0;
     9ce:	10 92 7a 00 	sts	0x007A, r1
  } else {   
    dither++;
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     9d2:	80 e0       	ldi	r24, 0x00	; 0
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
     9d4:	e0 91 9f 00 	lds	r30, 0x009F
     9d8:	f0 91 a0 00 	lds	r31, 0x00A0
     9dc:	90 91 9d 00 	lds	r25, 0x009D
     9e0:	9f 5f       	subi	r25, 0xFF	; 255
     9e2:	90 83       	st	Z, r25
  }

  if (LEDS[LED_R].pwm_dither < dither)
     9e4:	90 91 b4 00 	lds	r25, 0x00B4
     9e8:	98 17       	cp	r25, r24
     9ea:	18 f1       	brcs	.+70     	; 0xa32 <__vector_11+0x7e>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
  }  else  {
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
     9ec:	e0 91 b5 00 	lds	r30, 0x00B5
     9f0:	f0 91 b6 00 	lds	r31, 0x00B6
     9f4:	80 91 b3 00 	lds	r24, 0x00B3
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	80 83       	st	Z, r24
  }      
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti
  static uint8_t dither;
  if (dither > 15)
  {
    dither = 0;
  } else {   
    dither++;
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	80 93 7a 00 	sts	0x007A, r24
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     a14:	90 91 9e 00 	lds	r25, 0x009E
     a18:	98 17       	cp	r25, r24
     a1a:	e0 f6       	brcc	.-72     	; 0x9d4 <__vector_11+0x20>
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
     a1c:	e0 91 9f 00 	lds	r30, 0x009F
     a20:	f0 91 a0 00 	lds	r31, 0x00A0
     a24:	90 91 9d 00 	lds	r25, 0x009D
     a28:	90 83       	st	Z, r25
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
  }

  if (LEDS[LED_R].pwm_dither < dither)
     a2a:	90 91 b4 00 	lds	r25, 0x00B4
     a2e:	98 17       	cp	r25, r24
     a30:	e8 f6       	brcc	.-70     	; 0x9ec <__vector_11+0x38>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
     a32:	e0 91 b5 00 	lds	r30, 0x00B5
     a36:	f0 91 b6 00 	lds	r31, 0x00B6
     a3a:	80 91 b3 00 	lds	r24, 0x00B3
     a3e:	80 83       	st	Z, r24
     a40:	dd cf       	rjmp	.-70     	; 0x9fc <__vector_11+0x48>

00000a42 <__vector_8>:
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
  }      
}

ISR(TIM1_OVF_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31

static uint8_t ISR_counter;
  ISR_counter++;
     a64:	40 91 79 00 	lds	r20, 0x0079
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	40 93 79 00 	sts	0x0079, r20
  //++;
  if (debounce == 1)
     a6e:	80 91 6c 00 	lds	r24, 0x006C
  {

    
  }
  if (mode_changed > 0)
     a72:	80 91 68 00 	lds	r24, 0x0068
     a76:	88 23       	and	r24, r24
     a78:	29 f0       	breq	.+10     	; 0xa84 <__vector_8+0x42>
  {
    mode_changed--;
     a7a:	80 91 68 00 	lds	r24, 0x0068
     a7e:	81 50       	subi	r24, 0x01	; 1
     a80:	80 93 68 00 	sts	0x0068, r24
  }
  
  if (debounce > 0)
     a84:	80 91 6c 00 	lds	r24, 0x006C
     a88:	88 23       	and	r24, r24
     a8a:	51 f0       	breq	.+20     	; 0xaa0 <__vector_8+0x5e>
    {
      debounce--;
     a8c:	80 91 6c 00 	lds	r24, 0x006C
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	80 93 6c 00 	sts	0x006C, r24
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
     a96:	80 91 6c 00 	lds	r24, 0x006C
     a9a:	88 23       	and	r24, r24
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <__vector_8+0x5e>
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <__vector_8+0xec>
        } else {
          if (button_state == DOWN) //needed in case the torch is running and the charger is connected
          {
          //  charging = 0;
            button_up();
            button_state = UP;
     aa0:	20 91 e3 00 	lds	r18, 0x00E3
     aa4:	30 91 e4 00 	lds	r19, 0x00E4
          }
        }
      }
    }
  
  if (button_state == DOWN) 
     aa8:	21 30       	cpi	r18, 0x01	; 1
     aaa:	31 05       	cpc	r19, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <__vector_8+0x6e>
     aae:	59 c0       	rjmp	.+178    	; 0xb62 <__vector_8+0x120>
     ab0:	f0 91 73 00 	lds	r31, 0x0073
    killit = 1;
  }
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
     ab4:	ff 23       	and	r31, r31
     ab6:	29 f0       	breq	.+10     	; 0xac2 <__vector_8+0x80>
     ab8:	84 2f       	mov	r24, r20
     aba:	68 e7       	ldi	r22, 0x78	; 120
     abc:	0f d5       	rcall	.+2590   	; 0x14dc <__udivmodqi4>
     abe:	99 23       	and	r25, r25
     ac0:	11 f1       	breq	.+68     	; 0xb06 <__vector_8+0xc4>
        killit = 1;      
      } 
    }
  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
     ac2:	80 91 76 00 	lds	r24, 0x0076
     ac6:	88 23       	and	r24, r24
     ac8:	29 f4       	brne	.+10     	; 0xad4 <__vector_8+0x92>
     aca:	80 91 77 00 	lds	r24, 0x0077
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <__vector_8+0x92>
     ad2:	f8 c0       	rjmp	.+496    	; 0xcc4 <__vector_8+0x282>


    //static uint8_t current_channel = 0;

    static uint8_t seconds_counter=0;
    if (ISR_counter % 128 == 0)
     ad4:	4f 77       	andi	r20, 0x7F	; 127
     ad6:	29 f4       	brne	.+10     	; 0xae2 <__vector_8+0xa0>
    {
      seconds_counter++;
     ad8:	80 91 78 00 	lds	r24, 0x0078
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	80 93 78 00 	sts	0x0078, r24
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
   */// }
  //} 
   ADCSRA |= (1 << ADSC); // take another sample
     ae2:	36 9a       	sbi	0x06, 6	; 6

}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
  {
    if (runtime < 255)
     b06:	80 91 74 00 	lds	r24, 0x0074
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	d1 f2       	breq	.-76     	; 0xac2 <__vector_8+0x80>
    {
      runtime++;
     b0e:	8f 5f       	subi	r24, 0xFF	; 255
     b10:	80 93 74 00 	sts	0x0074, r24
      if ((shop_flag == INSTORE) && (runtime > 10))  
     b14:	20 91 87 00 	lds	r18, 0x0087
     b18:	30 91 88 00 	lds	r19, 0x0088
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	81 f6       	brne	.-96     	; 0xac2 <__vector_8+0x80>
     b22:	8b 30       	cpi	r24, 0x0B	; 11
     b24:	70 f2       	brcs	.-100    	; 0xac2 <__vector_8+0x80>
      { 
        killit = 1;      
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 76 00 	sts	0x0076, r24
     b2c:	ca cf       	rjmp	.-108    	; 0xac2 <__vector_8+0x80>
  if (debounce > 0)
    {
      debounce--;
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
      {
        PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     b2e:	80 b5       	in	r24, 0x20	; 32
     b30:	83 60       	ori	r24, 0x03	; 3
     b32:	80 bd       	out	0x20, r24	; 32
        
        if (!C_CHECKBIT(CHARGE))  //active low, button is pressed
     b34:	b1 9b       	sbis	0x16, 1	; 22
     b36:	d3 c0       	rjmp	.+422    	; 0xcde <__vector_8+0x29c>
          if (charge_from_boot == 0)
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
          }
        } else {
          if (charging == 1)
     b38:	80 91 6f 00 	lds	r24, 0x006F
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__vector_8+0x100>
     b40:	26 c1       	rjmp	.+588    	; 0xd8e <__vector_8+0x34c>
            killit = 1;
            charge_from_boot = 0;
          } 
        }
        
        if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed
     b42:	b0 99       	sbic	0x16, 0	; 22
     b44:	e6 c0       	rjmp	.+460    	; 0xd12 <__vector_8+0x2d0>
        {
          if (button_state == UP) //needed in case the torch is running and the charger is connected
     b46:	20 91 e3 00 	lds	r18, 0x00E3
     b4a:	30 91 e4 00 	lds	r19, 0x00E4
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	09 f0       	breq	.+2      	; 0xb56 <__vector_8+0x114>
     b54:	a9 cf       	rjmp	.-174    	; 0xaa8 <__vector_8+0x66>
          {
          //  charging = 0;
            button_down();
            button_state = DOWN;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	90 93 e4 00 	sts	0x00E4, r25
     b5e:	80 93 e3 00 	sts	0x00E3, r24
      }
    }
  
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
     b62:	20 91 71 00 	lds	r18, 0x0071
     b66:	30 91 72 00 	lds	r19, 0x0072
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	c9 01       	movw	r24, r18
     b70:	42 2f       	mov	r20, r18
     b72:	e9 2f       	mov	r30, r25
     b74:	30 93 72 00 	sts	0x0072, r19
     b78:	20 93 71 00 	sts	0x0071, r18
    runtime = 0; // only counts time in a set state
     b7c:	10 92 74 00 	sts	0x0074, r1

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     b80:	80 91 89 00 	lds	r24, 0x0089
     b84:	90 91 8a 00 	lds	r25, 0x008A
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	91 05       	cpc	r25, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <__vector_8+0x14e>
     b8e:	d1 c0       	rjmp	.+418    	; 0xd32 <__vector_8+0x2f0>
      {
         current_setpoint = 1;
      }
      advance_LED();
    }
if ((button_hold_down_time % 64 == 0) && (button_hold_down_time < 1024) && (mode == NORMAL))
     b90:	c9 01       	movw	r24, r18
     b92:	8f 73       	andi	r24, 0x3F	; 63
     b94:	90 70       	andi	r25, 0x00	; 0
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	b9 f4       	brne	.+46     	; 0xbc8 <__vector_8+0x186>
     b9a:	54 e0       	ldi	r21, 0x04	; 4
     b9c:	20 30       	cpi	r18, 0x00	; 0
     b9e:	35 07       	cpc	r19, r21
     ba0:	28 f5       	brcc	.+74     	; 0xbec <__vector_8+0x1aa>
     ba2:	80 91 89 00 	lds	r24, 0x0089
     ba6:	90 91 8a 00 	lds	r25, 0x008A
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	69 f4       	brne	.+26     	; 0xbc8 <__vector_8+0x186>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //skip the zero in advance_LED
     bae:	80 91 73 00 	lds	r24, 0x0073
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__vector_8+0x178>
    {
       current_setpoint = 0;
     bb6:	10 92 73 00 	sts	0x0073, r1
    }
    advance_LED();
     bba:	5e db       	rcall	.-2372   	; 0x278 <advance_LED>
     bbc:	40 91 71 00 	lds	r20, 0x0071
     bc0:	e0 91 72 00 	lds	r30, 0x0072
     bc4:	24 2f       	mov	r18, r20
     bc6:	3e 2f       	mov	r19, r30
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
     bc8:	2f 3f       	cpi	r18, 0xFF	; 255
     bca:	31 05       	cpc	r19, r1
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__vector_8+0x18e>
     bce:	70 f4       	brcc	.+28     	; 0xbec <__vector_8+0x1aa>
     bd0:	c9 01       	movw	r24, r18
     bd2:	62 e3       	ldi	r22, 0x32	; 50
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	8e d4       	rcall	.+2332   	; 0x14f4 <__udivmodhi4>
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	41 f4       	brne	.+16     	; 0xbec <__vector_8+0x1aa>
     bdc:	80 91 89 00 	lds	r24, 0x0089
     be0:	90 91 8a 00 	lds	r25, 0x008A
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <__vector_8+0x1aa>
     bea:	bb c0       	rjmp	.+374    	; 0xd62 <__vector_8+0x320>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     bec:	c9 01       	movw	r24, r18
     bee:	81 50       	subi	r24, 0x01	; 1
     bf0:	91 40       	sbci	r25, 0x01	; 1
     bf2:	54 e0       	ldi	r21, 0x04	; 4
     bf4:	8f 3f       	cpi	r24, 0xFF	; 255
     bf6:	95 07       	cpc	r25, r21
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__vector_8+0x1ba>
     bfa:	4c c0       	rjmp	.+152    	; 0xc94 <__vector_8+0x252>
     bfc:	f0 91 73 00 	lds	r31, 0x0073
      current_setpoint = NUM_OF_LED_STATES; 
      advance_LED();
    }
  }
     
  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag != INSTORE))
     c00:	c9 01       	movw	r24, r18
     c02:	62 e3       	ldi	r22, 0x32	; 50
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	76 d4       	rcall	.+2284   	; 0x14f4 <__udivmodhi4>
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f5       	brne	.+116    	; 0xc80 <__vector_8+0x23e>
     c0c:	86 e0       	ldi	r24, 0x06	; 6
     c0e:	21 30       	cpi	r18, 0x01	; 1
     c10:	38 07       	cpc	r19, r24
     c12:	08 f4       	brcc	.+2      	; 0xc16 <__vector_8+0x1d4>
     c14:	76 c0       	rjmp	.+236    	; 0xd02 <__vector_8+0x2c0>
     c16:	57 e0       	ldi	r21, 0x07	; 7
     c18:	2e 3f       	cpi	r18, 0xFE	; 254
     c1a:	35 07       	cpc	r19, r21
     c1c:	d8 f4       	brcc	.+54     	; 0xc54 <__vector_8+0x212>
     c1e:	80 91 87 00 	lds	r24, 0x0087
     c22:	90 91 88 00 	lds	r25, 0x0088
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	09 f4       	brne	.+2      	; 0xc2c <__vector_8+0x1ea>
     c2a:	6b c0       	rjmp	.+214    	; 0xd02 <__vector_8+0x2c0>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     c2c:	f5 30       	cpi	r31, 0x05	; 5
     c2e:	18 f0       	brcs	.+6      	; 0xc36 <__vector_8+0x1f4>
    {
       current_setpoint = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     c36:	20 db       	rcall	.-2496   	; 0x278 <advance_LED>
  }  

  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END))
     c38:	20 91 71 00 	lds	r18, 0x0071
     c3c:	30 91 72 00 	lds	r19, 0x0072
     c40:	c9 01       	movw	r24, r18
     c42:	42 2f       	mov	r20, r18
     c44:	e9 2f       	mov	r30, r25
     c46:	62 e3       	ldi	r22, 0x32	; 50
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	54 d4       	rcall	.+2216   	; 0x14f4 <__udivmodhi4>
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	b1 f4       	brne	.+44     	; 0xc7c <__vector_8+0x23a>
     c50:	f0 91 73 00 	lds	r31, 0x0073
     c54:	80 e1       	ldi	r24, 0x10	; 16
     c56:	21 30       	cpi	r18, 0x01	; 1
     c58:	38 07       	cpc	r19, r24
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <__vector_8+0x21c>
     c5c:	52 c0       	rjmp	.+164    	; 0xd02 <__vector_8+0x2c0>
     c5e:	52 e1       	ldi	r21, 0x12	; 18
     c60:	20 30       	cpi	r18, 0x00	; 0
     c62:	35 07       	cpc	r19, r21
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__vector_8+0x226>
     c66:	4d c0       	rjmp	.+154    	; 0xd02 <__vector_8+0x2c0>
  {
    if (current_setpoint >= NUM_OF_LED_STATES -1) //use the two lowest powers.
     c68:	f5 30       	cpi	r31, 0x05	; 5
     c6a:	18 f0       	brcs	.+6      	; 0xc72 <__vector_8+0x230>
    {
       current_setpoint = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     c72:	02 db       	rcall	.-2556   	; 0x278 <advance_LED>
     c74:	20 91 71 00 	lds	r18, 0x0071
     c78:	30 91 72 00 	lds	r19, 0x0072
     c7c:	f0 91 73 00 	lds	r31, 0x0073
  }

  if ((button_hold_down_time > BUTTON_STUCK))
     c80:	83 e1       	ldi	r24, 0x13	; 19
     c82:	29 38       	cpi	r18, 0x89	; 137
     c84:	38 07       	cpc	r19, r24
     c86:	18 f0       	brcs	.+6      	; 0xc8e <__vector_8+0x24c>
  {
    killit = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 76 00 	sts	0x0076, r24
     c8e:	40 91 79 00 	lds	r20, 0x0079
     c92:	10 cf       	rjmp	.-480    	; 0xab4 <__vector_8+0x72>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     c94:	80 91 89 00 	lds	r24, 0x0089
     c98:	90 91 8a 00 	lds	r25, 0x008A
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	91 05       	cpc	r25, r1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <__vector_8+0x262>
     ca2:	ac cf       	rjmp	.-168    	; 0xbfc <__vector_8+0x1ba>
  {
    if (current_setpoint != 0)
     ca4:	f0 91 73 00 	lds	r31, 0x0073
     ca8:	ff 23       	and	r31, r31
     caa:	09 f4       	brne	.+2      	; 0xcae <__vector_8+0x26c>
     cac:	a9 cf       	rjmp	.-174    	; 0xc00 <__vector_8+0x1be>
    {
      current_setpoint = NUM_OF_LED_STATES; 
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     cb4:	e1 da       	rcall	.-2622   	; 0x278 <advance_LED>
     cb6:	40 91 71 00 	lds	r20, 0x0071
     cba:	e0 91 72 00 	lds	r30, 0x0072
     cbe:	24 2f       	mov	r18, r20
     cc0:	3e 2f       	mov	r19, r30
     cc2:	9c cf       	rjmp	.-200    	; 0xbfc <__vector_8+0x1ba>
    }
  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
     cc4:	44 23       	and	r20, r20
     cc6:	09 f4       	brne	.+2      	; 0xcca <__vector_8+0x288>
     cc8:	5b c0       	rjmp	.+182    	; 0xd80 <__vector_8+0x33e>
    {
      last_setpoint = current_setpoint;   //save our position
      current_setpoint = NUM_OF_LED_STATES-1;
      advance_LED();
     }
    if (ISR_counter == 5)   //this should be about .5 of a second
     cca:	45 30       	cpi	r20, 0x05	; 5
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <__vector_8+0x28e>
     cce:	02 cf       	rjmp	.-508    	; 0xad4 <__vector_8+0x92>
    {
      current_setpoint = last_setpoint -1; //restore the set point
     cd0:	80 91 75 00 	lds	r24, 0x0075
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     cda:	ce da       	rcall	.-2660   	; 0x278 <advance_LED>
     cdc:	02 cf       	rjmp	.-508    	; 0xae2 <__vector_8+0xa0>
      {
        PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
        
        if (!C_CHECKBIT(CHARGE))  //active low, button is pressed
        {
          charging = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 6f 00 	sts	0x006F, r24
          if (charge_from_boot == 0)
     ce4:	80 91 70 00 	lds	r24, 0x0070
     ce8:	88 23       	and	r24, r24
     cea:	09 f0       	breq	.+2      	; 0xcee <__vector_8+0x2ac>
     cec:	2a cf       	rjmp	.-428    	; 0xb42 <__vector_8+0x100>
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	28 e1       	ldi	r18, 0x18	; 24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	a8 95       	wdr
     cfa:	21 bd       	out	0x21, r18	; 33
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	81 bd       	out	0x21, r24	; 33
     d00:	20 cf       	rjmp	.-448    	; 0xb42 <__vector_8+0x100>
       current_setpoint = 1;
    }
    advance_LED();
  }  

  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END))
     d02:	24 2f       	mov	r18, r20
     d04:	3e 2f       	mov	r19, r30
       current_setpoint = 1;
    }
    advance_LED();
  }

  if ((button_hold_down_time > BUTTON_STUCK))
     d06:	83 e1       	ldi	r24, 0x13	; 19
     d08:	29 38       	cpi	r18, 0x89	; 137
     d0a:	38 07       	cpc	r19, r24
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__vector_8+0x2ce>
     d0e:	bc cf       	rjmp	.-136    	; 0xc88 <__vector_8+0x246>
     d10:	be cf       	rjmp	.-132    	; 0xc8e <__vector_8+0x24c>
          //  charging = 0;
            button_down();
            button_state = DOWN;
          }
        } else {
          if (button_state == DOWN) //needed in case the torch is running and the charger is connected
     d12:	20 91 e3 00 	lds	r18, 0x00E3
     d16:	30 91 e4 00 	lds	r19, 0x00E4
     d1a:	21 30       	cpi	r18, 0x01	; 1
     d1c:	31 05       	cpc	r19, r1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_8+0x2e0>
     d20:	c7 ce       	rjmp	.-626    	; 0xab0 <__vector_8+0x6e>
          {
          //  charging = 0;
            button_up();
     d22:	29 db       	rcall	.-2478   	; 0x376 <button_up>
            button_state = UP;
     d24:	10 92 e4 00 	sts	0x00E4, r1
     d28:	10 92 e3 00 	sts	0x00E3, r1
     d2c:	40 91 79 00 	lds	r20, 0x0079
     d30:	bf ce       	rjmp	.-642    	; 0xab0 <__vector_8+0x6e>
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     d32:	23 30       	cpi	r18, 0x03	; 3
     d34:	31 05       	cpc	r19, r1
     d36:	91 f1       	breq	.+100    	; 0xd9c <__vector_8+0x35a>
      advance_LED();
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     d38:	c9 01       	movw	r24, r18
     d3a:	8f 73       	andi	r24, 0x3F	; 63
     d3c:	90 70       	andi	r25, 0x00	; 0
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	09 f0       	breq	.+2      	; 0xd44 <__vector_8+0x302>
     d42:	42 cf       	rjmp	.-380    	; 0xbc8 <__vector_8+0x186>
    {
      if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two highest powers.
     d44:	80 91 73 00 	lds	r24, 0x0073
     d48:	85 30       	cpi	r24, 0x05	; 5
     d4a:	18 f0       	brcs	.+6      	; 0xd52 <__vector_8+0x310>
      {
         current_setpoint = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 73 00 	sts	0x0073, r24
      }
      advance_LED();
     d52:	92 da       	rcall	.-2780   	; 0x278 <advance_LED>
     d54:	40 91 71 00 	lds	r20, 0x0071
     d58:	e0 91 72 00 	lds	r30, 0x0072
     d5c:	24 2f       	mov	r18, r20
     d5e:	3e 2f       	mov	r19, r30
     d60:	17 cf       	rjmp	.-466    	; 0xb90 <__vector_8+0x14e>
    advance_LED();
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     d62:	80 91 73 00 	lds	r24, 0x0073
     d66:	85 30       	cpi	r24, 0x05	; 5
     d68:	18 f0       	brcs	.+6      	; 0xd70 <__vector_8+0x32e>
    {
       current_setpoint = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     d70:	83 da       	rcall	.-2810   	; 0x278 <advance_LED>
     d72:	40 91 71 00 	lds	r20, 0x0071
     d76:	e0 91 72 00 	lds	r30, 0x0072
     d7a:	24 2f       	mov	r18, r20
     d7c:	3e 2f       	mov	r19, r30
     d7e:	36 cf       	rjmp	.-404    	; 0xbec <__vector_8+0x1aa>
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
    {
      last_setpoint = current_setpoint;   //save our position
     d80:	f0 93 75 00 	sts	0x0075, r31
      current_setpoint = NUM_OF_LED_STATES-1;
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     d8a:	76 da       	rcall	.-2836   	; 0x278 <advance_LED>
     d8c:	a5 ce       	rjmp	.-694    	; 0xad8 <__vector_8+0x96>
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
          }
        } else {
          if (charging == 1)
          {
            charging = 0;
     d8e:	10 92 6f 00 	sts	0x006F, r1
            killit = 1;
     d92:	80 93 76 00 	sts	0x0076, r24
            charge_from_boot = 0;
     d96:	10 92 70 00 	sts	0x0070, r1
     d9a:	d3 ce       	rjmp	.-602    	; 0xb42 <__vector_8+0x100>
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
    {
      current_setpoint = NUM_OF_LED_STATES - 1;
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     da2:	6a da       	rcall	.-2860   	; 0x278 <advance_LED>
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     da4:	80 91 89 00 	lds	r24, 0x0089
     da8:	90 91 8a 00 	lds	r25, 0x008A
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	89 f6       	brne	.-94     	; 0xd54 <__vector_8+0x312>
     db2:	40 91 71 00 	lds	r20, 0x0071
     db6:	e0 91 72 00 	lds	r30, 0x0072
     dba:	24 2f       	mov	r18, r20
     dbc:	3e 2f       	mov	r19, r30
     dbe:	bc cf       	rjmp	.-136    	; 0xd38 <__vector_8+0x2f6>

00000dc0 <__vector_3>:
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	8f 93       	push	r24
     dcc:	10 bc       	out	0x20, r1	; 32
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	80 93 6c 00 	sts	0x006C, r24
     dd4:	8f 91       	pop	r24
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <vfprintf>:
     de0:	a3 e1       	ldi	r26, 0x13	; 19
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e5 ef       	ldi	r30, 0xF5	; 245
     de6:	f6 e0       	ldi	r31, 0x06	; 6
     de8:	bb c3       	rjmp	.+1910   	; 0x1560 <__prologue_saves__>
     dea:	6c 01       	movw	r12, r24
     dec:	7f 87       	std	Y+15, r23	; 0x0f
     dee:	6e 87       	std	Y+14, r22	; 0x0e
     df0:	fc 01       	movw	r30, r24
     df2:	17 82       	std	Z+7, r1	; 0x07
     df4:	16 82       	std	Z+6, r1	; 0x06
     df6:	83 81       	ldd	r24, Z+3	; 0x03
     df8:	81 fd       	sbrc	r24, 1
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <vfprintf+0x24>
     dfc:	4e c3       	rjmp	.+1692   	; 0x149a <vfprintf+0x6ba>
     dfe:	4c 85       	ldd	r20, Y+12	; 0x0c
     e00:	5d 85       	ldd	r21, Y+13	; 0x0d
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <vfprintf+0x2c>
     e04:	1e 01       	movw	r2, r28
     e06:	08 94       	sec
     e08:	21 1c       	adc	r2, r1
     e0a:	31 1c       	adc	r3, r1
     e0c:	f6 01       	movw	r30, r12
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	ee 85       	ldd	r30, Y+14	; 0x0e
     e12:	ff 85       	ldd	r31, Y+15	; 0x0f
     e14:	93 fd       	sbrc	r25, 3
     e16:	85 91       	lpm	r24, Z+
     e18:	93 ff       	sbrs	r25, 3
     e1a:	81 91       	ld	r24, Z+
     e1c:	ff 87       	std	Y+15, r31	; 0x0f
     e1e:	ee 87       	std	Y+14, r30	; 0x0e
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <vfprintf+0x46>
     e24:	36 c3       	rjmp	.+1644   	; 0x1492 <vfprintf+0x6b2>
     e26:	85 32       	cpi	r24, 0x25	; 37
     e28:	41 f4       	brne	.+16     	; 0xe3a <vfprintf+0x5a>
     e2a:	93 fd       	sbrc	r25, 3
     e2c:	85 91       	lpm	r24, Z+
     e2e:	93 ff       	sbrs	r25, 3
     e30:	81 91       	ld	r24, Z+
     e32:	ff 87       	std	Y+15, r31	; 0x0f
     e34:	ee 87       	std	Y+14, r30	; 0x0e
     e36:	85 32       	cpi	r24, 0x25	; 37
     e38:	51 f4       	brne	.+20     	; 0xe4e <vfprintf+0x6e>
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	b6 01       	movw	r22, r12
     e3e:	4a 8b       	std	Y+18, r20	; 0x12
     e40:	5b 8b       	std	Y+19, r21	; 0x13
     e42:	b3 d4       	rcall	.+2406   	; 0x17aa <fputc>
     e44:	4a 89       	ldd	r20, Y+18	; 0x12
     e46:	5b 89       	ldd	r21, Y+19	; 0x13
     e48:	5d 87       	std	Y+13, r21	; 0x0d
     e4a:	4c 87       	std	Y+12, r20	; 0x0c
     e4c:	d8 cf       	rjmp	.-80     	; 0xdfe <vfprintf+0x1e>
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	ff 24       	eor	r15, r15
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	00 32       	cpi	r16, 0x20	; 32
     e56:	b0 f4       	brcc	.+44     	; 0xe84 <vfprintf+0xa4>
     e58:	8b 32       	cpi	r24, 0x2B	; 43
     e5a:	69 f0       	breq	.+26     	; 0xe76 <vfprintf+0x96>
     e5c:	8c 32       	cpi	r24, 0x2C	; 44
     e5e:	28 f4       	brcc	.+10     	; 0xe6a <vfprintf+0x8a>
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	51 f0       	breq	.+20     	; 0xe78 <vfprintf+0x98>
     e64:	83 32       	cpi	r24, 0x23	; 35
     e66:	71 f4       	brne	.+28     	; 0xe84 <vfprintf+0xa4>
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <vfprintf+0xa0>
     e6a:	8d 32       	cpi	r24, 0x2D	; 45
     e6c:	39 f0       	breq	.+14     	; 0xe7c <vfprintf+0x9c>
     e6e:	80 33       	cpi	r24, 0x30	; 48
     e70:	49 f4       	brne	.+18     	; 0xe84 <vfprintf+0xa4>
     e72:	01 60       	ori	r16, 0x01	; 1
     e74:	28 c0       	rjmp	.+80     	; 0xec6 <vfprintf+0xe6>
     e76:	02 60       	ori	r16, 0x02	; 2
     e78:	04 60       	ori	r16, 0x04	; 4
     e7a:	25 c0       	rjmp	.+74     	; 0xec6 <vfprintf+0xe6>
     e7c:	08 60       	ori	r16, 0x08	; 8
     e7e:	23 c0       	rjmp	.+70     	; 0xec6 <vfprintf+0xe6>
     e80:	00 61       	ori	r16, 0x10	; 16
     e82:	21 c0       	rjmp	.+66     	; 0xec6 <vfprintf+0xe6>
     e84:	07 fd       	sbrc	r16, 7
     e86:	2a c0       	rjmp	.+84     	; 0xedc <vfprintf+0xfc>
     e88:	28 2f       	mov	r18, r24
     e8a:	20 53       	subi	r18, 0x30	; 48
     e8c:	2a 30       	cpi	r18, 0x0A	; 10
     e8e:	78 f4       	brcc	.+30     	; 0xeae <vfprintf+0xce>
     e90:	06 ff       	sbrs	r16, 6
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0xc0>
     e94:	81 2f       	mov	r24, r17
     e96:	6a e0       	ldi	r22, 0x0A	; 10
     e98:	06 d3       	rcall	.+1548   	; 0x14a6 <__mulqi3>
     e9a:	18 2f       	mov	r17, r24
     e9c:	12 0f       	add	r17, r18
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <vfprintf+0xe6>
     ea0:	8f 2d       	mov	r24, r15
     ea2:	6a e0       	ldi	r22, 0x0A	; 10
     ea4:	00 d3       	rcall	.+1536   	; 0x14a6 <__mulqi3>
     ea6:	f8 2e       	mov	r15, r24
     ea8:	f2 0e       	add	r15, r18
     eaa:	00 62       	ori	r16, 0x20	; 32
     eac:	0c c0       	rjmp	.+24     	; 0xec6 <vfprintf+0xe6>
     eae:	8e 32       	cpi	r24, 0x2E	; 46
     eb0:	21 f4       	brne	.+8      	; 0xeba <vfprintf+0xda>
     eb2:	06 fd       	sbrc	r16, 6
     eb4:	ee c2       	rjmp	.+1500   	; 0x1492 <vfprintf+0x6b2>
     eb6:	00 64       	ori	r16, 0x40	; 64
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <vfprintf+0xe6>
     eba:	8c 36       	cpi	r24, 0x6C	; 108
     ebc:	11 f4       	brne	.+4      	; 0xec2 <vfprintf+0xe2>
     ebe:	00 68       	ori	r16, 0x80	; 128
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0xe6>
     ec2:	88 36       	cpi	r24, 0x68	; 104
     ec4:	59 f4       	brne	.+22     	; 0xedc <vfprintf+0xfc>
     ec6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ec8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eca:	93 fd       	sbrc	r25, 3
     ecc:	85 91       	lpm	r24, Z+
     ece:	93 ff       	sbrs	r25, 3
     ed0:	81 91       	ld	r24, Z+
     ed2:	ff 87       	std	Y+15, r31	; 0x0f
     ed4:	ee 87       	std	Y+14, r30	; 0x0e
     ed6:	88 23       	and	r24, r24
     ed8:	09 f0       	breq	.+2      	; 0xedc <vfprintf+0xfc>
     eda:	bc cf       	rjmp	.-136    	; 0xe54 <vfprintf+0x74>
     edc:	98 2f       	mov	r25, r24
     ede:	95 54       	subi	r25, 0x45	; 69
     ee0:	93 30       	cpi	r25, 0x03	; 3
     ee2:	18 f4       	brcc	.+6      	; 0xeea <vfprintf+0x10a>
     ee4:	00 61       	ori	r16, 0x10	; 16
     ee6:	80 5e       	subi	r24, 0xE0	; 224
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0x116>
     eea:	98 2f       	mov	r25, r24
     eec:	95 56       	subi	r25, 0x65	; 101
     eee:	93 30       	cpi	r25, 0x03	; 3
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <vfprintf+0x114>
     ef2:	8b c1       	rjmp	.+790    	; 0x120a <vfprintf+0x42a>
     ef4:	0f 7e       	andi	r16, 0xEF	; 239
     ef6:	06 ff       	sbrs	r16, 6
     ef8:	16 e0       	ldi	r17, 0x06	; 6
     efa:	6f e3       	ldi	r22, 0x3F	; 63
     efc:	e6 2e       	mov	r14, r22
     efe:	e0 22       	and	r14, r16
     f00:	85 36       	cpi	r24, 0x65	; 101
     f02:	19 f4       	brne	.+6      	; 0xf0a <vfprintf+0x12a>
     f04:	f0 e4       	ldi	r31, 0x40	; 64
     f06:	ef 2a       	or	r14, r31
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <vfprintf+0x138>
     f0a:	86 36       	cpi	r24, 0x66	; 102
     f0c:	19 f4       	brne	.+6      	; 0xf14 <vfprintf+0x134>
     f0e:	20 e8       	ldi	r18, 0x80	; 128
     f10:	e2 2a       	or	r14, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x138>
     f14:	11 11       	cpse	r17, r1
     f16:	11 50       	subi	r17, 0x01	; 1
     f18:	e7 fe       	sbrs	r14, 7
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <vfprintf+0x148>
     f1c:	1c 33       	cpi	r17, 0x3C	; 60
     f1e:	40 f4       	brcc	.+16     	; 0xf30 <vfprintf+0x150>
     f20:	91 2e       	mov	r9, r17
     f22:	93 94       	inc	r9
     f24:	27 e0       	ldi	r18, 0x07	; 7
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <vfprintf+0x15e>
     f28:	18 30       	cpi	r17, 0x08	; 8
     f2a:	30 f4       	brcc	.+12     	; 0xf38 <vfprintf+0x158>
     f2c:	21 2f       	mov	r18, r17
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x15c>
     f30:	27 e0       	ldi	r18, 0x07	; 7
     f32:	3c e3       	ldi	r19, 0x3C	; 60
     f34:	93 2e       	mov	r9, r19
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x15e>
     f38:	27 e0       	ldi	r18, 0x07	; 7
     f3a:	17 e0       	ldi	r17, 0x07	; 7
     f3c:	99 24       	eor	r9, r9
     f3e:	ca 01       	movw	r24, r20
     f40:	04 96       	adiw	r24, 0x04	; 4
     f42:	9d 87       	std	Y+13, r25	; 0x0d
     f44:	8c 87       	std	Y+12, r24	; 0x0c
     f46:	fa 01       	movw	r30, r20
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	a1 01       	movw	r20, r2
     f52:	09 2d       	mov	r16, r9
     f54:	3c d3       	rcall	.+1656   	; 0x15ce <__ftoa_engine>
     f56:	5c 01       	movw	r10, r24
     f58:	69 80       	ldd	r6, Y+1	; 0x01
     f5a:	26 2d       	mov	r18, r6
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	39 8b       	std	Y+17, r19	; 0x11
     f60:	28 8b       	std	Y+16, r18	; 0x10
     f62:	60 fe       	sbrs	r6, 0
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <vfprintf+0x18c>
     f66:	38 89       	ldd	r19, Y+16	; 0x10
     f68:	33 ff       	sbrs	r19, 3
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x198>
     f6c:	e1 fc       	sbrc	r14, 1
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <vfprintf+0x19c>
     f70:	e2 fe       	sbrs	r14, 2
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x1a0>
     f74:	00 e2       	ldi	r16, 0x20	; 32
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <vfprintf+0x1a2>
     f78:	0d e2       	ldi	r16, 0x2D	; 45
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <vfprintf+0x1a2>
     f7c:	0b e2       	ldi	r16, 0x2B	; 43
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <vfprintf+0x1a2>
     f80:	00 e0       	ldi	r16, 0x00	; 0
     f82:	88 89       	ldd	r24, Y+16	; 0x10
     f84:	99 89       	ldd	r25, Y+17	; 0x11
     f86:	8c 70       	andi	r24, 0x0C	; 12
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	a9 f1       	breq	.+106    	; 0xff8 <vfprintf+0x218>
     f8e:	00 23       	and	r16, r16
     f90:	11 f0       	breq	.+4      	; 0xf96 <vfprintf+0x1b6>
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <vfprintf+0x1b8>
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	8f 15       	cp	r24, r15
     f9a:	50 f4       	brcc	.+20     	; 0xfb0 <vfprintf+0x1d0>
     f9c:	f8 1a       	sub	r15, r24
     f9e:	e3 fc       	sbrc	r14, 3
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <vfprintf+0x1d2>
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	b6 01       	movw	r22, r12
     fa8:	00 d4       	rcall	.+2048   	; 0x17aa <fputc>
     faa:	fa 94       	dec	r15
     fac:	d1 f7       	brne	.-12     	; 0xfa2 <vfprintf+0x1c2>
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <vfprintf+0x1d2>
     fb0:	ff 24       	eor	r15, r15
     fb2:	00 23       	and	r16, r16
     fb4:	21 f0       	breq	.+8      	; 0xfbe <vfprintf+0x1de>
     fb6:	80 2f       	mov	r24, r16
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	b6 01       	movw	r22, r12
     fbc:	f6 d3       	rcall	.+2028   	; 0x17aa <fputc>
     fbe:	88 89       	ldd	r24, Y+16	; 0x10
     fc0:	83 fd       	sbrc	r24, 3
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <vfprintf+0x1ea>
     fc4:	06 e2       	ldi	r16, 0x26	; 38
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <vfprintf+0x204>
     fca:	02 e2       	ldi	r16, 0x22	; 34
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <vfprintf+0x204>
     fd0:	a1 14       	cp	r10, r1
     fd2:	b1 04       	cpc	r11, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <vfprintf+0x1f8>
     fd6:	80 52       	subi	r24, 0x20	; 32
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	b6 01       	movw	r22, r12
     fdc:	e6 d3       	rcall	.+1996   	; 0x17aa <fputc>
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <vfprintf+0x20e>
     fe4:	ae 2c       	mov	r10, r14
     fe6:	bb 24       	eor	r11, r11
     fe8:	90 e1       	ldi	r25, 0x10	; 16
     fea:	a9 22       	and	r10, r25
     fec:	bb 24       	eor	r11, r11
     fee:	f8 01       	movw	r30, r16
     ff0:	84 91       	lpm	r24, Z+
     ff2:	88 23       	and	r24, r24
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <vfprintf+0x1f0>
     ff6:	4a c2       	rjmp	.+1172   	; 0x148c <vfprintf+0x6ac>
     ff8:	e7 fe       	sbrs	r14, 7
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <vfprintf+0x238>
     ffc:	9a 0c       	add	r9, r10
     ffe:	f8 89       	ldd	r31, Y+16	; 0x10
    1000:	f4 ff       	sbrs	r31, 4
    1002:	04 c0       	rjmp	.+8      	; 0x100c <vfprintf+0x22c>
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	81 33       	cpi	r24, 0x31	; 49
    1008:	09 f4       	brne	.+2      	; 0x100c <vfprintf+0x22c>
    100a:	9a 94       	dec	r9
    100c:	19 14       	cp	r1, r9
    100e:	54 f5       	brge	.+84     	; 0x1064 <vfprintf+0x284>
    1010:	29 2d       	mov	r18, r9
    1012:	29 30       	cpi	r18, 0x09	; 9
    1014:	50 f5       	brcc	.+84     	; 0x106a <vfprintf+0x28a>
    1016:	2d c0       	rjmp	.+90     	; 0x1072 <vfprintf+0x292>
    1018:	e6 fc       	sbrc	r14, 6
    101a:	2b c0       	rjmp	.+86     	; 0x1072 <vfprintf+0x292>
    101c:	81 2f       	mov	r24, r17
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	8a 15       	cp	r24, r10
    1022:	9b 05       	cpc	r25, r11
    1024:	4c f0       	brlt	.+18     	; 0x1038 <vfprintf+0x258>
    1026:	3c ef       	ldi	r19, 0xFC	; 252
    1028:	a3 16       	cp	r10, r19
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	b3 06       	cpc	r11, r19
    102e:	24 f0       	brlt	.+8      	; 0x1038 <vfprintf+0x258>
    1030:	80 e8       	ldi	r24, 0x80	; 128
    1032:	e8 2a       	or	r14, r24
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <vfprintf+0x258>
    1036:	11 50       	subi	r17, 0x01	; 1
    1038:	11 23       	and	r17, r17
    103a:	49 f0       	breq	.+18     	; 0x104e <vfprintf+0x26e>
    103c:	e2 e0       	ldi	r30, 0x02	; 2
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	ec 0f       	add	r30, r28
    1042:	fd 1f       	adc	r31, r29
    1044:	e1 0f       	add	r30, r17
    1046:	f1 1d       	adc	r31, r1
    1048:	80 81       	ld	r24, Z
    104a:	80 33       	cpi	r24, 0x30	; 48
    104c:	a1 f3       	breq	.-24     	; 0x1036 <vfprintf+0x256>
    104e:	e7 fe       	sbrs	r14, 7
    1050:	10 c0       	rjmp	.+32     	; 0x1072 <vfprintf+0x292>
    1052:	91 2e       	mov	r9, r17
    1054:	93 94       	inc	r9
    1056:	81 2f       	mov	r24, r17
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a8 16       	cp	r10, r24
    105c:	b9 06       	cpc	r11, r25
    105e:	44 f4       	brge	.+16     	; 0x1070 <vfprintf+0x290>
    1060:	1a 19       	sub	r17, r10
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <vfprintf+0x292>
    1064:	99 24       	eor	r9, r9
    1066:	93 94       	inc	r9
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <vfprintf+0x292>
    106a:	98 e0       	ldi	r25, 0x08	; 8
    106c:	99 2e       	mov	r9, r25
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <vfprintf+0x292>
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	e7 fe       	sbrs	r14, 7
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <vfprintf+0x2a4>
    1076:	1a 14       	cp	r1, r10
    1078:	1b 04       	cpc	r1, r11
    107a:	3c f4       	brge	.+14     	; 0x108a <vfprintf+0x2aa>
    107c:	95 01       	movw	r18, r10
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	05 c0       	rjmp	.+10     	; 0x108e <vfprintf+0x2ae>
    1084:	25 e0       	ldi	r18, 0x05	; 5
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <vfprintf+0x2ae>
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	00 23       	and	r16, r16
    1090:	11 f0       	breq	.+4      	; 0x1096 <vfprintf+0x2b6>
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	11 23       	and	r17, r17
    1098:	29 f0       	breq	.+10     	; 0x10a4 <vfprintf+0x2c4>
    109a:	81 2f       	mov	r24, r17
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	28 0f       	add	r18, r24
    10a2:	39 1f       	adc	r19, r25
    10a4:	8f 2d       	mov	r24, r15
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	28 17       	cp	r18, r24
    10aa:	39 07       	cpc	r19, r25
    10ac:	14 f4       	brge	.+4      	; 0x10b2 <vfprintf+0x2d2>
    10ae:	f2 1a       	sub	r15, r18
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <vfprintf+0x2d4>
    10b2:	ff 24       	eor	r15, r15
    10b4:	4e 2c       	mov	r4, r14
    10b6:	55 24       	eor	r5, r5
    10b8:	c2 01       	movw	r24, r4
    10ba:	89 70       	andi	r24, 0x09	; 9
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	41 f4       	brne	.+16     	; 0x10d2 <vfprintf+0x2f2>
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <vfprintf+0x2ee>
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b6 01       	movw	r22, r12
    10ca:	6f d3       	rcall	.+1758   	; 0x17aa <fputc>
    10cc:	fa 94       	dec	r15
    10ce:	ff 20       	and	r15, r15
    10d0:	c9 f7       	brne	.-14     	; 0x10c4 <vfprintf+0x2e4>
    10d2:	00 23       	and	r16, r16
    10d4:	21 f0       	breq	.+8      	; 0x10de <vfprintf+0x2fe>
    10d6:	80 2f       	mov	r24, r16
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	b6 01       	movw	r22, r12
    10dc:	66 d3       	rcall	.+1740   	; 0x17aa <fputc>
    10de:	43 fc       	sbrc	r4, 3
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <vfprintf+0x312>
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <vfprintf+0x30e>
    10e4:	80 e3       	ldi	r24, 0x30	; 48
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	b6 01       	movw	r22, r12
    10ea:	5f d3       	rcall	.+1726   	; 0x17aa <fputc>
    10ec:	fa 94       	dec	r15
    10ee:	ff 20       	and	r15, r15
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <vfprintf+0x304>
    10f2:	e7 fe       	sbrs	r14, 7
    10f4:	44 c0       	rjmp	.+136    	; 0x117e <vfprintf+0x39e>
    10f6:	35 01       	movw	r6, r10
    10f8:	b7 fe       	sbrs	r11, 7
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <vfprintf+0x320>
    10fc:	66 24       	eor	r6, r6
    10fe:	77 24       	eor	r7, r7
    1100:	25 01       	movw	r4, r10
    1102:	08 94       	sec
    1104:	41 1c       	adc	r4, r1
    1106:	51 1c       	adc	r5, r1
    1108:	46 18       	sub	r4, r6
    110a:	57 08       	sbc	r5, r7
    110c:	42 0c       	add	r4, r2
    110e:	53 1c       	adc	r5, r3
    1110:	f5 01       	movw	r30, r10
    1112:	e9 19       	sub	r30, r9
    1114:	f1 09       	sbc	r31, r1
    1116:	4f 01       	movw	r8, r30
    1118:	81 2f       	mov	r24, r17
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	00 27       	eor	r16, r16
    111e:	11 27       	eor	r17, r17
    1120:	08 1b       	sub	r16, r24
    1122:	19 0b       	sbc	r17, r25
    1124:	ff ef       	ldi	r31, 0xFF	; 255
    1126:	6f 16       	cp	r6, r31
    1128:	ff ef       	ldi	r31, 0xFF	; 255
    112a:	7f 06       	cpc	r7, r31
    112c:	21 f4       	brne	.+8      	; 0x1136 <vfprintf+0x356>
    112e:	8e e2       	ldi	r24, 0x2E	; 46
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	b6 01       	movw	r22, r12
    1134:	3a d3       	rcall	.+1652   	; 0x17aa <fputc>
    1136:	a6 14       	cp	r10, r6
    1138:	b7 04       	cpc	r11, r7
    113a:	34 f0       	brlt	.+12     	; 0x1148 <vfprintf+0x368>
    113c:	86 14       	cp	r8, r6
    113e:	97 04       	cpc	r9, r7
    1140:	1c f4       	brge	.+6      	; 0x1148 <vfprintf+0x368>
    1142:	f2 01       	movw	r30, r4
    1144:	80 81       	ld	r24, Z
    1146:	01 c0       	rjmp	.+2      	; 0x114a <vfprintf+0x36a>
    1148:	80 e3       	ldi	r24, 0x30	; 48
    114a:	08 94       	sec
    114c:	61 08       	sbc	r6, r1
    114e:	71 08       	sbc	r7, r1
    1150:	08 94       	sec
    1152:	41 1c       	adc	r4, r1
    1154:	51 1c       	adc	r5, r1
    1156:	60 16       	cp	r6, r16
    1158:	71 06       	cpc	r7, r17
    115a:	24 f0       	brlt	.+8      	; 0x1164 <vfprintf+0x384>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	b6 01       	movw	r22, r12
    1160:	24 d3       	rcall	.+1608   	; 0x17aa <fputc>
    1162:	e0 cf       	rjmp	.-64     	; 0x1124 <vfprintf+0x344>
    1164:	6a 14       	cp	r6, r10
    1166:	7b 04       	cpc	r7, r11
    1168:	41 f4       	brne	.+16     	; 0x117a <vfprintf+0x39a>
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	96 33       	cpi	r25, 0x36	; 54
    116e:	20 f4       	brcc	.+8      	; 0x1178 <vfprintf+0x398>
    1170:	95 33       	cpi	r25, 0x35	; 53
    1172:	19 f4       	brne	.+6      	; 0x117a <vfprintf+0x39a>
    1174:	f8 89       	ldd	r31, Y+16	; 0x10
    1176:	f4 ff       	sbrs	r31, 4
    1178:	81 e3       	ldi	r24, 0x31	; 49
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	43 c0       	rjmp	.+134    	; 0x1204 <vfprintf+0x424>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	81 33       	cpi	r24, 0x31	; 49
    1182:	11 f0       	breq	.+4      	; 0x1188 <vfprintf+0x3a8>
    1184:	2f ee       	ldi	r18, 0xEF	; 239
    1186:	62 22       	and	r6, r18
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	b6 01       	movw	r22, r12
    118c:	0e d3       	rcall	.+1564   	; 0x17aa <fputc>
    118e:	11 23       	and	r17, r17
    1190:	79 f0       	breq	.+30     	; 0x11b0 <vfprintf+0x3d0>
    1192:	8e e2       	ldi	r24, 0x2E	; 46
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	b6 01       	movw	r22, r12
    1198:	08 d3       	rcall	.+1552   	; 0x17aa <fputc>
    119a:	02 e0       	ldi	r16, 0x02	; 2
    119c:	f1 01       	movw	r30, r2
    119e:	e0 0f       	add	r30, r16
    11a0:	f1 1d       	adc	r31, r1
    11a2:	0f 5f       	subi	r16, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	b6 01       	movw	r22, r12
    11aa:	ff d2       	rcall	.+1534   	; 0x17aa <fputc>
    11ac:	11 50       	subi	r17, 0x01	; 1
    11ae:	b1 f7       	brne	.-20     	; 0x119c <vfprintf+0x3bc>
    11b0:	44 fe       	sbrs	r4, 4
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <vfprintf+0x3da>
    11b4:	85 e4       	ldi	r24, 0x45	; 69
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x3de>
    11ba:	85 e6       	ldi	r24, 0x65	; 101
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	b6 01       	movw	r22, r12
    11c0:	f4 d2       	rcall	.+1512   	; 0x17aa <fputc>
    11c2:	b7 fc       	sbrc	r11, 7
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <vfprintf+0x3f0>
    11c6:	a1 14       	cp	r10, r1
    11c8:	b1 04       	cpc	r11, r1
    11ca:	41 f4       	brne	.+16     	; 0x11dc <vfprintf+0x3fc>
    11cc:	64 fe       	sbrs	r6, 4
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <vfprintf+0x3fc>
    11d0:	b0 94       	com	r11
    11d2:	a1 94       	neg	r10
    11d4:	b1 08       	sbc	r11, r1
    11d6:	b3 94       	inc	r11
    11d8:	8d e2       	ldi	r24, 0x2D	; 45
    11da:	01 c0       	rjmp	.+2      	; 0x11de <vfprintf+0x3fe>
    11dc:	8b e2       	ldi	r24, 0x2B	; 43
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	b6 01       	movw	r22, r12
    11e2:	e3 d2       	rcall	.+1478   	; 0x17aa <fputc>
    11e4:	80 e3       	ldi	r24, 0x30	; 48
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <vfprintf+0x412>
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	e6 ef       	ldi	r30, 0xF6	; 246
    11ec:	ff ef       	ldi	r31, 0xFF	; 255
    11ee:	ae 0e       	add	r10, r30
    11f0:	bf 1e       	adc	r11, r31
    11f2:	fa e0       	ldi	r31, 0x0A	; 10
    11f4:	af 16       	cp	r10, r31
    11f6:	b1 04       	cpc	r11, r1
    11f8:	bc f7       	brge	.-18     	; 0x11e8 <vfprintf+0x408>
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b6 01       	movw	r22, r12
    11fe:	d5 d2       	rcall	.+1450   	; 0x17aa <fputc>
    1200:	c5 01       	movw	r24, r10
    1202:	c0 96       	adiw	r24, 0x30	; 48
    1204:	b6 01       	movw	r22, r12
    1206:	d1 d2       	rcall	.+1442   	; 0x17aa <fputc>
    1208:	41 c1       	rjmp	.+642    	; 0x148c <vfprintf+0x6ac>
    120a:	83 36       	cpi	r24, 0x63	; 99
    120c:	31 f0       	breq	.+12     	; 0x121a <vfprintf+0x43a>
    120e:	83 37       	cpi	r24, 0x73	; 115
    1210:	89 f0       	breq	.+34     	; 0x1234 <vfprintf+0x454>
    1212:	83 35       	cpi	r24, 0x53	; 83
    1214:	09 f0       	breq	.+2      	; 0x1218 <vfprintf+0x438>
    1216:	55 c0       	rjmp	.+170    	; 0x12c2 <vfprintf+0x4e2>
    1218:	21 c0       	rjmp	.+66     	; 0x125c <vfprintf+0x47c>
    121a:	9a 01       	movw	r18, r20
    121c:	2e 5f       	subi	r18, 0xFE	; 254
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	3d 87       	std	Y+13, r19	; 0x0d
    1222:	2c 87       	std	Y+12, r18	; 0x0c
    1224:	fa 01       	movw	r30, r20
    1226:	80 81       	ld	r24, Z
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	31 01       	movw	r6, r2
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	a8 2e       	mov	r10, r24
    1230:	b1 2c       	mov	r11, r1
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <vfprintf+0x478>
    1234:	9a 01       	movw	r18, r20
    1236:	2e 5f       	subi	r18, 0xFE	; 254
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	3d 87       	std	Y+13, r19	; 0x0d
    123c:	2c 87       	std	Y+12, r18	; 0x0c
    123e:	fa 01       	movw	r30, r20
    1240:	60 80       	ld	r6, Z
    1242:	71 80       	ldd	r7, Z+1	; 0x01
    1244:	06 ff       	sbrs	r16, 6
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x46e>
    1248:	61 2f       	mov	r22, r17
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x472>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	c3 01       	movw	r24, r6
    1254:	9f d2       	rcall	.+1342   	; 0x1794 <strnlen>
    1256:	5c 01       	movw	r10, r24
    1258:	0f 77       	andi	r16, 0x7F	; 127
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <vfprintf+0x4a2>
    125c:	9a 01       	movw	r18, r20
    125e:	2e 5f       	subi	r18, 0xFE	; 254
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	3d 87       	std	Y+13, r19	; 0x0d
    1264:	2c 87       	std	Y+12, r18	; 0x0c
    1266:	fa 01       	movw	r30, r20
    1268:	60 80       	ld	r6, Z
    126a:	71 80       	ldd	r7, Z+1	; 0x01
    126c:	06 ff       	sbrs	r16, 6
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <vfprintf+0x496>
    1270:	61 2f       	mov	r22, r17
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0x49a>
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	7f ef       	ldi	r23, 0xFF	; 255
    127a:	c3 01       	movw	r24, r6
    127c:	80 d2       	rcall	.+1280   	; 0x177e <strnlen_P>
    127e:	5c 01       	movw	r10, r24
    1280:	00 68       	ori	r16, 0x80	; 128
    1282:	03 fd       	sbrc	r16, 3
    1284:	1a c0       	rjmp	.+52     	; 0x12ba <vfprintf+0x4da>
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <vfprintf+0x4b2>
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	b6 01       	movw	r22, r12
    128e:	8d d2       	rcall	.+1306   	; 0x17aa <fputc>
    1290:	fa 94       	dec	r15
    1292:	8f 2d       	mov	r24, r15
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a8 16       	cp	r10, r24
    1298:	b9 06       	cpc	r11, r25
    129a:	b0 f3       	brcs	.-20     	; 0x1288 <vfprintf+0x4a8>
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <vfprintf+0x4da>
    129e:	f3 01       	movw	r30, r6
    12a0:	07 fd       	sbrc	r16, 7
    12a2:	85 91       	lpm	r24, Z+
    12a4:	07 ff       	sbrs	r16, 7
    12a6:	81 91       	ld	r24, Z+
    12a8:	3f 01       	movw	r6, r30
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b6 01       	movw	r22, r12
    12ae:	7d d2       	rcall	.+1274   	; 0x17aa <fputc>
    12b0:	f1 10       	cpse	r15, r1
    12b2:	fa 94       	dec	r15
    12b4:	08 94       	sec
    12b6:	a1 08       	sbc	r10, r1
    12b8:	b1 08       	sbc	r11, r1
    12ba:	a1 14       	cp	r10, r1
    12bc:	b1 04       	cpc	r11, r1
    12be:	79 f7       	brne	.-34     	; 0x129e <vfprintf+0x4be>
    12c0:	e5 c0       	rjmp	.+458    	; 0x148c <vfprintf+0x6ac>
    12c2:	84 36       	cpi	r24, 0x64	; 100
    12c4:	11 f0       	breq	.+4      	; 0x12ca <vfprintf+0x4ea>
    12c6:	89 36       	cpi	r24, 0x69	; 105
    12c8:	59 f5       	brne	.+86     	; 0x1320 <vfprintf+0x540>
    12ca:	07 ff       	sbrs	r16, 7
    12cc:	0b c0       	rjmp	.+22     	; 0x12e4 <vfprintf+0x504>
    12ce:	9a 01       	movw	r18, r20
    12d0:	2c 5f       	subi	r18, 0xFC	; 252
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	3d 87       	std	Y+13, r19	; 0x0d
    12d6:	2c 87       	std	Y+12, r18	; 0x0c
    12d8:	fa 01       	movw	r30, r20
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	0c c0       	rjmp	.+24     	; 0x12fc <vfprintf+0x51c>
    12e4:	9a 01       	movw	r18, r20
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	3d 87       	std	Y+13, r19	; 0x0d
    12ec:	2c 87       	std	Y+12, r18	; 0x0c
    12ee:	fa 01       	movw	r30, r20
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	88 27       	eor	r24, r24
    12f6:	77 fd       	sbrc	r23, 7
    12f8:	80 95       	com	r24
    12fa:	98 2f       	mov	r25, r24
    12fc:	0f 76       	andi	r16, 0x6F	; 111
    12fe:	97 ff       	sbrs	r25, 7
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <vfprintf+0x532>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	00 68       	ori	r16, 0x80	; 128
    1312:	a1 01       	movw	r20, r2
    1314:	2a e0       	ldi	r18, 0x0A	; 10
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	74 d2       	rcall	.+1256   	; 0x1802 <__ultoa_invert>
    131a:	98 2e       	mov	r9, r24
    131c:	92 18       	sub	r9, r2
    131e:	40 c0       	rjmp	.+128    	; 0x13a0 <vfprintf+0x5c0>
    1320:	85 37       	cpi	r24, 0x75	; 117
    1322:	21 f4       	brne	.+8      	; 0x132c <vfprintf+0x54c>
    1324:	0f 7e       	andi	r16, 0xEF	; 239
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	20 c0       	rjmp	.+64     	; 0x136c <vfprintf+0x58c>
    132c:	09 7f       	andi	r16, 0xF9	; 249
    132e:	8f 36       	cpi	r24, 0x6F	; 111
    1330:	a9 f0       	breq	.+42     	; 0x135c <vfprintf+0x57c>
    1332:	80 37       	cpi	r24, 0x70	; 112
    1334:	20 f4       	brcc	.+8      	; 0x133e <vfprintf+0x55e>
    1336:	88 35       	cpi	r24, 0x58	; 88
    1338:	09 f0       	breq	.+2      	; 0x133c <vfprintf+0x55c>
    133a:	ab c0       	rjmp	.+342    	; 0x1492 <vfprintf+0x6b2>
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <vfprintf+0x574>
    133e:	80 37       	cpi	r24, 0x70	; 112
    1340:	21 f0       	breq	.+8      	; 0x134a <vfprintf+0x56a>
    1342:	88 37       	cpi	r24, 0x78	; 120
    1344:	09 f0       	breq	.+2      	; 0x1348 <vfprintf+0x568>
    1346:	a5 c0       	rjmp	.+330    	; 0x1492 <vfprintf+0x6b2>
    1348:	01 c0       	rjmp	.+2      	; 0x134c <vfprintf+0x56c>
    134a:	00 61       	ori	r16, 0x10	; 16
    134c:	04 ff       	sbrs	r16, 4
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <vfprintf+0x582>
    1350:	04 60       	ori	r16, 0x04	; 4
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <vfprintf+0x582>
    1354:	04 ff       	sbrs	r16, 4
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <vfprintf+0x588>
    1358:	06 60       	ori	r16, 0x06	; 6
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0x588>
    135c:	28 e0       	ldi	r18, 0x08	; 8
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	05 c0       	rjmp	.+10     	; 0x136c <vfprintf+0x58c>
    1362:	20 e1       	ldi	r18, 0x10	; 16
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x58c>
    1368:	20 e1       	ldi	r18, 0x10	; 16
    136a:	32 e0       	ldi	r19, 0x02	; 2
    136c:	07 ff       	sbrs	r16, 7
    136e:	0a c0       	rjmp	.+20     	; 0x1384 <vfprintf+0x5a4>
    1370:	ca 01       	movw	r24, r20
    1372:	04 96       	adiw	r24, 0x04	; 4
    1374:	9d 87       	std	Y+13, r25	; 0x0d
    1376:	8c 87       	std	Y+12, r24	; 0x0c
    1378:	fa 01       	movw	r30, r20
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <vfprintf+0x5b6>
    1384:	ca 01       	movw	r24, r20
    1386:	02 96       	adiw	r24, 0x02	; 2
    1388:	9d 87       	std	Y+13, r25	; 0x0d
    138a:	8c 87       	std	Y+12, r24	; 0x0c
    138c:	fa 01       	movw	r30, r20
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a1 01       	movw	r20, r2
    1398:	34 d2       	rcall	.+1128   	; 0x1802 <__ultoa_invert>
    139a:	98 2e       	mov	r9, r24
    139c:	92 18       	sub	r9, r2
    139e:	0f 77       	andi	r16, 0x7F	; 127
    13a0:	06 ff       	sbrs	r16, 6
    13a2:	09 c0       	rjmp	.+18     	; 0x13b6 <vfprintf+0x5d6>
    13a4:	0e 7f       	andi	r16, 0xFE	; 254
    13a6:	91 16       	cp	r9, r17
    13a8:	30 f4       	brcc	.+12     	; 0x13b6 <vfprintf+0x5d6>
    13aa:	04 ff       	sbrs	r16, 4
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x5da>
    13ae:	02 fd       	sbrc	r16, 2
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <vfprintf+0x5da>
    13b2:	0f 7e       	andi	r16, 0xEF	; 239
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x5da>
    13b6:	e9 2c       	mov	r14, r9
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <vfprintf+0x5dc>
    13ba:	e1 2e       	mov	r14, r17
    13bc:	80 2f       	mov	r24, r16
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	04 ff       	sbrs	r16, 4
    13c2:	0c c0       	rjmp	.+24     	; 0x13dc <vfprintf+0x5fc>
    13c4:	fe 01       	movw	r30, r28
    13c6:	e9 0d       	add	r30, r9
    13c8:	f1 1d       	adc	r31, r1
    13ca:	20 81       	ld	r18, Z
    13cc:	20 33       	cpi	r18, 0x30	; 48
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <vfprintf+0x5f4>
    13d0:	09 7e       	andi	r16, 0xE9	; 233
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <vfprintf+0x606>
    13d4:	e3 94       	inc	r14
    13d6:	02 ff       	sbrs	r16, 2
    13d8:	06 c0       	rjmp	.+12     	; 0x13e6 <vfprintf+0x606>
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <vfprintf+0x604>
    13dc:	86 78       	andi	r24, 0x86	; 134
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <vfprintf+0x606>
    13e4:	e3 94       	inc	r14
    13e6:	a0 2e       	mov	r10, r16
    13e8:	bb 24       	eor	r11, r11
    13ea:	03 fd       	sbrc	r16, 3
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <vfprintf+0x634>
    13ee:	00 ff       	sbrs	r16, 0
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <vfprintf+0x62e>
    13f2:	ef 14       	cp	r14, r15
    13f4:	28 f4       	brcc	.+10     	; 0x1400 <vfprintf+0x620>
    13f6:	19 2d       	mov	r17, r9
    13f8:	1f 0d       	add	r17, r15
    13fa:	1e 19       	sub	r17, r14
    13fc:	ef 2c       	mov	r14, r15
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <vfprintf+0x62e>
    1400:	19 2d       	mov	r17, r9
    1402:	05 c0       	rjmp	.+10     	; 0x140e <vfprintf+0x62e>
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	b6 01       	movw	r22, r12
    140a:	cf d1       	rcall	.+926    	; 0x17aa <fputc>
    140c:	e3 94       	inc	r14
    140e:	ef 14       	cp	r14, r15
    1410:	c8 f3       	brcs	.-14     	; 0x1404 <vfprintf+0x624>
    1412:	04 c0       	rjmp	.+8      	; 0x141c <vfprintf+0x63c>
    1414:	ef 14       	cp	r14, r15
    1416:	10 f4       	brcc	.+4      	; 0x141c <vfprintf+0x63c>
    1418:	fe 18       	sub	r15, r14
    141a:	01 c0       	rjmp	.+2      	; 0x141e <vfprintf+0x63e>
    141c:	ff 24       	eor	r15, r15
    141e:	a4 fe       	sbrs	r10, 4
    1420:	0e c0       	rjmp	.+28     	; 0x143e <vfprintf+0x65e>
    1422:	80 e3       	ldi	r24, 0x30	; 48
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	b6 01       	movw	r22, r12
    1428:	c0 d1       	rcall	.+896    	; 0x17aa <fputc>
    142a:	a2 fe       	sbrs	r10, 2
    142c:	1d c0       	rjmp	.+58     	; 0x1468 <vfprintf+0x688>
    142e:	a1 fe       	sbrs	r10, 1
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <vfprintf+0x658>
    1432:	88 e5       	ldi	r24, 0x58	; 88
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <vfprintf+0x678>
    1438:	88 e7       	ldi	r24, 0x78	; 120
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <vfprintf+0x678>
    143e:	c5 01       	movw	r24, r10
    1440:	86 78       	andi	r24, 0x86	; 134
    1442:	90 70       	andi	r25, 0x00	; 0
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	81 f0       	breq	.+32     	; 0x1468 <vfprintf+0x688>
    1448:	a1 fc       	sbrc	r10, 1
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x670>
    144c:	80 e2       	ldi	r24, 0x20	; 32
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <vfprintf+0x672>
    1450:	8b e2       	ldi	r24, 0x2B	; 43
    1452:	07 fd       	sbrc	r16, 7
    1454:	8d e2       	ldi	r24, 0x2D	; 45
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	b6 01       	movw	r22, r12
    145a:	a7 d1       	rcall	.+846    	; 0x17aa <fputc>
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <vfprintf+0x688>
    145e:	80 e3       	ldi	r24, 0x30	; 48
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	b6 01       	movw	r22, r12
    1464:	a2 d1       	rcall	.+836    	; 0x17aa <fputc>
    1466:	11 50       	subi	r17, 0x01	; 1
    1468:	91 16       	cp	r9, r17
    146a:	c8 f3       	brcs	.-14     	; 0x145e <vfprintf+0x67e>
    146c:	9a 94       	dec	r9
    146e:	f1 01       	movw	r30, r2
    1470:	e9 0d       	add	r30, r9
    1472:	f1 1d       	adc	r31, r1
    1474:	80 81       	ld	r24, Z
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	b6 01       	movw	r22, r12
    147a:	97 d1       	rcall	.+814    	; 0x17aa <fputc>
    147c:	99 20       	and	r9, r9
    147e:	b1 f7       	brne	.-20     	; 0x146c <vfprintf+0x68c>
    1480:	05 c0       	rjmp	.+10     	; 0x148c <vfprintf+0x6ac>
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	b6 01       	movw	r22, r12
    1488:	90 d1       	rcall	.+800    	; 0x17aa <fputc>
    148a:	fa 94       	dec	r15
    148c:	ff 20       	and	r15, r15
    148e:	c9 f7       	brne	.-14     	; 0x1482 <vfprintf+0x6a2>
    1490:	b6 cc       	rjmp	.-1684   	; 0xdfe <vfprintf+0x1e>
    1492:	f6 01       	movw	r30, r12
    1494:	26 81       	ldd	r18, Z+6	; 0x06
    1496:	37 81       	ldd	r19, Z+7	; 0x07
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x6be>
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	c9 01       	movw	r24, r18
    14a0:	63 96       	adiw	r28, 0x13	; 19
    14a2:	e2 e1       	ldi	r30, 0x12	; 18
    14a4:	79 c0       	rjmp	.+242    	; 0x1598 <__epilogue_restores__>

000014a6 <__mulqi3>:
    14a6:	00 24       	eor	r0, r0

000014a8 <__mulqi3_loop>:
    14a8:	80 fd       	sbrc	r24, 0
    14aa:	06 0e       	add	r0, r22
    14ac:	66 0f       	add	r22, r22
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <__mulqi3_exit>
    14b0:	86 95       	lsr	r24
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <__mulqi3_loop>

000014b4 <__mulqi3_exit>:
    14b4:	80 2d       	mov	r24, r0
    14b6:	08 95       	ret

000014b8 <__mulhi3>:
    14b8:	55 27       	eor	r21, r21
    14ba:	00 24       	eor	r0, r0

000014bc <__mulhi3_loop>:
    14bc:	80 ff       	sbrs	r24, 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <__mulhi3_skip1>
    14c0:	06 0e       	add	r0, r22
    14c2:	57 1f       	adc	r21, r23

000014c4 <__mulhi3_skip1>:
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	61 15       	cp	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <__mulhi3_exit>
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	99 f7       	brne	.-26     	; 0x14bc <__mulhi3_loop>

000014d6 <__mulhi3_exit>:
    14d6:	95 2f       	mov	r25, r21
    14d8:	80 2d       	mov	r24, r0
    14da:	08 95       	ret

000014dc <__udivmodqi4>:
    14dc:	99 1b       	sub	r25, r25
    14de:	79 e0       	ldi	r23, 0x09	; 9
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <__udivmodqi4_ep>

000014e2 <__udivmodqi4_loop>:
    14e2:	99 1f       	adc	r25, r25
    14e4:	96 17       	cp	r25, r22
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <__udivmodqi4_ep>
    14e8:	96 1b       	sub	r25, r22

000014ea <__udivmodqi4_ep>:
    14ea:	88 1f       	adc	r24, r24
    14ec:	7a 95       	dec	r23
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__udivmodqi4_loop>
    14f0:	80 95       	com	r24
    14f2:	08 95       	ret

000014f4 <__udivmodhi4>:
    14f4:	aa 1b       	sub	r26, r26
    14f6:	bb 1b       	sub	r27, r27
    14f8:	51 e1       	ldi	r21, 0x11	; 17
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <__udivmodhi4_ep>

000014fc <__udivmodhi4_loop>:
    14fc:	aa 1f       	adc	r26, r26
    14fe:	bb 1f       	adc	r27, r27
    1500:	a6 17       	cp	r26, r22
    1502:	b7 07       	cpc	r27, r23
    1504:	10 f0       	brcs	.+4      	; 0x150a <__udivmodhi4_ep>
    1506:	a6 1b       	sub	r26, r22
    1508:	b7 0b       	sbc	r27, r23

0000150a <__udivmodhi4_ep>:
    150a:	88 1f       	adc	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	5a 95       	dec	r21
    1510:	a9 f7       	brne	.-22     	; 0x14fc <__udivmodhi4_loop>
    1512:	80 95       	com	r24
    1514:	90 95       	com	r25
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	08 95       	ret

0000151c <__udivmodsi4>:
    151c:	a1 e2       	ldi	r26, 0x21	; 33
    151e:	1a 2e       	mov	r1, r26
    1520:	aa 1b       	sub	r26, r26
    1522:	bb 1b       	sub	r27, r27
    1524:	fd 01       	movw	r30, r26
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <__udivmodsi4_ep>

00001528 <__udivmodsi4_loop>:
    1528:	aa 1f       	adc	r26, r26
    152a:	bb 1f       	adc	r27, r27
    152c:	ee 1f       	adc	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	a2 17       	cp	r26, r18
    1532:	b3 07       	cpc	r27, r19
    1534:	e4 07       	cpc	r30, r20
    1536:	f5 07       	cpc	r31, r21
    1538:	20 f0       	brcs	.+8      	; 0x1542 <__udivmodsi4_ep>
    153a:	a2 1b       	sub	r26, r18
    153c:	b3 0b       	sbc	r27, r19
    153e:	e4 0b       	sbc	r30, r20
    1540:	f5 0b       	sbc	r31, r21

00001542 <__udivmodsi4_ep>:
    1542:	66 1f       	adc	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	1a 94       	dec	r1
    154c:	69 f7       	brne	.-38     	; 0x1528 <__udivmodsi4_loop>
    154e:	60 95       	com	r22
    1550:	70 95       	com	r23
    1552:	80 95       	com	r24
    1554:	90 95       	com	r25
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	bd 01       	movw	r22, r26
    155c:	cf 01       	movw	r24, r30
    155e:	08 95       	ret

00001560 <__prologue_saves__>:
    1560:	2f 92       	push	r2
    1562:	3f 92       	push	r3
    1564:	4f 92       	push	r4
    1566:	5f 92       	push	r5
    1568:	6f 92       	push	r6
    156a:	7f 92       	push	r7
    156c:	8f 92       	push	r8
    156e:	9f 92       	push	r9
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	ca 1b       	sub	r28, r26
    158a:	db 0b       	sbc	r29, r27
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	09 94       	ijmp

00001598 <__epilogue_restores__>:
    1598:	2a 88       	ldd	r2, Y+18	; 0x12
    159a:	39 88       	ldd	r3, Y+17	; 0x11
    159c:	48 88       	ldd	r4, Y+16	; 0x10
    159e:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    15aa:	b9 84       	ldd	r11, Y+9	; 0x09
    15ac:	c8 84       	ldd	r12, Y+8	; 0x08
    15ae:	df 80       	ldd	r13, Y+7	; 0x07
    15b0:	ee 80       	ldd	r14, Y+6	; 0x06
    15b2:	fd 80       	ldd	r15, Y+5	; 0x05
    15b4:	0c 81       	ldd	r16, Y+4	; 0x04
    15b6:	1b 81       	ldd	r17, Y+3	; 0x03
    15b8:	aa 81       	ldd	r26, Y+2	; 0x02
    15ba:	b9 81       	ldd	r27, Y+1	; 0x01
    15bc:	ce 0f       	add	r28, r30
    15be:	d1 1d       	adc	r29, r1
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	ed 01       	movw	r28, r26
    15cc:	08 95       	ret

000015ce <__ftoa_engine>:
    15ce:	28 30       	cpi	r18, 0x08	; 8
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <__ftoa_engine+0x6>
    15d2:	27 e0       	ldi	r18, 0x07	; 7
    15d4:	33 27       	eor	r19, r19
    15d6:	da 01       	movw	r26, r20
    15d8:	99 0f       	add	r25, r25
    15da:	31 1d       	adc	r19, r1
    15dc:	87 fd       	sbrc	r24, 7
    15de:	91 60       	ori	r25, 0x01	; 1
    15e0:	00 96       	adiw	r24, 0x00	; 0
    15e2:	61 05       	cpc	r22, r1
    15e4:	71 05       	cpc	r23, r1
    15e6:	39 f4       	brne	.+14     	; 0x15f6 <__ftoa_engine+0x28>
    15e8:	32 60       	ori	r19, 0x02	; 2
    15ea:	2e 5f       	subi	r18, 0xFE	; 254
    15ec:	3d 93       	st	X+, r19
    15ee:	30 e3       	ldi	r19, 0x30	; 48
    15f0:	2a 95       	dec	r18
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <__ftoa_engine+0x1e>
    15f4:	08 95       	ret
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	30 f0       	brcs	.+12     	; 0x1606 <__ftoa_engine+0x38>
    15fa:	80 38       	cpi	r24, 0x80	; 128
    15fc:	71 05       	cpc	r23, r1
    15fe:	61 05       	cpc	r22, r1
    1600:	09 f0       	breq	.+2      	; 0x1604 <__ftoa_engine+0x36>
    1602:	3c 5f       	subi	r19, 0xFC	; 252
    1604:	3c 5f       	subi	r19, 0xFC	; 252
    1606:	3d 93       	st	X+, r19
    1608:	91 30       	cpi	r25, 0x01	; 1
    160a:	08 f0       	brcs	.+2      	; 0x160e <__ftoa_engine+0x40>
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	91 1d       	adc	r25, r1
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	1f 93       	push	r17
    1616:	0f 93       	push	r16
    1618:	ff 92       	push	r15
    161a:	ef 92       	push	r14
    161c:	19 2f       	mov	r17, r25
    161e:	98 7f       	andi	r25, 0xF8	; 248
    1620:	96 95       	lsr	r25
    1622:	e9 2f       	mov	r30, r25
    1624:	96 95       	lsr	r25
    1626:	96 95       	lsr	r25
    1628:	e9 0f       	add	r30, r25
    162a:	ff 27       	eor	r31, r31
    162c:	ec 57       	subi	r30, 0x7C	; 124
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	99 27       	eor	r25, r25
    1632:	33 27       	eor	r19, r19
    1634:	ee 24       	eor	r14, r14
    1636:	ff 24       	eor	r15, r15
    1638:	a7 01       	movw	r20, r14
    163a:	e7 01       	movw	r28, r14
    163c:	05 90       	lpm	r0, Z+
    163e:	08 94       	sec
    1640:	07 94       	ror	r0
    1642:	28 f4       	brcc	.+10     	; 0x164e <__ftoa_engine+0x80>
    1644:	36 0f       	add	r19, r22
    1646:	e7 1e       	adc	r14, r23
    1648:	f8 1e       	adc	r15, r24
    164a:	49 1f       	adc	r20, r25
    164c:	51 1d       	adc	r21, r1
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	06 94       	lsr	r0
    1658:	a1 f7       	brne	.-24     	; 0x1642 <__ftoa_engine+0x74>
    165a:	05 90       	lpm	r0, Z+
    165c:	07 94       	ror	r0
    165e:	28 f4       	brcc	.+10     	; 0x166a <__ftoa_engine+0x9c>
    1660:	e7 0e       	add	r14, r23
    1662:	f8 1e       	adc	r15, r24
    1664:	49 1f       	adc	r20, r25
    1666:	56 1f       	adc	r21, r22
    1668:	c1 1d       	adc	r28, r1
    166a:	77 0f       	add	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	66 1f       	adc	r22, r22
    1672:	06 94       	lsr	r0
    1674:	a1 f7       	brne	.-24     	; 0x165e <__ftoa_engine+0x90>
    1676:	05 90       	lpm	r0, Z+
    1678:	07 94       	ror	r0
    167a:	28 f4       	brcc	.+10     	; 0x1686 <__ftoa_engine+0xb8>
    167c:	f8 0e       	add	r15, r24
    167e:	49 1f       	adc	r20, r25
    1680:	56 1f       	adc	r21, r22
    1682:	c7 1f       	adc	r28, r23
    1684:	d1 1d       	adc	r29, r1
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	66 1f       	adc	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	06 94       	lsr	r0
    1690:	a1 f7       	brne	.-24     	; 0x167a <__ftoa_engine+0xac>
    1692:	05 90       	lpm	r0, Z+
    1694:	07 94       	ror	r0
    1696:	20 f4       	brcc	.+8      	; 0x16a0 <__ftoa_engine+0xd2>
    1698:	49 0f       	add	r20, r25
    169a:	56 1f       	adc	r21, r22
    169c:	c7 1f       	adc	r28, r23
    169e:	d8 1f       	adc	r29, r24
    16a0:	99 0f       	add	r25, r25
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	06 94       	lsr	r0
    16aa:	a9 f7       	brne	.-22     	; 0x1696 <__ftoa_engine+0xc8>
    16ac:	84 91       	lpm	r24, Z+
    16ae:	10 95       	com	r17
    16b0:	17 70       	andi	r17, 0x07	; 7
    16b2:	41 f0       	breq	.+16     	; 0x16c4 <__ftoa_engine+0xf6>
    16b4:	d6 95       	lsr	r29
    16b6:	c7 95       	ror	r28
    16b8:	57 95       	ror	r21
    16ba:	47 95       	ror	r20
    16bc:	f7 94       	ror	r15
    16be:	e7 94       	ror	r14
    16c0:	1a 95       	dec	r17
    16c2:	c1 f7       	brne	.-16     	; 0x16b4 <__ftoa_engine+0xe6>
    16c4:	ea e2       	ldi	r30, 0x2A	; 42
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	68 94       	set
    16ca:	15 90       	lpm	r1, Z+
    16cc:	15 91       	lpm	r17, Z+
    16ce:	35 91       	lpm	r19, Z+
    16d0:	65 91       	lpm	r22, Z+
    16d2:	95 91       	lpm	r25, Z+
    16d4:	05 90       	lpm	r0, Z+
    16d6:	7f e2       	ldi	r23, 0x2F	; 47
    16d8:	73 95       	inc	r23
    16da:	e1 18       	sub	r14, r1
    16dc:	f1 0a       	sbc	r15, r17
    16de:	43 0b       	sbc	r20, r19
    16e0:	56 0b       	sbc	r21, r22
    16e2:	c9 0b       	sbc	r28, r25
    16e4:	d0 09       	sbc	r29, r0
    16e6:	c0 f7       	brcc	.-16     	; 0x16d8 <__ftoa_engine+0x10a>
    16e8:	e1 0c       	add	r14, r1
    16ea:	f1 1e       	adc	r15, r17
    16ec:	43 1f       	adc	r20, r19
    16ee:	56 1f       	adc	r21, r22
    16f0:	c9 1f       	adc	r28, r25
    16f2:	d0 1d       	adc	r29, r0
    16f4:	7e f4       	brtc	.+30     	; 0x1714 <__ftoa_engine+0x146>
    16f6:	70 33       	cpi	r23, 0x30	; 48
    16f8:	11 f4       	brne	.+4      	; 0x16fe <__ftoa_engine+0x130>
    16fa:	8a 95       	dec	r24
    16fc:	e6 cf       	rjmp	.-52     	; 0x16ca <__ftoa_engine+0xfc>
    16fe:	e8 94       	clt
    1700:	01 50       	subi	r16, 0x01	; 1
    1702:	30 f0       	brcs	.+12     	; 0x1710 <__ftoa_engine+0x142>
    1704:	08 0f       	add	r16, r24
    1706:	0a f4       	brpl	.+2      	; 0x170a <__ftoa_engine+0x13c>
    1708:	00 27       	eor	r16, r16
    170a:	02 17       	cp	r16, r18
    170c:	08 f4       	brcc	.+2      	; 0x1710 <__ftoa_engine+0x142>
    170e:	20 2f       	mov	r18, r16
    1710:	23 95       	inc	r18
    1712:	02 2f       	mov	r16, r18
    1714:	7a 33       	cpi	r23, 0x3A	; 58
    1716:	28 f0       	brcs	.+10     	; 0x1722 <__ftoa_engine+0x154>
    1718:	79 e3       	ldi	r23, 0x39	; 57
    171a:	7d 93       	st	X+, r23
    171c:	2a 95       	dec	r18
    171e:	e9 f7       	brne	.-6      	; 0x171a <__ftoa_engine+0x14c>
    1720:	10 c0       	rjmp	.+32     	; 0x1742 <__ftoa_engine+0x174>
    1722:	7d 93       	st	X+, r23
    1724:	2a 95       	dec	r18
    1726:	89 f6       	brne	.-94     	; 0x16ca <__ftoa_engine+0xfc>
    1728:	06 94       	lsr	r0
    172a:	97 95       	ror	r25
    172c:	67 95       	ror	r22
    172e:	37 95       	ror	r19
    1730:	17 95       	ror	r17
    1732:	17 94       	ror	r1
    1734:	e1 18       	sub	r14, r1
    1736:	f1 0a       	sbc	r15, r17
    1738:	43 0b       	sbc	r20, r19
    173a:	56 0b       	sbc	r21, r22
    173c:	c9 0b       	sbc	r28, r25
    173e:	d0 09       	sbc	r29, r0
    1740:	98 f0       	brcs	.+38     	; 0x1768 <__ftoa_engine+0x19a>
    1742:	23 95       	inc	r18
    1744:	7e 91       	ld	r23, -X
    1746:	73 95       	inc	r23
    1748:	7a 33       	cpi	r23, 0x3A	; 58
    174a:	08 f0       	brcs	.+2      	; 0x174e <__ftoa_engine+0x180>
    174c:	70 e3       	ldi	r23, 0x30	; 48
    174e:	7c 93       	st	X, r23
    1750:	20 13       	cpse	r18, r16
    1752:	b8 f7       	brcc	.-18     	; 0x1742 <__ftoa_engine+0x174>
    1754:	7e 91       	ld	r23, -X
    1756:	70 61       	ori	r23, 0x10	; 16
    1758:	7d 93       	st	X+, r23
    175a:	30 f0       	brcs	.+12     	; 0x1768 <__ftoa_engine+0x19a>
    175c:	83 95       	inc	r24
    175e:	71 e3       	ldi	r23, 0x31	; 49
    1760:	7d 93       	st	X+, r23
    1762:	70 e3       	ldi	r23, 0x30	; 48
    1764:	2a 95       	dec	r18
    1766:	e1 f7       	brne	.-8      	; 0x1760 <__ftoa_engine+0x192>
    1768:	11 24       	eor	r1, r1
    176a:	ef 90       	pop	r14
    176c:	ff 90       	pop	r15
    176e:	0f 91       	pop	r16
    1770:	1f 91       	pop	r17
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	99 27       	eor	r25, r25
    1778:	87 fd       	sbrc	r24, 7
    177a:	90 95       	com	r25
    177c:	08 95       	ret

0000177e <strnlen_P>:
    177e:	fc 01       	movw	r30, r24
    1780:	05 90       	lpm	r0, Z+
    1782:	61 50       	subi	r22, 0x01	; 1
    1784:	70 40       	sbci	r23, 0x00	; 0
    1786:	01 10       	cpse	r0, r1
    1788:	d8 f7       	brcc	.-10     	; 0x1780 <strnlen_P+0x2>
    178a:	80 95       	com	r24
    178c:	90 95       	com	r25
    178e:	8e 0f       	add	r24, r30
    1790:	9f 1f       	adc	r25, r31
    1792:	08 95       	ret

00001794 <strnlen>:
    1794:	fc 01       	movw	r30, r24
    1796:	61 50       	subi	r22, 0x01	; 1
    1798:	70 40       	sbci	r23, 0x00	; 0
    179a:	01 90       	ld	r0, Z+
    179c:	01 10       	cpse	r0, r1
    179e:	d8 f7       	brcc	.-10     	; 0x1796 <strnlen+0x2>
    17a0:	80 95       	com	r24
    17a2:	90 95       	com	r25
    17a4:	8e 0f       	add	r24, r30
    17a6:	9f 1f       	adc	r25, r31
    17a8:	08 95       	ret

000017aa <fputc>:
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	8c 01       	movw	r16, r24
    17b4:	eb 01       	movw	r28, r22
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 ff       	sbrs	r24, 1
    17ba:	1b c0       	rjmp	.+54     	; 0x17f2 <fputc+0x48>
    17bc:	82 ff       	sbrs	r24, 2
    17be:	0d c0       	rjmp	.+26     	; 0x17da <fputc+0x30>
    17c0:	2e 81       	ldd	r18, Y+6	; 0x06
    17c2:	3f 81       	ldd	r19, Y+7	; 0x07
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	28 17       	cp	r18, r24
    17ca:	39 07       	cpc	r19, r25
    17cc:	64 f4       	brge	.+24     	; 0x17e6 <fputc+0x3c>
    17ce:	e8 81       	ld	r30, Y
    17d0:	f9 81       	ldd	r31, Y+1	; 0x01
    17d2:	01 93       	st	Z+, r16
    17d4:	f9 83       	std	Y+1, r31	; 0x01
    17d6:	e8 83       	st	Y, r30
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <fputc+0x3c>
    17da:	e8 85       	ldd	r30, Y+8	; 0x08
    17dc:	f9 85       	ldd	r31, Y+9	; 0x09
    17de:	80 2f       	mov	r24, r16
    17e0:	09 95       	icall
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	31 f4       	brne	.+12     	; 0x17f2 <fputc+0x48>
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	9f 83       	std	Y+7, r25	; 0x07
    17ee:	8e 83       	std	Y+6, r24	; 0x06
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <fputc+0x4c>
    17f2:	0f ef       	ldi	r16, 0xFF	; 255
    17f4:	1f ef       	ldi	r17, 0xFF	; 255
    17f6:	c8 01       	movw	r24, r16
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <__ultoa_invert>:
    1802:	fa 01       	movw	r30, r20
    1804:	aa 27       	eor	r26, r26
    1806:	28 30       	cpi	r18, 0x08	; 8
    1808:	61 f1       	breq	.+88     	; 0x1862 <__ultoa_invert+0x60>
    180a:	20 31       	cpi	r18, 0x10	; 16
    180c:	91 f1       	breq	.+100    	; 0x1872 <__ultoa_invert+0x70>
    180e:	e8 94       	clt
    1810:	6f 93       	push	r22
    1812:	6e 7f       	andi	r22, 0xFE	; 254
    1814:	6e 5f       	subi	r22, 0xFE	; 254
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	8f 4f       	sbci	r24, 0xFF	; 255
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	af 4f       	sbci	r26, 0xFF	; 255
    181e:	b1 e0       	ldi	r27, 0x01	; 1
    1820:	40 d0       	rcall	.+128    	; 0x18a2 <__ultoa_invert+0xa0>
    1822:	b4 e0       	ldi	r27, 0x04	; 4
    1824:	3e d0       	rcall	.+124    	; 0x18a2 <__ultoa_invert+0xa0>
    1826:	67 0f       	add	r22, r23
    1828:	78 1f       	adc	r23, r24
    182a:	89 1f       	adc	r24, r25
    182c:	9a 1f       	adc	r25, r26
    182e:	a1 1d       	adc	r26, r1
    1830:	68 0f       	add	r22, r24
    1832:	79 1f       	adc	r23, r25
    1834:	8a 1f       	adc	r24, r26
    1836:	91 1d       	adc	r25, r1
    1838:	a1 1d       	adc	r26, r1
    183a:	6a 0f       	add	r22, r26
    183c:	71 1d       	adc	r23, r1
    183e:	81 1d       	adc	r24, r1
    1840:	91 1d       	adc	r25, r1
    1842:	a1 1d       	adc	r26, r1
    1844:	22 d0       	rcall	.+68     	; 0x188a <__ultoa_invert+0x88>
    1846:	09 f4       	brne	.+2      	; 0x184a <__ultoa_invert+0x48>
    1848:	68 94       	set
    184a:	3f 91       	pop	r19
    184c:	06 2e       	mov	r0, r22
    184e:	00 0c       	add	r0, r0
    1850:	30 19       	sub	r19, r0
    1852:	00 0c       	add	r0, r0
    1854:	00 0c       	add	r0, r0
    1856:	30 19       	sub	r19, r0
    1858:	30 5d       	subi	r19, 0xD0	; 208
    185a:	31 93       	st	Z+, r19
    185c:	ce f6       	brtc	.-78     	; 0x1810 <__ultoa_invert+0xe>
    185e:	cf 01       	movw	r24, r30
    1860:	08 95       	ret
    1862:	46 2f       	mov	r20, r22
    1864:	47 70       	andi	r20, 0x07	; 7
    1866:	40 5d       	subi	r20, 0xD0	; 208
    1868:	41 93       	st	Z+, r20
    186a:	b3 e0       	ldi	r27, 0x03	; 3
    186c:	0f d0       	rcall	.+30     	; 0x188c <__ultoa_invert+0x8a>
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__ultoa_invert+0x60>
    1870:	f6 cf       	rjmp	.-20     	; 0x185e <__ultoa_invert+0x5c>
    1872:	46 2f       	mov	r20, r22
    1874:	4f 70       	andi	r20, 0x0F	; 15
    1876:	40 5d       	subi	r20, 0xD0	; 208
    1878:	4a 33       	cpi	r20, 0x3A	; 58
    187a:	18 f0       	brcs	.+6      	; 0x1882 <__ultoa_invert+0x80>
    187c:	49 5d       	subi	r20, 0xD9	; 217
    187e:	31 fd       	sbrc	r19, 1
    1880:	40 52       	subi	r20, 0x20	; 32
    1882:	41 93       	st	Z+, r20
    1884:	02 d0       	rcall	.+4      	; 0x188a <__ultoa_invert+0x88>
    1886:	a9 f7       	brne	.-22     	; 0x1872 <__ultoa_invert+0x70>
    1888:	ea cf       	rjmp	.-44     	; 0x185e <__ultoa_invert+0x5c>
    188a:	b4 e0       	ldi	r27, 0x04	; 4
    188c:	a6 95       	lsr	r26
    188e:	97 95       	ror	r25
    1890:	87 95       	ror	r24
    1892:	77 95       	ror	r23
    1894:	67 95       	ror	r22
    1896:	ba 95       	dec	r27
    1898:	c9 f7       	brne	.-14     	; 0x188c <__ultoa_invert+0x8a>
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	61 05       	cpc	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	08 95       	ret
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	0a 2e       	mov	r0, r26
    18a8:	06 94       	lsr	r0
    18aa:	57 95       	ror	r21
    18ac:	47 95       	ror	r20
    18ae:	37 95       	ror	r19
    18b0:	27 95       	ror	r18
    18b2:	ba 95       	dec	r27
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__ultoa_invert+0xa6>
    18b6:	62 0f       	add	r22, r18
    18b8:	73 1f       	adc	r23, r19
    18ba:	84 1f       	adc	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	a0 1d       	adc	r26, r0
    18c0:	08 95       	ret

000018c2 <_exit>:
    18c2:	f8 94       	cli

000018c4 <__stop_program>:
    18c4:	ff cf       	rjmp	.-2      	; 0x18c4 <__stop_program>
