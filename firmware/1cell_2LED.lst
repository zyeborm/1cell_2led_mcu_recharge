
1cell_2LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000018e4  00001978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007e  0080006a  0080006a  00001982  2**0
                  ALLOC
  3 .stab         0000468c  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001838  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
       2:	ab c0       	rjmp	.+342    	; 0x15a <__bad_interrupt>
       4:	aa c0       	rjmp	.+340    	; 0x15a <__bad_interrupt>
       6:	eb c6       	rjmp	.+3542   	; 0xdde <__vector_3>
       8:	a8 c0       	rjmp	.+336    	; 0x15a <__bad_interrupt>
       a:	a7 c0       	rjmp	.+334    	; 0x15a <__bad_interrupt>
       c:	a6 c0       	rjmp	.+332    	; 0x15a <__bad_interrupt>
       e:	a5 c0       	rjmp	.+330    	; 0x15a <__bad_interrupt>
      10:	1c c5       	rjmp	.+2616   	; 0xa4a <__vector_8>
      12:	a3 c0       	rjmp	.+326    	; 0x15a <__bad_interrupt>
      14:	a2 c0       	rjmp	.+324    	; 0x15a <__bad_interrupt>
      16:	d2 c4       	rjmp	.+2468   	; 0x9bc <__vector_11>
      18:	a0 c0       	rjmp	.+320    	; 0x15a <__bad_interrupt>
      1a:	e6 c2       	rjmp	.+1484   	; 0x5e8 <__vector_13>
      1c:	9e c0       	rjmp	.+316    	; 0x15a <__bad_interrupt>
      1e:	9d c0       	rjmp	.+314    	; 0x15a <__bad_interrupt>
      20:	9c c0       	rjmp	.+312    	; 0x15a <__bad_interrupt>

00000022 <__c.1862>:
      22:	6e 61 6e 00                                         nan.

00000026 <__c.1860>:
      26:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      36:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      46:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      56:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      66:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      76:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      86:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      96:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      a6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      b6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      c6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
      d6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
      e6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
      f6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     106:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     116:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf e5       	ldi	r28, 0x5F	; 95
     12a:	d2 e0       	ldi	r29, 0x02	; 2
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	10 e0       	ldi	r17, 0x00	; 0
     132:	a0 e6       	ldi	r26, 0x60	; 96
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e4 ee       	ldi	r30, 0xE4	; 228
     138:	f8 e1       	ldi	r31, 0x18	; 24
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	aa 36       	cpi	r26, 0x6A	; 106
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	aa e6       	ldi	r26, 0x6A	; 106
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a8 3e       	cpi	r26, 0xE8	; 232
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	8b d1       	rcall	.+790    	; 0x46e <main>
     158:	c3 cb       	rjmp	.-2170   	; 0xfffff8e0 <__eeprom_end+0xff7ef8e0>

0000015a <__bad_interrupt>:
     15a:	52 cf       	rjmp	.-348    	; 0x0 <__vectors>

0000015c <init_sw>:
#define BUTTON_DEBOUNCE_TIME 25 // in timer1 cycles
#define BUTTON_REPEAT_TIME 50  // how long to hold it before repeating #FIX

void init_sw()
{
  LEDS[LED_L].PWM_out = &OCR0B;
     15c:	8c e5       	ldi	r24, 0x5C	; 92
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 a2 00 	sts	0x00A2, r25
     164:	80 93 a1 00 	sts	0x00A1, r24
  *(LEDS[LED_L].PWM_out) = 0;
     168:	1c be       	out	0x3c, r1	; 60
  LEDS[LED_L].ADC_value = 0;
     16a:	10 92 9b 00 	sts	0x009B, r1
     16e:	10 92 9c 00 	sts	0x009C, r1
     172:	10 92 9d 00 	sts	0x009D, r1
     176:	10 92 9e 00 	sts	0x009E, r1
  LEDS[LED_L].setpoints[0] = 0;
     17a:	10 92 8f 00 	sts	0x008F, r1
  LEDS[LED_L].setpoints[1] = 0;
     17e:	10 92 90 00 	sts	0x0090, r1
  LEDS[LED_L].setpoints[2] = 0;
     182:	10 92 91 00 	sts	0x0091, r1
  LEDS[LED_L].setpoints[3] = 93;
     186:	8d e5       	ldi	r24, 0x5D	; 93
     188:	80 93 92 00 	sts	0x0092, r24
  LEDS[LED_L].setpoints[4] = 93;  
     18c:	80 93 93 00 	sts	0x0093, r24
  LEDS[LED_L].setpoints[5] = 0;  
     190:	10 92 94 00 	sts	0x0094, r1
  LEDS[LED_L].hints[0] = 0;  
     194:	10 92 95 00 	sts	0x0095, r1
  LEDS[LED_L].hints[1] = 0;  
     198:	10 92 96 00 	sts	0x0096, r1
  LEDS[LED_L].hints[2] = 0;  
     19c:	10 92 97 00 	sts	0x0097, r1
  LEDS[LED_L].hints[3] = 61;        
     1a0:	8d e3       	ldi	r24, 0x3D	; 61
     1a2:	80 93 98 00 	sts	0x0098, r24
  LEDS[LED_L].hints[4] = 61;
     1a6:	80 93 99 00 	sts	0x0099, r24
  LEDS[LED_L].hints[5] = 0;    
     1aa:	10 92 9a 00 	sts	0x009A, r1
  LEDS[LED_L].setpoint_index = 0;
     1ae:	ed e8       	ldi	r30, 0x8D	; 141
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	10 82       	st	Z, r1
  
  LEDS[LED_R].PWM_out = &OCR0A;
     1b4:	86 e5       	ldi	r24, 0x56	; 86
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	93 a7       	std	Z+43, r25	; 0x2b
     1ba:	82 a7       	std	Z+42, r24	; 0x2a
  *(LEDS[LED_R].PWM_out) = 0;
     1bc:	16 be       	out	0x36, r1	; 54
  LEDS[LED_R].ADC_value = 0;
     1be:	14 a2       	std	Z+36, r1	; 0x24
     1c0:	15 a2       	std	Z+37, r1	; 0x25
     1c2:	16 a2       	std	Z+38, r1	; 0x26
     1c4:	17 a2       	std	Z+39, r1	; 0x27
  LEDS[LED_R].setpoints[0] = 0;
     1c6:	10 8e       	std	Z+24, r1	; 0x18
  LEDS[LED_R].setpoints[1] = 10; //10
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	81 8f       	std	Z+25, r24	; 0x19
  LEDS[LED_R].setpoints[2] = 55;
     1cc:	87 e3       	ldi	r24, 0x37	; 55
     1ce:	82 8f       	std	Z+26, r24	; 0x1a
  LEDS[LED_R].setpoints[3] = 163;
     1d0:	83 ea       	ldi	r24, 0xA3	; 163
     1d2:	83 8f       	std	Z+27, r24	; 0x1b
  LEDS[LED_R].setpoints[4] = 0;
     1d4:	14 8e       	std	Z+28, r1	; 0x1c
  LEDS[LED_R].setpoints[5] = 163;  
     1d6:	85 8f       	std	Z+29, r24	; 0x1d
  LEDS[LED_R].hints[0] = 0;  
     1d8:	16 8e       	std	Z+30, r1	; 0x1e
  LEDS[LED_R].hints[1] = 35;  
     1da:	83 e2       	ldi	r24, 0x23	; 35
     1dc:	87 8f       	std	Z+31, r24	; 0x1f
  LEDS[LED_R].hints[2] = 60;  
     1de:	8c e3       	ldi	r24, 0x3C	; 60
     1e0:	80 a3       	std	Z+32, r24	; 0x20
  LEDS[LED_R].hints[3] = 70;
     1e2:	86 e4       	ldi	r24, 0x46	; 70
     1e4:	81 a3       	std	Z+33, r24	; 0x21
  LEDS[LED_R].hints[4] = 0; 
     1e6:	12 a2       	std	Z+34, r1	; 0x22
  LEDS[LED_R].hints[5] = 70;     
     1e8:	83 a3       	std	Z+35, r24	; 0x23
  
  
  LEDS[LED_R].setpoint_index = 0;
     1ea:	16 8a       	std	Z+22, r1	; 0x16
  
  adc_muxes[LED_L] = AMUX_L;
     1ec:	8f e8       	ldi	r24, 0x8F	; 143
     1ee:	80 93 84 00 	sts	0x0084, r24
  adc_muxes[LED_R] = AMUX_R;
     1f2:	81 e9       	ldi	r24, 0x91	; 145
     1f4:	80 93 85 00 	sts	0x0085, r24
  adc_muxes[VBAT] = AMUX_VBAT;
     1f8:	81 e2       	ldi	r24, 0x21	; 33
     1fa:	80 93 86 00 	sts	0x0086, r24
  
  shop_flag = INUSE;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	90 93 88 00 	sts	0x0088, r25
     206:	80 93 87 00 	sts	0x0087, r24
  button_state = UP;
     20a:	10 92 e6 00 	sts	0x00E6, r1
     20e:	10 92 e5 00 	sts	0x00E5, r1
  demo_flag = DEMO;
     212:	10 92 8a 00 	sts	0x008A, r1
     216:	10 92 89 00 	sts	0x0089, r1
  
}
     21a:	08 95       	ret

0000021c <init_hw>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	20 e8       	ldi	r18, 0x80	; 128
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	26 bd       	out	0x26, r18	; 38
     228:	86 bd       	out	0x26, r24	; 38
     22a:	0f be       	out	0x3f, r0	; 63
  //deal with anything that might be floating.
 //  PORTA=255;
 //  PORTB=255;

  //set both LEDs out and off
  SETBIT(LED_R_DDR,LED_R_PIN);
     22c:	ba 9a       	sbi	0x17, 2	; 23
  C_CLEARBIT(LED_R_LED);  
     22e:	c2 98       	cbi	0x18, 2	; 24
  SETBIT(LED_L_DDR,LED_L_PIN);
     230:	d7 9a       	sbi	0x1a, 7	; 26
  C_CLEARBIT(LED_L_LED);
     232:	df 98       	cbi	0x1b, 7	; 27
  
  


  //set button as input with pullup
  CLEARBIT(BUTTON1_DDR,BUTTON1_PIN);
     234:	b8 98       	cbi	0x17, 0	; 23
  C_SETBIT(BUTTON1_OUT); //pullup
     236:	c0 9a       	sbi	0x18, 0	; 24

  CLEARBIT(CHARGE_DDR,CHARGE_PIN);
     238:	b9 98       	cbi	0x17, 1	; 23
  C_SETBIT(CHARGE_OUT); //pullup
     23a:	c1 9a       	sbi	0x18, 1	; 24


  //Setup TIMER1 used for house keeping, 16bit timer so overflows every 65536 clocks or approx 122Hz at 8mhz
  TCCR1B |= (1 << CS10)| (1 << ICNC1); //no prescaler and noise canceler is on
     23c:	8e b5       	in	r24, 0x2e	; 46
     23e:	81 68       	ori	r24, 0x81	; 129
     240:	8e bd       	out	0x2e, r24	; 46
  TIMSK1=(1<<TOIE1); //enable timer 1 overflow   
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	9c b9       	out	0x0c, r25	; 12

  // Setup Timer0 used for PWM outputs, Running at 31Khz at 8mhz
  OCR0B = 0;  
     246:	1c be       	out	0x3c, r1	; 60
  OCR0A = 0;
     248:	16 be       	out	0x36, r1	; 54
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     24a:	80 b7       	in	r24, 0x30	; 48
     24c:	83 6a       	ori	r24, 0xA3	; 163
     24e:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00));
     250:	83 b7       	in	r24, 0x33	; 51
     252:	81 60       	ori	r24, 0x01	; 1
     254:	83 bf       	out	0x33, r24	; 51
  TIMSK0=(1<<TOIE0); //overflow interrupt
     256:	99 bf       	out	0x39, r25	; 57
//  LED_L.PWM_out = &OCR0B;

  
  //Setup ADC
// ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz 
  ADCSRB |= (1 << ADLAR); // left align results, 8 bit ftw
     258:	1c 9a       	sbi	0x03, 4	; 3
  ADMUX = 0b100001; //give it something to start with
     25a:	81 e2       	ldi	r24, 0x21	; 33
     25c:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADEN);  // Enable ADC 
     25e:	37 9a       	sbi	0x06, 7	; 6
  ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt 
     260:	33 9a       	sbi	0x06, 3	; 6
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // prescaler to /64 = 125khz adc clock @ 8mhz
     262:	86 b1       	in	r24, 0x06	; 6
     264:	86 60       	ori	r24, 0x06	; 6
     266:	86 b9       	out	0x06, r24	; 6
  
  GIMSK |= (1 << PCIE1);  //enable pcint1 interrupt source
     268:	8b b7       	in	r24, 0x3b	; 59
     26a:	80 62       	ori	r24, 0x20	; 32
     26c:	8b bf       	out	0x3b, r24	; 59
  PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);  //turn interrupts on for pin b0/pcint8 , b1/pcint9, button, charger respectivley
     26e:	80 b5       	in	r24, 0x20	; 32
     270:	83 60       	ori	r24, 0x03	; 3
     272:	80 bd       	out	0x20, r24	; 32
  MCUCR |= (1 << ISC00);   // set the interrupt to fire on any level change of an external interrupt
     274:	85 b7       	in	r24, 0x35	; 53
     276:	81 60       	ori	r24, 0x01	; 1
     278:	85 bf       	out	0x35, r24	; 53
 //SETPOINT_R = 50; 
 
 //power_spi_disable();
 //power_twi_disable();
 //power_usart_disable();
 power_usi_disable();
     27a:	01 9a       	sbi	0x00, 1	; 0
 ACSR |= (1 << ACD);
     27c:	47 9a       	sbi	0x08, 7	; 8

}
     27e:	08 95       	ret

00000280 <advance_LED>:
void advance_LED()
{
  mode_changed = 32;
     280:	80 e2       	ldi	r24, 0x20	; 32
     282:	80 93 68 00 	sts	0x0068, r24
  current_setpoint++;
     286:	80 91 73 00 	lds	r24, 0x0073
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 73 00 	sts	0x0073, r24

  if (current_setpoint >= NUM_OF_LED_STATES)
     290:	86 30       	cpi	r24, 0x06	; 6
     292:	88 f5       	brcc	.+98     	; 0x2f6 <advance_LED+0x76>
     294:	e8 2f       	mov	r30, r24
     296:	f0 e0       	ldi	r31, 0x00	; 0
  {
     current_setpoint = 0;
     //killit = 1;
  }
  //SETPOINT_R = LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index];
  LEDS[LED_L].setpoint_index = current_setpoint;                        
     298:	80 93 8d 00 	sts	0x008D, r24
  LEDS[LED_R].setpoint_index = current_setpoint; 
     29c:	80 93 a3 00 	sts	0x00A3, r24
  LEDS[LED_L].seeking = 20;                        
     2a0:	84 e1       	ldi	r24, 0x14	; 20
     2a2:	80 93 8e 00 	sts	0x008E, r24
  LEDS[LED_R].seeking = 20; 
     2a6:	80 93 a4 00 	sts	0x00A4, r24
 // (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[current_setpoint];
 // (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[current_setpoint];
  if (LEDS[LED_L].setpoints[LEDS[LED_L].setpoint_index] == 0) 
     2aa:	e3 57       	subi	r30, 0x73	; 115
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	88 23       	and	r24, r24
     2b2:	71 f4       	brne	.+28     	; 0x2d0 <advance_LED+0x50>
  {
    (*(LEDS[LED_L].PWM_out)) = 0;
     2b4:	e0 91 a1 00 	lds	r30, 0x00A1
     2b8:	f0 91 a2 00 	lds	r31, 0x00A2
     2bc:	10 82       	st	Z, r1
    LEDS[LED_L].pwm_buffer = 0;
     2be:	10 92 9f 00 	sts	0x009F, r1
    LEDS[LED_L].pwm_dither = 0;    
     2c2:	10 92 a0 00 	sts	0x00A0, r1
     2c6:	e0 91 a3 00 	lds	r30, 0x00A3
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	e3 57       	subi	r30, 0x73	; 115
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
  }
  if (LEDS[LED_R].setpoints[LEDS[LED_R].setpoint_index] == 0) 
     2d0:	80 8d       	ldd	r24, Z+24	; 0x18
     2d2:	88 23       	and	r24, r24
     2d4:	49 f4       	brne	.+18     	; 0x2e8 <advance_LED+0x68>
  {
    (*(LEDS[LED_R].PWM_out)) = 0;
     2d6:	e0 91 b7 00 	lds	r30, 0x00B7
     2da:	f0 91 b8 00 	lds	r31, 0x00B8
     2de:	10 82       	st	Z, r1
    LEDS[LED_R].pwm_buffer = 0;
     2e0:	10 92 b5 00 	sts	0x00B5, r1
    LEDS[LED_R].pwm_dither = 0;
     2e4:	10 92 b6 00 	sts	0x00B6, r1
  }
  
  if (current_setpoint == 0)
     2e8:	80 91 73 00 	lds	r24, 0x0073
     2ec:	88 23       	and	r24, r24
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <advance_LED+0x74>
  {
    runtime = 0;
     2f0:	10 92 74 00 	sts	0x0074, r1
     2f4:	08 95       	ret
  mode_changed = 32;
  current_setpoint++;

  if (current_setpoint >= NUM_OF_LED_STATES)
  {
     current_setpoint = 0;
     2f6:	10 92 73 00 	sts	0x0073, r1
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	cb cf       	rjmp	.-106    	; 0x298 <advance_LED+0x18>

00000302 <shutdown>:
 
}

void shutdown() //turn everything off then go into powerdown, note execution will resume from within this function.
{
  cli();
     302:	f8 94       	cli
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
  _delay_ms(100);
  */
//reset LED state to being off
 last_setpoint = current_setpoint; 
     304:	80 91 73 00 	lds	r24, 0x0073
     308:	80 93 75 00 	sts	0x0075, r24
 current_setpoint = NUM_OF_LED_STATES-1;
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	80 93 73 00 	sts	0x0073, r24
 advance_LED();
     312:	b6 df       	rcall	.-148    	; 0x280 <advance_LED>

//really turn it off.  
  OCR0A = 0;
     314:	16 be       	out	0x36, r1	; 54
  OCR0B = 0;
     316:	1c be       	out	0x3c, r1	; 60
  TCCR0A = 0;
     318:	10 be       	out	0x30, r1	; 48
  TCCR0B = 0;     
     31a:	13 be       	out	0x33, r1	; 51
  PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     31c:	80 b5       	in	r24, 0x20	; 32
     31e:	83 60       	ori	r24, 0x03	; 3
     320:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	9f e3       	ldi	r25, 0x3F	; 63
     326:	a6 e0       	ldi	r26, 0x06	; 6
     328:	81 50       	subi	r24, 0x01	; 1
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	a0 40       	sbci	r26, 0x00	; 0
     32e:	e1 f7       	brne	.-8      	; 0x328 <shutdown+0x26>
     330:	00 c0       	rjmp	.+0      	; 0x332 <shutdown+0x30>
     332:	00 00       	nop
  _delay_ms(256);
  //power_all_disable();
  //power_adc_disable();

  ADCSRA &= ~(1 << ADEN);  //disable adc power, the thing in power.h doesnt work
     334:	37 98       	cbi	0x06, 7	; 6
  set_sleep_mode(SLEEP_MODE_PWR_DOWN); 
     336:	85 b7       	in	r24, 0x35	; 53
     338:	87 7e       	andi	r24, 0xE7	; 231
     33a:	80 61       	ori	r24, 0x10	; 16
     33c:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     33e:	85 b7       	in	r24, 0x35	; 53
     340:	80 62       	ori	r24, 0x20	; 32
     342:	85 bf       	out	0x35, r24	; 53
  //sleep_bod_disable();
  sei();
     344:	78 94       	sei
  sleep_cpu();
     346:	88 95       	sleep
  //power_all_enable();
  ADCSRA |= (1 << ADEN);  //enable adc power, the thing in power.h doesnt work
     348:	37 9a       	sbi	0x06, 7	; 6
  power_usi_disable();  
     34a:	01 9a       	sbi	0x00, 1	; 0
  TCCR0A |= ((1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00)); // clear on compare match, fast pwm mode
     34c:	80 b7       	in	r24, 0x30	; 48
     34e:	83 6a       	ori	r24, 0xA3	; 163
     350:	80 bf       	out	0x30, r24	; 48
  TCCR0B |= ((1 << CS00)); 
     352:	83 b7       	in	r24, 0x33	; 51
     354:	81 60       	ori	r24, 0x01	; 1
     356:	83 bf       	out	0x33, r24	; 51
  vbat_cut_noise = 255;
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	80 93 67 00 	sts	0x0067, r24
  low_bat_noise = 255;
     35e:	80 93 66 00 	sts	0x0066, r24
  LowBatt = 0;
     362:	10 92 77 00 	sts	0x0077, r1

}    
     366:	08 95       	ret

00000368 <idle>:

void idle()
{
 cli();
     368:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE); 
     36a:	85 b7       	in	r24, 0x35	; 53
     36c:	87 7e       	andi	r24, 0xE7	; 231
     36e:	85 bf       	out	0x35, r24	; 53
  sleep_enable();  
     370:	85 b7       	in	r24, 0x35	; 53
     372:	80 62       	ori	r24, 0x20	; 32
     374:	85 bf       	out	0x35, r24	; 53
  sei();
     376:	78 94       	sei
  sleep_cpu();
     378:	88 95       	sleep
} 
     37a:	08 95       	ret

0000037c <button_down>:


void button_down()
{
//  static enum BUTTON_STATES last_button_state = UP
}
     37c:	08 95       	ret

0000037e <button_up>:

void button_up()
{
  vbat_cut_noise = 255;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	80 93 67 00 	sts	0x0067, r24

  
  if ((button_hold_down_time < 50) && (mode != LOCK)) // this is a short button press
     384:	80 91 71 00 	lds	r24, 0x0071
     388:	90 91 72 00 	lds	r25, 0x0072
     38c:	82 33       	cpi	r24, 0x32	; 50
     38e:	91 05       	cpc	r25, r1
     390:	f0 f5       	brcc	.+124    	; 0x40e <button_up+0x90>
     392:	20 91 8b 00 	lds	r18, 0x008B
     396:	30 91 8c 00 	lds	r19, 0x008C
     39a:	21 30       	cpi	r18, 0x01	; 1
     39c:	31 05       	cpc	r19, r1
     39e:	39 f0       	breq	.+14     	; 0x3ae <button_up+0x30>
  {
    if (current_setpoint > 0) //torch is on
     3a0:	40 91 73 00 	lds	r20, 0x0073
     3a4:	44 23       	and	r20, r20
     3a6:	59 f1       	breq	.+86     	; 0x3fe <button_up+0x80>
    {
     killit = 1;
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	40 93 76 00 	sts	0x0076, r20
      current_setpoint = 2;        // full power
      advance_LED(); 
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
     3ae:	ac 01       	movw	r20, r24
     3b0:	41 50       	subi	r20, 0x01	; 1
     3b2:	56 40       	sbci	r21, 0x06	; 6
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	4d 3f       	cpi	r20, 0xFD	; 253
     3b8:	56 07       	cpc	r21, r22
     3ba:	38 f4       	brcc	.+14     	; 0x3ca <button_up+0x4c>
     3bc:	40 91 87 00 	lds	r20, 0x0087
     3c0:	50 91 88 00 	lds	r21, 0x0088
     3c4:	41 30       	cpi	r20, 0x01	; 1
     3c6:	51 05       	cpc	r21, r1
     3c8:	b9 f1       	breq	.+110    	; 0x438 <button_up+0xba>
     mode = LOCK;
     killit = 1;
    }
  }
      
  if ((button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END)) //toggle shop mode
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	90 41       	sbci	r25, 0x10	; 16
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	8f 3f       	cpi	r24, 0xFF	; 255
     3d2:	94 07       	cpc	r25, r20
     3d4:	60 f4       	brcc	.+24     	; 0x3ee <button_up+0x70>
  {
    if (shop_flag == INSTORE)
     3d6:	80 91 87 00 	lds	r24, 0x0087
     3da:	90 91 88 00 	lds	r25, 0x0088
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	f9 f4       	brne	.+62     	; 0x420 <button_up+0xa2>
    {
      shop_flag = INUSE;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 88 00 	sts	0x0088, r25
     3ea:	80 93 87 00 	sts	0x0087, r24
    } else {
     shop_flag = INSTORE;
    }
  }    
         
  button_hold_down_time = 0;
     3ee:	10 92 72 00 	sts	0x0072, r1
     3f2:	10 92 71 00 	sts	0x0071, r1
  
  if (mode == LOCK)
     3f6:	21 30       	cpi	r18, 0x01	; 1
     3f8:	31 05       	cpc	r19, r1
     3fa:	71 f0       	breq	.+28     	; 0x418 <button_up+0x9a>
     3fc:	08 95       	ret
  {
    if (current_setpoint > 0) //torch is on
    {
     killit = 1;
    } else {                  // torch is off
      current_setpoint = 2;        // full power
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 73 00 	sts	0x0073, r24
      advance_LED(); 
     404:	3d df       	rcall	.-390    	; 0x280 <advance_LED>
     406:	80 91 71 00 	lds	r24, 0x0071
     40a:	90 91 72 00 	lds	r25, 0x0072
     40e:	20 91 8b 00 	lds	r18, 0x008B
     412:	30 91 8c 00 	lds	r19, 0x008C
     416:	cb cf       	rjmp	.-106    	; 0x3ae <button_up+0x30>
         
  button_hold_down_time = 0;
  
  if (mode == LOCK)
  {
    killit = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 76 00 	sts	0x0076, r24
     41e:	08 95       	ret
  {
    if (shop_flag == INSTORE)
    {
      shop_flag = INUSE;
    } else {
     shop_flag = INSTORE;
     420:	10 92 88 00 	sts	0x0088, r1
     424:	10 92 87 00 	sts	0x0087, r1
    }
  }    
         
  button_hold_down_time = 0;
     428:	10 92 72 00 	sts	0x0072, r1
     42c:	10 92 71 00 	sts	0x0071, r1
  
  if (mode == LOCK)
     430:	21 30       	cpi	r18, 0x01	; 1
     432:	31 05       	cpc	r19, r1
     434:	19 f7       	brne	.-58     	; 0x3fc <button_up+0x7e>
     436:	f0 cf       	rjmp	.-32     	; 0x418 <button_up+0x9a>
    }
  }

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
     438:	21 30       	cpi	r18, 0x01	; 1
     43a:	31 05       	cpc	r19, r1
     43c:	51 f0       	breq	.+20     	; 0x452 <button_up+0xd4>
    {
      mode = NORMAL;
    } else {
     mode = LOCK;
     43e:	50 93 8c 00 	sts	0x008C, r21
     442:	40 93 8b 00 	sts	0x008B, r20
     killit = 1;
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	20 93 76 00 	sts	0x0076, r18
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	bc cf       	rjmp	.-136    	; 0x3ca <button_up+0x4c>

  if ((button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag == INUSE)) //toggle lock mode
  {
    if (mode == LOCK)
    {
      mode = NORMAL;
     452:	10 92 8c 00 	sts	0x008C, r1
     456:	10 92 8b 00 	sts	0x008B, r1
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	b5 cf       	rjmp	.-150    	; 0x3ca <button_up+0x4c>

00000460 <WDT_off>:
  }
}

void WDT_off(void)
{
   wdt_reset();
     460:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
     462:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
     464:	81 b5       	in	r24, 0x21	; 33
     466:	88 61       	ori	r24, 0x18	; 24
     468:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
     46a:	11 bc       	out	0x21, r1	; 33
}
     46c:	08 95       	ret

0000046e <main>:
  }
}

void WDT_off(void)
{
   wdt_reset();
     46e:	a8 95       	wdr
  /* Clear WDRF in MCUSR */
  MCUSR = 0x00;
     470:	14 be       	out	0x34, r1	; 52
  /* Write logical one to WDCE and WDE */
  WDTCSR |= (1<<WDCE) | (1<<WDE);
     472:	81 b5       	in	r24, 0x21	; 33
     474:	88 61       	ori	r24, 0x18	; 24
     476:	81 bd       	out	0x21, r24	; 33
  /* Turn off WDT */
  WDTCSR = 0x00;
     478:	11 bc       	out	0x21, r1	; 33
{

  //wdt_disable();
  WDT_off();
  //wdt_enable(WDTO_4S);
  init_sw();
     47a:	70 de       	rcall	.-800    	; 0x15c <init_sw>
  init_hw();
     47c:	cf de       	rcall	.-610    	; 0x21c <init_hw>
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
     47e:	e0 91 a1 00 	lds	r30, 0x00A1
     482:	f0 91 a2 00 	lds	r31, 0x00A2
     486:	80 91 98 00 	lds	r24, 0x0098
     48a:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
     48c:	e0 91 b7 00 	lds	r30, 0x00B7
     490:	f0 91 b8 00 	lds	r31, 0x00B8
     494:	80 91 ae 00 	lds	r24, 0x00AE
     498:	80 83       	st	Z, r24
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	90 e7       	ldi	r25, 0x70	; 112
     49e:	a2 e0       	ldi	r26, 0x02	; 2
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	a0 40       	sbci	r26, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <main+0x32>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <main+0x3c>
     4aa:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
     4ac:	e0 91 a1 00 	lds	r30, 0x00A1
     4b0:	f0 91 a2 00 	lds	r31, 0x00A2
     4b4:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
     4b6:	e0 91 b7 00 	lds	r30, 0x00B7
     4ba:	f0 91 b8 00 	lds	r31, 0x00B8
     4be:	10 82       	st	Z, r1
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	90 e7       	ldi	r25, 0x70	; 112
     4c4:	a2 e0       	ldi	r26, 0x02	; 2
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	a0 40       	sbci	r26, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <main+0x58>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x62>
     4d0:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[3];
     4d2:	e0 91 a1 00 	lds	r30, 0x00A1
     4d6:	f0 91 a2 00 	lds	r31, 0x00A2
     4da:	80 91 98 00 	lds	r24, 0x0098
     4de:	80 83       	st	Z, r24
  (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[3];
     4e0:	e0 91 b7 00 	lds	r30, 0x00B7
     4e4:	f0 91 b8 00 	lds	r31, 0x00B8
     4e8:	80 91 ae 00 	lds	r24, 0x00AE
     4ec:	80 83       	st	Z, r24
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	90 e7       	ldi	r25, 0x70	; 112
     4f2:	a2 e0       	ldi	r26, 0x02	; 2
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	a0 40       	sbci	r26, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x86>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x90>
     4fe:	00 00       	nop
  _delay_ms(100);
  (*(LEDS[LED_L].PWM_out)) = 0;
     500:	e0 91 a1 00 	lds	r30, 0x00A1
     504:	f0 91 a2 00 	lds	r31, 0x00A2
     508:	10 82       	st	Z, r1
  (*(LEDS[LED_R].PWM_out)) = 0;
     50a:	e0 91 b7 00 	lds	r30, 0x00B7
     50e:	f0 91 b8 00 	lds	r31, 0x00B8
     512:	10 82       	st	Z, r1
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	90 e7       	ldi	r25, 0x70	; 112
     518:	a2 e0       	ldi	r26, 0x02	; 2
     51a:	81 50       	subi	r24, 0x01	; 1
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	a0 40       	sbci	r26, 0x00	; 0
     520:	e1 f7       	brne	.-8      	; 0x51a <main+0xac>
     522:	00 c0       	rjmp	.+0      	; 0x524 <main+0xb6>
     524:	00 00       	nop
  _delay_ms(100);

  charge_from_boot = 0;
     526:	10 92 70 00 	sts	0x0070, r1

    if (!C_CHECKBIT(CHARGE))
     52a:	b1 99       	sbic	0x16, 1	; 22
     52c:	5a c0       	rjmp	.+180    	; 0x5e2 <main+0x174>
    {
      charging = 1;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 6f 00 	sts	0x006F, r24
    charge_flash++;
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
    {
      charge_flash = 0;
     534:	80 e0       	ldi	r24, 0x00	; 0
      (*(LEDS[LED_R].PWM_out)) = 0;
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    {
      charging = 1;
     536:	91 e0       	ldi	r25, 0x01	; 1
      charging = 1;
    } else {
      charging = 0;
    }
  uint8_t charge_flash = 0;  //used for the delay loop to flash the charging LED, each count is 10msec    
  while (charging == 1)  
     538:	20 91 6f 00 	lds	r18, 0x006F
     53c:	21 30       	cpi	r18, 0x01	; 1
     53e:	99 f5       	brne	.+102    	; 0x5a6 <main+0x138>
  {
    
    charge_flash++;
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	af e1       	ldi	r26, 0x1F	; 31
     544:	be e4       	ldi	r27, 0x4E	; 78
     546:	11 97       	sbiw	r26, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <main+0xd8>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <main+0xde>
     54c:	00 00       	nop
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
     54e:	85 36       	cpi	r24, 0x65	; 101
     550:	b8 f4       	brcc	.+46     	; 0x580 <main+0x112>
      charge_flash = 0;
    }
    


    if (charge_flash < 20)
     552:	84 31       	cpi	r24, 0x14	; 20
     554:	b0 f0       	brcs	.+44     	; 0x582 <main+0x114>
    {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[2];  //medium brightness on the wide angle LED
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[2];
    } else {
      (*(LEDS[LED_L].PWM_out)) = 0;
     556:	e0 91 a1 00 	lds	r30, 0x00A1
     55a:	f0 91 a2 00 	lds	r31, 0x00A2
     55e:	10 82       	st	Z, r1
      (*(LEDS[LED_R].PWM_out)) = 0;
     560:	e0 91 b7 00 	lds	r30, 0x00B7
     564:	f0 91 b8 00 	lds	r31, 0x00B8
     568:	10 82       	st	Z, r1
    }

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
     56a:	b1 99       	sbic	0x16, 1	; 22
     56c:	19 c0       	rjmp	.+50     	; 0x5a0 <main+0x132>
    {
      charging = 1;
     56e:	90 93 6f 00 	sts	0x006F, r25
    } else {
      charging = 0;
    }
    
    if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed kill the charge flash loop
     572:	b0 99       	sbic	0x16, 0	; 22
     574:	e1 cf       	rjmp	.-62     	; 0x538 <main+0xca>
    {
      charge_from_boot = 1;
     576:	90 93 70 00 	sts	0x0070, r25
      charging = 0;
     57a:	10 92 6f 00 	sts	0x006F, r1
     57e:	dc cf       	rjmp	.-72     	; 0x538 <main+0xca>
    charge_flash++;
    _delay_ms(10);             
      
    if (charge_flash > 100)    // reset at 1 second
    {
      charge_flash = 0;
     580:	80 e0       	ldi	r24, 0x00	; 0
    


    if (charge_flash < 20)
    {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].hints[2];  //medium brightness on the wide angle LED
     582:	e0 91 a1 00 	lds	r30, 0x00A1
     586:	f0 91 a2 00 	lds	r31, 0x00A2
     58a:	20 91 97 00 	lds	r18, 0x0097
     58e:	20 83       	st	Z, r18
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].hints[2];
     590:	e0 91 b7 00 	lds	r30, 0x00B7
     594:	f0 91 b8 00 	lds	r31, 0x00B8
     598:	20 91 ad 00 	lds	r18, 0x00AD
     59c:	20 83       	st	Z, r18
     59e:	e5 cf       	rjmp	.-54     	; 0x56a <main+0xfc>

    if (!C_CHECKBIT(CHARGE))  //charging has stopped either cable removed or battery full
    {
      charging = 1;
    } else {
      charging = 0;
     5a0:	10 92 6f 00 	sts	0x006F, r1
     5a4:	e6 cf       	rjmp	.-52     	; 0x572 <main+0x104>
    }
          
    
  } 

  if (!C_CHECKBIT(CHARGE))  // set the flag again if we got here by the button being pressed.
     5a6:	b1 99       	sbic	0x16, 1	; 22
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <main+0x142>
  {
    charging = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 6f 00 	sts	0x006F, r24
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	90 e7       	ldi	r25, 0x70	; 112
     5b4:	a2 e0       	ldi	r26, 0x02	; 2
     5b6:	81 50       	subi	r24, 0x01	; 1
     5b8:	90 40       	sbci	r25, 0x00	; 0
     5ba:	a0 40       	sbci	r26, 0x00	; 0
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <main+0x148>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x152>
     5c0:	00 00       	nop
  } 
  
  _delay_ms(100); //debounce button
  while (!C_CHECKBIT(BUTTON1))  //wait for button to be released
     5c2:	b0 9b       	sbis	0x16, 0	; 22
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <main+0x154>
  }  

  
        
//SETPOINT = 130;
sei();
     5c6:	78 94       	sei

killit = 1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 76 00 	sts	0x0076, r24
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <main+0x164>
   if (killit == 1)
   {
     shutdown();
     killit = 0;
   } else {
     idle(); 
     5d0:	cb de       	rcall	.-618    	; 0x368 <idle>

  
 while (1 == 1)
 { 
   //this will execute after every timer interrupt, and idle the chip when it hits the end of the loop.
   if (killit == 1)
     5d2:	80 91 76 00 	lds	r24, 0x0076
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	d9 f7       	brne	.-10     	; 0x5d0 <main+0x162>
   {
     shutdown();
     5da:	93 de       	rcall	.-730    	; 0x302 <shutdown>
     killit = 0;
     5dc:	10 92 76 00 	sts	0x0076, r1
     5e0:	f8 cf       	rjmp	.-16     	; 0x5d2 <main+0x164>

    if (!C_CHECKBIT(CHARGE))
    {
      charging = 1;
    } else {
      charging = 0;
     5e2:	10 92 6f 00 	sts	0x006F, r1
     5e6:	a6 cf       	rjmp	.-180    	; 0x534 <main+0xc6>

000005e8 <__vector_13>:
 }
}


ISR(ADC_vect) 
{ 
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
  static uint16_t num_of_samples = 0; //how many samples have we taken for this channel.
  static uint16_t battery_delayer = 0;
  
  uint8_t adc_val = 0;
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
     612:	80 91 68 00 	lds	r24, 0x0068
     616:	88 23       	and	r24, r24
     618:	09 f4       	brne	.+2      	; 0x61c <__vector_13+0x34>
     61a:	5b c0       	rjmp	.+182    	; 0x6d2 <__vector_13+0xea>
  {
    SAMPLES_TO_AVG = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 69 00 	sts	0x0069, r24
  } else {
    SAMPLES_TO_AVG = 128;
  }
  if (ADC_changed == 0)
     622:	80 91 6b 00 	lds	r24, 0x006B
     626:	88 23       	and	r24, r24
     628:	09 f0       	breq	.+2      	; 0x62c <__vector_13+0x44>
     62a:	5b c0       	rjmp	.+182    	; 0x6e2 <__vector_13+0xfa>
  {
    num_of_samples++;
     62c:	40 91 7d 00 	lds	r20, 0x007D
     630:	50 91 7e 00 	lds	r21, 0x007E
     634:	4f 5f       	subi	r20, 0xFF	; 255
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	50 93 7e 00 	sts	0x007E, r21
     63c:	40 93 7d 00 	sts	0x007D, r20
    avg_adc_val += ADCH;
     640:	25 b1       	in	r18, 0x05	; 5
     642:	60 91 7f 00 	lds	r22, 0x007F
     646:	70 91 80 00 	lds	r23, 0x0080
     64a:	80 91 81 00 	lds	r24, 0x0081
     64e:	90 91 82 00 	lds	r25, 0x0082
     652:	62 0f       	add	r22, r18
     654:	71 1d       	adc	r23, r1
     656:	81 1d       	adc	r24, r1
     658:	91 1d       	adc	r25, r1
     65a:	60 93 7f 00 	sts	0x007F, r22
     65e:	70 93 80 00 	sts	0x0080, r23
     662:	80 93 81 00 	sts	0x0081, r24
     666:	90 93 82 00 	sts	0x0082, r25
    if (num_of_samples >= SAMPLES_TO_AVG )
     66a:	20 91 69 00 	lds	r18, 0x0069
     66e:	e2 2f       	mov	r30, r18
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	4e 17       	cp	r20, r30
     674:	5f 07       	cpc	r21, r31
     676:	08 f4       	brcc	.+2      	; 0x67a <__vector_13+0x92>
     678:	4e c0       	rjmp	.+156    	; 0x716 <__vector_13+0x12e>
    {
 
      adc_val = avg_adc_val / SAMPLES_TO_AVG ;
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	5c d7       	rcall	.+3768   	; 0x153a <__udivmodsi4>
      
      avg_adc_val = 0;
     682:	10 92 7f 00 	sts	0x007F, r1
     686:	10 92 80 00 	sts	0x0080, r1
     68a:	10 92 81 00 	sts	0x0081, r1
     68e:	10 92 82 00 	sts	0x0082, r1
      num_of_samples = 0;
     692:	10 92 7e 00 	sts	0x007E, r1
     696:	10 92 7d 00 	sts	0x007D, r1
      
      if (working_LED < 2)   
     69a:	30 91 6a 00 	lds	r19, 0x006A
     69e:	43 2f       	mov	r20, r19
     6a0:	32 30       	cpi	r19, 0x02	; 2
     6a2:	d8 f1       	brcs	.+118    	; 0x71a <__vector_13+0x132>
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     6a4:	32 30       	cpi	r19, 0x02	; 2
     6a6:	09 f4       	brne	.+2      	; 0x6aa <__vector_13+0xc2>
     6a8:	a9 c0       	rjmp	.+338    	; 0x7fc <__vector_13+0x214>
            }
          }
        }
      }

    working_LED++;
     6aa:	e3 2f       	mov	r30, r19
     6ac:	ef 5f       	subi	r30, 0xFF	; 255
     6ae:	e0 93 6a 00 	sts	0x006A, r30
    if (working_LED == 2)
     6b2:	e2 30       	cpi	r30, 0x02	; 2
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <__vector_13+0xd0>
     6b6:	ab c0       	rjmp	.+342    	; 0x80e <__vector_13+0x226>
      } else {
        working_LED = 2;
      }
      
    }
    if (working_LED == 3)
     6b8:	e3 30       	cpi	r30, 0x03	; 3
     6ba:	09 f4       	brne	.+2      	; 0x6be <__vector_13+0xd6>
     6bc:	a3 c0       	rjmp	.+326    	; 0x804 <__vector_13+0x21c>
     6be:	f0 e0       	ldi	r31, 0x00	; 0
    {
      working_LED = 0;
    }
      ADMUX = adc_muxes[working_LED];      
     6c0:	ec 57       	subi	r30, 0x7C	; 124
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 81       	ld	r24, Z
     6c6:	87 b9       	out	0x07, r24	; 7
      ADC_changed = 2;
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	80 93 6b 00 	sts	0x006B, r24
      ADCSRA |= (1 << ADSC); // take another sample
     6ce:	36 9a       	sbi	0x06, 6	; 6
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <__vector_13+0x102>
//  uint8_t adjustment_amt = 0;
  if (mode_changed > 0)
  {
    SAMPLES_TO_AVG = 1;
  } else {
    SAMPLES_TO_AVG = 128;
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	80 93 69 00 	sts	0x0069, r24
  }
  if (ADC_changed == 0)
     6d8:	80 91 6b 00 	lds	r24, 0x006B
     6dc:	88 23       	and	r24, r24
     6de:	09 f4       	brne	.+2      	; 0x6e2 <__vector_13+0xfa>
     6e0:	a5 cf       	rjmp	.-182    	; 0x62c <__vector_13+0x44>
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
    }
    ADCSRA |= (1 << ADSC); // take another sample  
  } else {
    adc_val = ADCH; //toss this out
     6e2:	95 b1       	in	r25, 0x05	; 5
    ADC_changed--; //decriment to toss out N samples, set in the timer1 ISR.    
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	80 93 6b 00 	sts	0x006B, r24
    ADCSRA |= (1 << ADSC); // take another sample
     6ea:	36 9a       	sbi	0x06, 6	; 6
  }

  
}
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
      
    } else {
       ADCSRA |= (1 << ADSC); // take another sample
     716:	36 9a       	sbi	0x06, 6	; 6
     718:	e8 cf       	rjmp	.-48     	; 0x6ea <__vector_13+0x102>
      avg_adc_val = 0;
      num_of_samples = 0;
      
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
     71a:	e0 91 73 00 	lds	r30, 0x0073
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	83 2f       	mov	r24, r19
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	66 e1       	ldi	r22, 0x16	; 22
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	d6 d6       	rcall	.+3500   	; 0x14d6 <__mulhi3>
     72a:	dc 01       	movw	r26, r24
     72c:	a3 57       	subi	r26, 0x73	; 115
     72e:	bf 4f       	sbci	r27, 0xFF	; 255
     730:	ae 0f       	add	r26, r30
     732:	bf 1f       	adc	r27, r31
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	1c 91       	ld	r17, X
     738:	12 97       	sbiw	r26, 0x02	; 2
     73a:	11 23       	and	r17, r17
     73c:	09 f4       	brne	.+2      	; 0x740 <__vector_13+0x158>
     73e:	7a c0       	rjmp	.+244    	; 0x834 <__vector_13+0x24c>
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
          
        } else {
          
          if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] )) && (LEDS[working_LED].pwm_buffer > 0))
     740:	12 17       	cp	r17, r18
     742:	50 f5       	brcc	.+84     	; 0x798 <__vector_13+0x1b0>
     744:	83 2f       	mov	r24, r19
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	66 e1       	ldi	r22, 0x16	; 22
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	c4 d6       	rcall	.+3464   	; 0x14d6 <__mulhi3>
     74e:	dc 01       	movw	r26, r24
     750:	a3 57       	subi	r26, 0x73	; 115
     752:	bf 4f       	sbci	r27, 0xFF	; 255
     754:	52 96       	adiw	r26, 0x12	; 18
     756:	0c 91       	ld	r16, X
     758:	52 97       	sbiw	r26, 0x12	; 18
     75a:	00 23       	and	r16, r16
     75c:	e9 f0       	breq	.+58     	; 0x798 <__vector_13+0x1b0>
          {
            if (mode_changed > 0)
     75e:	80 91 68 00 	lds	r24, 0x0068
     762:	88 23       	and	r24, r24
     764:	09 f4       	brne	.+2      	; 0x768 <__vector_13+0x180>
     766:	f0 c0       	rjmp	.+480    	; 0x948 <__vector_13+0x360>
            { 
              LEDS[working_LED].pwm_buffer--;
     768:	83 2f       	mov	r24, r19
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	66 e1       	ldi	r22, 0x16	; 22
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	b2 d6       	rcall	.+3428   	; 0x14d6 <__mulhi3>
     772:	dc 01       	movw	r26, r24
     774:	a3 57       	subi	r26, 0x73	; 115
     776:	bf 4f       	sbci	r27, 0xFF	; 255
     778:	01 50       	subi	r16, 0x01	; 1
     77a:	52 96       	adiw	r26, 0x12	; 18
     77c:	0c 93       	st	X, r16
            } else {         
              LEDS[working_LED].pwm_dither--;
              if (LEDS[working_LED].pwm_dither > 250) //wrapped at zero
              {
                LEDS[working_LED].pwm_buffer--;
                LEDS[working_LED].pwm_dither = 15;
     77e:	84 2f       	mov	r24, r20
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	66 e1       	ldi	r22, 0x16	; 22
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	a7 d6       	rcall	.+3406   	; 0x14d6 <__mulhi3>
     788:	dc 01       	movw	r26, r24
     78a:	a3 57       	subi	r26, 0x73	; 115
     78c:	bf 4f       	sbci	r27, 0xFF	; 255
     78e:	ae 0f       	add	r26, r30
     790:	bf 1f       	adc	r27, r31
     792:	12 96       	adiw	r26, 0x02	; 2
     794:	1c 91       	ld	r17, X
     796:	12 97       	sbiw	r26, 0x02	; 2
              }
            }
          } 
          if ((adc_val < (LEDS[working_LED].setpoints[current_setpoint]) && (LEDS[working_LED].pwm_buffer < 255)))
     798:	21 17       	cp	r18, r17
     79a:	50 f5       	brcc	.+84     	; 0x7f0 <__vector_13+0x208>
     79c:	84 2f       	mov	r24, r20
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	66 e1       	ldi	r22, 0x16	; 22
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	98 d6       	rcall	.+3376   	; 0x14d6 <__mulhi3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	a3 57       	subi	r26, 0x73	; 115
     7aa:	bf 4f       	sbci	r27, 0xFF	; 255
     7ac:	52 96       	adiw	r26, 0x12	; 18
     7ae:	1c 91       	ld	r17, X
     7b0:	52 97       	sbiw	r26, 0x12	; 18
     7b2:	1f 3f       	cpi	r17, 0xFF	; 255
     7b4:	01 f1       	breq	.+64     	; 0x7f6 <__vector_13+0x20e>
          {
            if (mode_changed > 0)
     7b6:	80 91 68 00 	lds	r24, 0x0068
     7ba:	88 23       	and	r24, r24
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <__vector_13+0x1d8>
     7be:	8b c0       	rjmp	.+278    	; 0x8d6 <__vector_13+0x2ee>
            { 
              LEDS[working_LED].pwm_buffer++;
     7c0:	84 2f       	mov	r24, r20
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	66 e1       	ldi	r22, 0x16	; 22
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	86 d6       	rcall	.+3340   	; 0x14d6 <__mulhi3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	a3 57       	subi	r26, 0x73	; 115
     7ce:	bf 4f       	sbci	r27, 0xFF	; 255
     7d0:	1f 5f       	subi	r17, 0xFF	; 255
     7d2:	52 96       	adiw	r26, 0x12	; 18
     7d4:	1c 93       	st	X, r17
            } else {         
              LEDS[working_LED].pwm_dither++;
              if (LEDS[working_LED].pwm_dither > 15)
              {
                LEDS[working_LED].pwm_buffer++;
                LEDS[working_LED].pwm_dither = 0;
     7d6:	84 2f       	mov	r24, r20
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	66 e1       	ldi	r22, 0x16	; 22
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	7b d6       	rcall	.+3318   	; 0x14d6 <__mulhi3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	a3 57       	subi	r26, 0x73	; 115
     7e4:	bf 4f       	sbci	r27, 0xFF	; 255
     7e6:	ae 0f       	add	r26, r30
     7e8:	bf 1f       	adc	r27, r31
     7ea:	12 96       	adiw	r26, 0x02	; 2
     7ec:	1c 91       	ld	r17, X
     7ee:	12 97       	sbiw	r26, 0x02	; 2
          /*if ((adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (adc_val > (LEDS[working_LED].setpoints[current_setpoint] - 5)) && (LEDS[working_LED].seeking > 0))
          {
            LEDS[working_LED].seeking--;
          }          
          */
          if ((adc_val != (LEDS[working_LED].setpoints[current_setpoint] ))) // && (LEDS[working_LED].seeking > 0))
     7f0:	21 17       	cp	r18, r17
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <__vector_13+0x20e>
     7f4:	5a cf       	rjmp	.-332    	; 0x6aa <__vector_13+0xc2>
          {
            ADCSRA |= (1 << ADSC); // take another sample, shoot for convergance quickly
     7f6:	36 9a       	sbi	0x06, 6	; 6
     7f8:	34 2f       	mov	r19, r20
     7fa:	57 cf       	rjmp	.-338    	; 0x6aa <__vector_13+0xc2>
          }
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
     7fc:	80 91 68 00 	lds	r24, 0x0068
     800:	88 23       	and	r24, r24
     802:	39 f1       	breq	.+78     	; 0x852 <__vector_13+0x26a>
      }
      
    }
    if (working_LED == 3)
    {
      working_LED = 0;
     804:	10 92 6a 00 	sts	0x006A, r1
     808:	e0 e0       	ldi	r30, 0x00	; 0
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	59 cf       	rjmp	.-334    	; 0x6c0 <__vector_13+0xd8>
      }

    working_LED++;
    if (working_LED == 2)
    {
      battery_delayer++;
     80e:	20 91 7b 00 	lds	r18, 0x007B
     812:	30 91 7c 00 	lds	r19, 0x007C
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	30 93 7c 00 	sts	0x007C, r19
     81e:	20 93 7b 00 	sts	0x007B, r18
      if (battery_delayer == 1024)
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	38 07       	cpc	r19, r24
     828:	99 f1       	breq	.+102    	; 0x890 <__vector_13+0x2a8>
      {
        ADCSRA &= ~(1 << ADEN);
        ADMUX = adc_muxes[working_LED]; 
        ADCSRA |= (1 << ADEN);
      } else {
        working_LED = 2;
     82a:	e0 93 6a 00 	sts	0x006A, r30
     82e:	e2 e0       	ldi	r30, 0x02	; 2
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	46 cf       	rjmp	.-372    	; 0x6c0 <__vector_13+0xd8>
      if (working_LED < 2)   
      {
        if (LEDS[working_LED].setpoints[current_setpoint] == 0)
        {
          //should be off, we shouldn't run this ADC anyway FIXME
          (*(LEDS[working_LED].PWM_out)) = 0;
     834:	83 2f       	mov	r24, r19
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	66 e1       	ldi	r22, 0x16	; 22
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	4c d6       	rcall	.+3224   	; 0x14d6 <__mulhi3>
     83e:	fc 01       	movw	r30, r24
     840:	e3 57       	subi	r30, 0x73	; 115
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	04 88       	ldd	r0, Z+20	; 0x14
     846:	f5 89       	ldd	r31, Z+21	; 0x15
     848:	e0 2d       	mov	r30, r0
     84a:	10 82       	st	Z, r1
     84c:	30 91 6a 00 	lds	r19, 0x006A
     850:	2c cf       	rjmp	.-424    	; 0x6aa <__vector_13+0xc2>
          
        }
      } else { //vbat
        if ((working_LED == 2) && (mode_changed == 0)) // battery voltage test
        {        
          if (adc_val >= LOW_BATTERY_WARN) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     852:	23 35       	cpi	r18, 0x53	; 83
     854:	18 f1       	brcs	.+70     	; 0x89c <__vector_13+0x2b4>
          {
           // killit = 1;
            if (low_bat_noise > 0)
     856:	80 91 66 00 	lds	r24, 0x0066
     85a:	88 23       	and	r24, r24
     85c:	29 f0       	breq	.+10     	; 0x868 <__vector_13+0x280>
            {
              low_bat_noise--;
     85e:	80 91 66 00 	lds	r24, 0x0066
     862:	81 50       	subi	r24, 0x01	; 1
     864:	80 93 66 00 	sts	0x0066, r24
            {
              low_bat_noise++;
            }   
          }

          if (low_bat_noise < 20)
     868:	80 91 66 00 	lds	r24, 0x0066
     86c:	84 31       	cpi	r24, 0x14	; 20
     86e:	58 f5       	brcc	.+86     	; 0x8c6 <__vector_13+0x2de>
          {
            LowBatt = 1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 77 00 	sts	0x0077, r24
          } else {
            LowBatt = 0;
          }

                
          if (adc_val >= LOW_BATTERY_CUTOFF) //note because of how we measure vbat, lower voltages mean the ADCvalue is greater
     876:	29 35       	cpi	r18, 0x59	; 89
     878:	d8 f0       	brcs	.+54     	; 0x8b0 <__vector_13+0x2c8>
          {
            if (vbat_cut_noise > 0)
     87a:	80 91 67 00 	lds	r24, 0x0067
     87e:	88 23       	and	r24, r24
     880:	29 f1       	breq	.+74     	; 0x8cc <__vector_13+0x2e4>
            {
              vbat_cut_noise--;
     882:	80 91 67 00 	lds	r24, 0x0067
     886:	81 50       	subi	r24, 0x01	; 1
     888:	80 93 67 00 	sts	0x0067, r24
     88c:	32 e0       	ldi	r19, 0x02	; 2
     88e:	0d cf       	rjmp	.-486    	; 0x6aa <__vector_13+0xc2>
    if (working_LED == 2)
    {
      battery_delayer++;
      if (battery_delayer == 1024)
      {
        ADCSRA &= ~(1 << ADEN);
     890:	37 98       	cbi	0x06, 7	; 6
        ADMUX = adc_muxes[working_LED]; 
     892:	80 91 86 00 	lds	r24, 0x0086
     896:	87 b9       	out	0x07, r24	; 7
        ADCSRA |= (1 << ADEN);
     898:	37 9a       	sbi	0x06, 7	; 6
     89a:	11 cf       	rjmp	.-478    	; 0x6be <__vector_13+0xd6>
              low_bat_noise--;
            }                         
         
            
          } else {
            if (low_bat_noise < 255)
     89c:	80 91 66 00 	lds	r24, 0x0066
     8a0:	8f 3f       	cpi	r24, 0xFF	; 255
     8a2:	11 f3       	breq	.-60     	; 0x868 <__vector_13+0x280>
            {
              low_bat_noise++;
     8a4:	80 91 66 00 	lds	r24, 0x0066
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 93 66 00 	sts	0x0066, r24
     8ae:	dc cf       	rjmp	.-72     	; 0x868 <__vector_13+0x280>
            } else {
              killit = 1;
            }
          } else {
            
            if (vbat_cut_noise < 255)
     8b0:	80 91 67 00 	lds	r24, 0x0067
     8b4:	8f 3f       	cpi	r24, 0xFF	; 255
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__vector_13+0x2da>
            {
              vbat_cut_noise++;
     8b8:	80 91 67 00 	lds	r24, 0x0067
     8bc:	8f 5f       	subi	r24, 0xFF	; 255
     8be:	80 93 67 00 	sts	0x0067, r24
     8c2:	32 e0       	ldi	r19, 0x02	; 2
     8c4:	f2 ce       	rjmp	.-540    	; 0x6aa <__vector_13+0xc2>

          if (low_bat_noise < 20)
          {
            LowBatt = 1;
          } else {
            LowBatt = 0;
     8c6:	10 92 77 00 	sts	0x0077, r1
     8ca:	d5 cf       	rjmp	.-86     	; 0x876 <__vector_13+0x28e>
          {
            if (vbat_cut_noise > 0)
            {
              vbat_cut_noise--;
            } else {
              killit = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 76 00 	sts	0x0076, r24
     8d2:	32 e0       	ldi	r19, 0x02	; 2
     8d4:	ea ce       	rjmp	.-556    	; 0x6aa <__vector_13+0xc2>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer++;
            } else {         
              LEDS[working_LED].pwm_dither++;
     8d6:	84 2f       	mov	r24, r20
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	66 e1       	ldi	r22, 0x16	; 22
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	fb d5       	rcall	.+3062   	; 0x14d6 <__mulhi3>
     8e0:	dc 01       	movw	r26, r24
     8e2:	a3 57       	subi	r26, 0x73	; 115
     8e4:	bf 4f       	sbci	r27, 0xFF	; 255
     8e6:	53 96       	adiw	r26, 0x13	; 19
     8e8:	1c 91       	ld	r17, X
     8ea:	1f 5f       	subi	r17, 0xFF	; 255
     8ec:	84 2f       	mov	r24, r20
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	66 e1       	ldi	r22, 0x16	; 22
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	f0 d5       	rcall	.+3040   	; 0x14d6 <__mulhi3>
     8f6:	dc 01       	movw	r26, r24
     8f8:	a3 57       	subi	r26, 0x73	; 115
     8fa:	bf 4f       	sbci	r27, 0xFF	; 255
     8fc:	53 96       	adiw	r26, 0x13	; 19
     8fe:	1c 93       	st	X, r17
     900:	53 97       	sbiw	r26, 0x13	; 19
              if (LEDS[working_LED].pwm_dither > 15)
     902:	10 31       	cpi	r17, 0x10	; 16
     904:	08 f4       	brcc	.+2      	; 0x908 <__vector_13+0x320>
     906:	67 cf       	rjmp	.-306    	; 0x7d6 <__vector_13+0x1ee>
              {
                LEDS[working_LED].pwm_buffer++;
     908:	84 2f       	mov	r24, r20
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	66 e1       	ldi	r22, 0x16	; 22
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	e2 d5       	rcall	.+3012   	; 0x14d6 <__mulhi3>
     912:	dc 01       	movw	r26, r24
     914:	a3 57       	subi	r26, 0x73	; 115
     916:	bf 4f       	sbci	r27, 0xFF	; 255
     918:	84 2f       	mov	r24, r20
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	66 e1       	ldi	r22, 0x16	; 22
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	da d5       	rcall	.+2996   	; 0x14d6 <__mulhi3>
     922:	83 57       	subi	r24, 0x73	; 115
     924:	9f 4f       	sbci	r25, 0xFF	; 255
     926:	ec 01       	movw	r28, r24
     928:	8a 89       	ldd	r24, Y+18	; 0x12
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	52 96       	adiw	r26, 0x12	; 18
     92e:	8c 93       	st	X, r24
                LEDS[working_LED].pwm_dither = 0;
     930:	84 2f       	mov	r24, r20
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	66 e1       	ldi	r22, 0x16	; 22
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	ce d5       	rcall	.+2972   	; 0x14d6 <__mulhi3>
     93a:	dc 01       	movw	r26, r24
     93c:	a3 57       	subi	r26, 0x73	; 115
     93e:	bf 4f       	sbci	r27, 0xFF	; 255
     940:	53 96       	adiw	r26, 0x13	; 19
     942:	1c 92       	st	X, r1
     944:	53 97       	sbiw	r26, 0x13	; 19
     946:	47 cf       	rjmp	.-370    	; 0x7d6 <__vector_13+0x1ee>
          {
            if (mode_changed > 0)
            { 
              LEDS[working_LED].pwm_buffer--;
            } else {         
              LEDS[working_LED].pwm_dither--;
     948:	83 2f       	mov	r24, r19
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	66 e1       	ldi	r22, 0x16	; 22
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	c2 d5       	rcall	.+2948   	; 0x14d6 <__mulhi3>
     952:	dc 01       	movw	r26, r24
     954:	a3 57       	subi	r26, 0x73	; 115
     956:	bf 4f       	sbci	r27, 0xFF	; 255
     958:	53 96       	adiw	r26, 0x13	; 19
     95a:	1c 91       	ld	r17, X
     95c:	11 50       	subi	r17, 0x01	; 1
     95e:	83 2f       	mov	r24, r19
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	66 e1       	ldi	r22, 0x16	; 22
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	b7 d5       	rcall	.+2926   	; 0x14d6 <__mulhi3>
     968:	dc 01       	movw	r26, r24
     96a:	a3 57       	subi	r26, 0x73	; 115
     96c:	bf 4f       	sbci	r27, 0xFF	; 255
     96e:	53 96       	adiw	r26, 0x13	; 19
     970:	1c 93       	st	X, r17
     972:	53 97       	sbiw	r26, 0x13	; 19
              if (LEDS[working_LED].pwm_dither > 250) //wrapped at zero
     974:	1b 3f       	cpi	r17, 0xFB	; 251
     976:	08 f4       	brcc	.+2      	; 0x97a <__vector_13+0x392>
     978:	02 cf       	rjmp	.-508    	; 0x77e <__vector_13+0x196>
              {
                LEDS[working_LED].pwm_buffer--;
     97a:	83 2f       	mov	r24, r19
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	66 e1       	ldi	r22, 0x16	; 22
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	a9 d5       	rcall	.+2898   	; 0x14d6 <__mulhi3>
     984:	dc 01       	movw	r26, r24
     986:	a3 57       	subi	r26, 0x73	; 115
     988:	bf 4f       	sbci	r27, 0xFF	; 255
     98a:	83 2f       	mov	r24, r19
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	66 e1       	ldi	r22, 0x16	; 22
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	a1 d5       	rcall	.+2882   	; 0x14d6 <__mulhi3>
     994:	83 57       	subi	r24, 0x73	; 115
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	ec 01       	movw	r28, r24
     99a:	8a 89       	ldd	r24, Y+18	; 0x12
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	52 96       	adiw	r26, 0x12	; 18
     9a0:	8c 93       	st	X, r24
                LEDS[working_LED].pwm_dither = 15;
     9a2:	83 2f       	mov	r24, r19
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	66 e1       	ldi	r22, 0x16	; 22
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	95 d5       	rcall	.+2858   	; 0x14d6 <__mulhi3>
     9ac:	dc 01       	movw	r26, r24
     9ae:	a3 57       	subi	r26, 0x73	; 115
     9b0:	bf 4f       	sbci	r27, 0xFF	; 255
     9b2:	8f e0       	ldi	r24, 0x0F	; 15
     9b4:	53 96       	adiw	r26, 0x13	; 19
     9b6:	8c 93       	st	X, r24
     9b8:	53 97       	sbiw	r26, 0x13	; 19
     9ba:	e1 ce       	rjmp	.-574    	; 0x77e <__vector_13+0x196>

000009bc <__vector_11>:

  
}

ISR(TIM0_OVF_vect)
{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
  static uint8_t dither;
  if (dither > 15)
     9ce:	80 91 7a 00 	lds	r24, 0x007A
     9d2:	80 31       	cpi	r24, 0x10	; 16
     9d4:	00 f1       	brcs	.+64     	; 0xa16 <__vector_11+0x5a>
  {
    dither = 0;
     9d6:	10 92 7a 00 	sts	0x007A, r1
  } else {   
    dither++;
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     9da:	80 e0       	ldi	r24, 0x00	; 0
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
     9dc:	e0 91 a1 00 	lds	r30, 0x00A1
     9e0:	f0 91 a2 00 	lds	r31, 0x00A2
     9e4:	90 91 9f 00 	lds	r25, 0x009F
     9e8:	9f 5f       	subi	r25, 0xFF	; 255
     9ea:	90 83       	st	Z, r25
  }

  if (LEDS[LED_R].pwm_dither < dither)
     9ec:	90 91 b6 00 	lds	r25, 0x00B6
     9f0:	98 17       	cp	r25, r24
     9f2:	18 f1       	brcs	.+70     	; 0xa3a <__vector_11+0x7e>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
  }  else  {
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
     9f4:	e0 91 b7 00 	lds	r30, 0x00B7
     9f8:	f0 91 b8 00 	lds	r31, 0x00B8
     9fc:	80 91 b5 00 	lds	r24, 0x00B5
     a00:	8f 5f       	subi	r24, 0xFF	; 255
     a02:	80 83       	st	Z, r24
  }      
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti
  static uint8_t dither;
  if (dither > 15)
  {
    dither = 0;
  } else {   
    dither++;
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	80 93 7a 00 	sts	0x007A, r24
  }         
  
  if (LEDS[LED_L].pwm_dither < dither)
     a1c:	90 91 a0 00 	lds	r25, 0x00A0
     a20:	98 17       	cp	r25, r24
     a22:	e0 f6       	brcc	.-72     	; 0x9dc <__vector_11+0x20>
  {
    (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer;
     a24:	e0 91 a1 00 	lds	r30, 0x00A1
     a28:	f0 91 a2 00 	lds	r31, 0x00A2
     a2c:	90 91 9f 00 	lds	r25, 0x009F
     a30:	90 83       	st	Z, r25
  }  else  {
      (*(LEDS[LED_L].PWM_out)) = LEDS[LED_L].pwm_buffer + 1;
  }

  if (LEDS[LED_R].pwm_dither < dither)
     a32:	90 91 b6 00 	lds	r25, 0x00B6
     a36:	98 17       	cp	r25, r24
     a38:	e8 f6       	brcc	.-70     	; 0x9f4 <__vector_11+0x38>
  {
    (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer;
     a3a:	e0 91 b7 00 	lds	r30, 0x00B7
     a3e:	f0 91 b8 00 	lds	r31, 0x00B8
     a42:	80 91 b5 00 	lds	r24, 0x00B5
     a46:	80 83       	st	Z, r24
     a48:	dd cf       	rjmp	.-70     	; 0xa04 <__vector_11+0x48>

00000a4a <__vector_8>:
      (*(LEDS[LED_R].PWM_out)) = LEDS[LED_R].pwm_buffer + 1;
  }      
}

ISR(TIM1_OVF_vect)
{
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	0f 92       	push	r0
     a52:	11 24       	eor	r1, r1
     a54:	2f 93       	push	r18
     a56:	3f 93       	push	r19
     a58:	4f 93       	push	r20
     a5a:	5f 93       	push	r21
     a5c:	6f 93       	push	r22
     a5e:	7f 93       	push	r23
     a60:	8f 93       	push	r24
     a62:	9f 93       	push	r25
     a64:	af 93       	push	r26
     a66:	bf 93       	push	r27
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31

static uint8_t ISR_counter;
  ISR_counter++;
     a6c:	40 91 79 00 	lds	r20, 0x0079
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	40 93 79 00 	sts	0x0079, r20
  //++;
  if (debounce == 1)
     a76:	80 91 6c 00 	lds	r24, 0x006C
  {

    
  }
  if (mode_changed > 0)
     a7a:	80 91 68 00 	lds	r24, 0x0068
     a7e:	88 23       	and	r24, r24
     a80:	29 f0       	breq	.+10     	; 0xa8c <__vector_8+0x42>
  {
    mode_changed--;
     a82:	80 91 68 00 	lds	r24, 0x0068
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	80 93 68 00 	sts	0x0068, r24
  }
  
  if (debounce > 0)
     a8c:	80 91 6c 00 	lds	r24, 0x006C
     a90:	88 23       	and	r24, r24
     a92:	51 f0       	breq	.+20     	; 0xaa8 <__vector_8+0x5e>
    {
      debounce--;
     a94:	80 91 6c 00 	lds	r24, 0x006C
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	80 93 6c 00 	sts	0x006C, r24
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
     a9e:	80 91 6c 00 	lds	r24, 0x006C
     aa2:	88 23       	and	r24, r24
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <__vector_8+0x5e>
     aa6:	55 c0       	rjmp	.+170    	; 0xb52 <__vector_8+0x108>
        } else {
          if (button_state == DOWN) //needed in case the torch is running and the charger is connected
          {
          //  charging = 0;
            button_up();
            button_state = UP;
     aa8:	20 91 e5 00 	lds	r18, 0x00E5
     aac:	30 91 e6 00 	lds	r19, 0x00E6
          }
        }
      }
    }
  
  if (button_state == DOWN) 
     ab0:	21 30       	cpi	r18, 0x01	; 1
     ab2:	31 05       	cpc	r19, r1
     ab4:	09 f4       	brne	.+2      	; 0xab8 <__vector_8+0x6e>
     ab6:	72 c0       	rjmp	.+228    	; 0xb9c <__vector_8+0x152>
     ab8:	f0 91 73 00 	lds	r31, 0x0073
    killit = 1;
  }
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
     abc:	ff 23       	and	r31, r31
     abe:	29 f0       	breq	.+10     	; 0xaca <__vector_8+0x80>
     ac0:	84 2f       	mov	r24, r20
     ac2:	68 e7       	ldi	r22, 0x78	; 120
     ac4:	1a d5       	rcall	.+2612   	; 0x14fa <__udivmodqi4>
     ac6:	99 23       	and	r25, r25
     ac8:	79 f1       	breq	.+94     	; 0xb28 <__vector_8+0xde>



  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
     aca:	80 91 76 00 	lds	r24, 0x0076
     ace:	88 23       	and	r24, r24
     ad0:	29 f4       	brne	.+10     	; 0xadc <__vector_8+0x92>
     ad2:	80 91 77 00 	lds	r24, 0x0077
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	09 f4       	brne	.+2      	; 0xadc <__vector_8+0x92>
     ada:	f9 c0       	rjmp	.+498    	; 0xcce <__vector_8+0x284>


    //static uint8_t current_channel = 0;

    static uint8_t seconds_counter=0;
    if (ISR_counter % 128 == 0)
     adc:	4f 77       	andi	r20, 0x7F	; 127
     ade:	91 f4       	brne	.+36     	; 0xb04 <__vector_8+0xba>
    {
      seconds_counter++;
     ae0:	80 91 78 00 	lds	r24, 0x0078
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 93 78 00 	sts	0x0078, r24
  if  (demo_flag == DEMO)
     aea:	80 91 89 00 	lds	r24, 0x0089
     aee:	90 91 8a 00 	lds	r25, 0x008A
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	39 f4       	brne	.+14     	; 0xb04 <__vector_8+0xba>
    {
      if (current_setpoint >= NUM_OF_LED_STATES - 1) //skip the zero in advance_LED
     af6:	80 91 73 00 	lds	r24, 0x0073
     afa:	85 30       	cpi	r24, 0x05	; 5
     afc:	10 f0       	brcs	.+4      	; 0xb02 <__vector_8+0xb8>
      {
         current_setpoint = 0;
     afe:	10 92 73 00 	sts	0x0073, r1
      }
      advance_LED();
     b02:	be db       	rcall	.-2180   	; 0x280 <advance_LED>
      ADMUX = adc_muxes[working_LED];      
      ADC_changed = 2;
      ADCSRA |= (1 << ADSC); // take another sample
   */// }
  //} 
   ADCSRA |= (1 << ADSC); // take another sample
     b04:	36 9a       	sbi	0x06, 6	; 6
   

}
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti
  }
  
  
  if ((current_setpoint > 0) && (ISR_counter % 120 == 0)) //at least one LED is on and a second has elapsed (roughly 120 counts per second, note lumpy as isr_counter rolls over at 255)
  {
    if (runtime < 255)
     b28:	80 91 74 00 	lds	r24, 0x0074
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	69 f2       	breq	.-102    	; 0xaca <__vector_8+0x80>
    {
      runtime++;
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 74 00 	sts	0x0074, r24
      if ((shop_flag == INSTORE) && (runtime > 10))  
     b36:	20 91 87 00 	lds	r18, 0x0087
     b3a:	30 91 88 00 	lds	r19, 0x0088
     b3e:	21 15       	cp	r18, r1
     b40:	31 05       	cpc	r19, r1
     b42:	19 f6       	brne	.-122    	; 0xaca <__vector_8+0x80>
     b44:	8b 30       	cpi	r24, 0x0B	; 11
     b46:	08 f4       	brcc	.+2      	; 0xb4a <__vector_8+0x100>
     b48:	c0 cf       	rjmp	.-128    	; 0xaca <__vector_8+0x80>
      { 
        killit = 1;      
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 76 00 	sts	0x0076, r24
     b50:	bc cf       	rjmp	.-136    	; 0xaca <__vector_8+0x80>
  if (debounce > 0)
    {
      debounce--;
      if (debounce == 0)  //run this when we first hit 0, the previous if will stop this from repeating.
      {
        PCMSK1 |= (1 << PCINT8)| (1 << PCINT9);  //turn interrupts on for pin b0/pcint8
     b52:	80 b5       	in	r24, 0x20	; 32
     b54:	83 60       	ori	r24, 0x03	; 3
     b56:	80 bd       	out	0x20, r24	; 32
        
        if (!C_CHECKBIT(CHARGE))  //active low, button is pressed
     b58:	b1 99       	sbic	0x16, 1	; 22
     b5a:	de c0       	rjmp	.+444    	; 0xd18 <__vector_8+0x2ce>
        {
          charging = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 6f 00 	sts	0x006F, r24
          if (charge_from_boot == 0)
     b62:	80 91 70 00 	lds	r24, 0x0070
     b66:	88 23       	and	r24, r24
     b68:	49 f4       	brne	.+18     	; 0xb7c <__vector_8+0x132>
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	28 e1       	ldi	r18, 0x18	; 24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	a8 95       	wdr
     b76:	21 bd       	out	0x21, r18	; 33
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	81 bd       	out	0x21, r24	; 33
            killit = 1;
            charge_from_boot = 0;
          } 
        }
        
        if (!C_CHECKBIT(BUTTON1))  //active low, button is pressed
     b7c:	b0 99       	sbic	0x16, 0	; 22
     b7e:	df c0       	rjmp	.+446    	; 0xd3e <__vector_8+0x2f4>
        {
          if (button_state == UP) //needed in case the torch is running and the charger is connected
     b80:	20 91 e5 00 	lds	r18, 0x00E5
     b84:	30 91 e6 00 	lds	r19, 0x00E6
     b88:	21 15       	cp	r18, r1
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <__vector_8+0x146>
     b8e:	90 cf       	rjmp	.-224    	; 0xab0 <__vector_8+0x66>
          {
          //  charging = 0;
            button_down();
            button_state = DOWN;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	90 93 e6 00 	sts	0x00E6, r25
     b98:	80 93 e5 00 	sts	0x00E5, r24
      }
    }
  
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
     b9c:	20 91 71 00 	lds	r18, 0x0071
     ba0:	30 91 72 00 	lds	r19, 0x0072
     ba4:	2f 5f       	subi	r18, 0xFF	; 255
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	c9 01       	movw	r24, r18
     baa:	42 2f       	mov	r20, r18
     bac:	e9 2f       	mov	r30, r25
     bae:	30 93 72 00 	sts	0x0072, r19
     bb2:	20 93 71 00 	sts	0x0071, r18
    runtime = 0; // only counts time in a set state
     bb6:	10 92 74 00 	sts	0x0074, r1

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     bba:	80 91 8b 00 	lds	r24, 0x008B
     bbe:	90 91 8c 00 	lds	r25, 0x008C
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <__vector_8+0x180>
     bc8:	ca c0       	rjmp	.+404    	; 0xd5e <__vector_8+0x314>
      {
         current_setpoint = 1;
      }
      advance_LED();
    }
if ((button_hold_down_time % 64 == 0) && (button_hold_down_time < 1024) && (mode == NORMAL))
     bca:	c9 01       	movw	r24, r18
     bcc:	8f 73       	andi	r24, 0x3F	; 63
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	b9 f4       	brne	.+46     	; 0xc02 <__vector_8+0x1b8>
     bd4:	54 e0       	ldi	r21, 0x04	; 4
     bd6:	20 30       	cpi	r18, 0x00	; 0
     bd8:	35 07       	cpc	r19, r21
     bda:	28 f5       	brcc	.+74     	; 0xc26 <__vector_8+0x1dc>
     bdc:	80 91 8b 00 	lds	r24, 0x008B
     be0:	90 91 8c 00 	lds	r25, 0x008C
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	69 f4       	brne	.+26     	; 0xc02 <__vector_8+0x1b8>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //skip the zero in advance_LED
     be8:	80 91 73 00 	lds	r24, 0x0073
     bec:	85 30       	cpi	r24, 0x05	; 5
     bee:	10 f0       	brcs	.+4      	; 0xbf4 <__vector_8+0x1aa>
    {
       current_setpoint = 0;
     bf0:	10 92 73 00 	sts	0x0073, r1
    }
    advance_LED();
     bf4:	45 db       	rcall	.-2422   	; 0x280 <advance_LED>
     bf6:	40 91 71 00 	lds	r20, 0x0071
     bfa:	e0 91 72 00 	lds	r30, 0x0072
     bfe:	24 2f       	mov	r18, r20
     c00:	3e 2f       	mov	r19, r30
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
     c02:	2f 3f       	cpi	r18, 0xFF	; 255
     c04:	31 05       	cpc	r19, r1
     c06:	09 f0       	breq	.+2      	; 0xc0a <__vector_8+0x1c0>
     c08:	70 f4       	brcc	.+28     	; 0xc26 <__vector_8+0x1dc>
     c0a:	c9 01       	movw	r24, r18
     c0c:	62 e3       	ldi	r22, 0x32	; 50
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 d4       	rcall	.+2304   	; 0x1512 <__udivmodhi4>
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	41 f4       	brne	.+16     	; 0xc26 <__vector_8+0x1dc>
     c16:	80 91 8b 00 	lds	r24, 0x008B
     c1a:	90 91 8c 00 	lds	r25, 0x008C
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	91 05       	cpc	r25, r1
     c22:	09 f4       	brne	.+2      	; 0xc26 <__vector_8+0x1dc>
     c24:	b4 c0       	rjmp	.+360    	; 0xd8e <__vector_8+0x344>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     c26:	c9 01       	movw	r24, r18
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	91 40       	sbci	r25, 0x01	; 1
     c2c:	54 e0       	ldi	r21, 0x04	; 4
     c2e:	8f 3f       	cpi	r24, 0xFF	; 255
     c30:	95 07       	cpc	r25, r21
     c32:	08 f4       	brcc	.+2      	; 0xc36 <__vector_8+0x1ec>
     c34:	59 c0       	rjmp	.+178    	; 0xce8 <__vector_8+0x29e>
     c36:	f0 91 73 00 	lds	r31, 0x0073
      current_setpoint = NUM_OF_LED_STATES; 
      advance_LED();
    }
  }
     
  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > LOCK_START) && (button_hold_down_time < LOCK_END) && (shop_flag != INSTORE))
     c3a:	c9 01       	movw	r24, r18
     c3c:	62 e3       	ldi	r22, 0x32	; 50
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	68 d4       	rcall	.+2256   	; 0x1512 <__udivmodhi4>
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	d1 f5       	brne	.+116    	; 0xcba <__vector_8+0x270>
     c46:	86 e0       	ldi	r24, 0x06	; 6
     c48:	21 30       	cpi	r18, 0x01	; 1
     c4a:	38 07       	cpc	r19, r24
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <__vector_8+0x206>
     c4e:	70 c0       	rjmp	.+224    	; 0xd30 <__vector_8+0x2e6>
     c50:	57 e0       	ldi	r21, 0x07	; 7
     c52:	2e 3f       	cpi	r18, 0xFE	; 254
     c54:	35 07       	cpc	r19, r21
     c56:	d8 f4       	brcc	.+54     	; 0xc8e <__vector_8+0x244>
     c58:	80 91 87 00 	lds	r24, 0x0087
     c5c:	90 91 88 00 	lds	r25, 0x0088
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	09 f4       	brne	.+2      	; 0xc66 <__vector_8+0x21c>
     c64:	65 c0       	rjmp	.+202    	; 0xd30 <__vector_8+0x2e6>
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     c66:	f5 30       	cpi	r31, 0x05	; 5
     c68:	18 f0       	brcs	.+6      	; 0xc70 <__vector_8+0x226>
    {
       current_setpoint = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     c70:	07 db       	rcall	.-2546   	; 0x280 <advance_LED>
  }  

  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END))
     c72:	20 91 71 00 	lds	r18, 0x0071
     c76:	30 91 72 00 	lds	r19, 0x0072
     c7a:	c9 01       	movw	r24, r18
     c7c:	42 2f       	mov	r20, r18
     c7e:	e9 2f       	mov	r30, r25
     c80:	62 e3       	ldi	r22, 0x32	; 50
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	46 d4       	rcall	.+2188   	; 0x1512 <__udivmodhi4>
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	b1 f4       	brne	.+44     	; 0xcb6 <__vector_8+0x26c>
     c8a:	f0 91 73 00 	lds	r31, 0x0073
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	21 30       	cpi	r18, 0x01	; 1
     c92:	38 07       	cpc	r19, r24
     c94:	08 f4       	brcc	.+2      	; 0xc98 <__vector_8+0x24e>
     c96:	4c c0       	rjmp	.+152    	; 0xd30 <__vector_8+0x2e6>
     c98:	52 e1       	ldi	r21, 0x12	; 18
     c9a:	20 30       	cpi	r18, 0x00	; 0
     c9c:	35 07       	cpc	r19, r21
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <__vector_8+0x258>
     ca0:	47 c0       	rjmp	.+142    	; 0xd30 <__vector_8+0x2e6>
  {
    if (current_setpoint >= NUM_OF_LED_STATES -1) //use the two lowest powers.
     ca2:	f5 30       	cpi	r31, 0x05	; 5
     ca4:	18 f0       	brcs	.+6      	; 0xcac <__vector_8+0x262>
    {
       current_setpoint = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     cac:	e9 da       	rcall	.-2606   	; 0x280 <advance_LED>
     cae:	20 91 71 00 	lds	r18, 0x0071
     cb2:	30 91 72 00 	lds	r19, 0x0072
     cb6:	f0 91 73 00 	lds	r31, 0x0073
  }

  if ((button_hold_down_time > BUTTON_STUCK))
     cba:	83 e1       	ldi	r24, 0x13	; 19
     cbc:	29 38       	cpi	r18, 0x89	; 137
     cbe:	38 07       	cpc	r19, r24
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <__vector_8+0x27e>
  {
    killit = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 76 00 	sts	0x0076, r24
     cc8:	40 91 79 00 	lds	r20, 0x0079
     ccc:	f7 ce       	rjmp	.-530    	; 0xabc <__vector_8+0x72>

  }
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
     cce:	44 23       	and	r20, r20
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <__vector_8+0x28a>
     cd2:	6c c0       	rjmp	.+216    	; 0xdac <__vector_8+0x362>
    {
      last_setpoint = current_setpoint;   //save our position
      current_setpoint = NUM_OF_LED_STATES-1;
      advance_LED();
     }
    if (ISR_counter == 5)   //this should be about .5 of a second
     cd4:	45 30       	cpi	r20, 0x05	; 5
     cd6:	09 f0       	breq	.+2      	; 0xcda <__vector_8+0x290>
     cd8:	01 cf       	rjmp	.-510    	; 0xadc <__vector_8+0x92>
    {
      current_setpoint = last_setpoint -1; //restore the set point
     cda:	80 91 75 00 	lds	r24, 0x0075
     cde:	81 50       	subi	r24, 0x01	; 1
     ce0:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     ce4:	cd da       	rcall	.-2662   	; 0x280 <advance_LED>
     ce6:	0e cf       	rjmp	.-484    	; 0xb04 <__vector_8+0xba>
       current_setpoint = 1;
    }
    advance_LED();
  }  
  
  if ((button_hold_down_time > 256) && (button_hold_down_time < LOCK_START) && (mode == LOCK))
     ce8:	80 91 8b 00 	lds	r24, 0x008B
     cec:	90 91 8c 00 	lds	r25, 0x008C
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_8+0x2ae>
     cf6:	9f cf       	rjmp	.-194    	; 0xc36 <__vector_8+0x1ec>
  {
    if (current_setpoint != 0)
     cf8:	f0 91 73 00 	lds	r31, 0x0073
     cfc:	ff 23       	and	r31, r31
     cfe:	09 f4       	brne	.+2      	; 0xd02 <__vector_8+0x2b8>
     d00:	9c cf       	rjmp	.-200    	; 0xc3a <__vector_8+0x1f0>
    {
      current_setpoint = NUM_OF_LED_STATES; 
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     d08:	bb da       	rcall	.-2698   	; 0x280 <advance_LED>
     d0a:	40 91 71 00 	lds	r20, 0x0071
     d0e:	e0 91 72 00 	lds	r30, 0x0072
     d12:	24 2f       	mov	r18, r20
     d14:	3e 2f       	mov	r19, r30
     d16:	8f cf       	rjmp	.-226    	; 0xc36 <__vector_8+0x1ec>
          if (charge_from_boot == 0)
          { 
            wdt_enable(WDTO_15MS);  //note this isn't stroked anywhere, this will cause a reboot
          }
        } else {
          if (charging == 1)
     d18:	80 91 6f 00 	lds	r24, 0x006F
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_8+0x2d8>
     d20:	2d cf       	rjmp	.-422    	; 0xb7c <__vector_8+0x132>
          {
            charging = 0;
     d22:	10 92 6f 00 	sts	0x006F, r1
            killit = 1;
     d26:	80 93 76 00 	sts	0x0076, r24
            charge_from_boot = 0;
     d2a:	10 92 70 00 	sts	0x0070, r1
     d2e:	26 cf       	rjmp	.-436    	; 0xb7c <__vector_8+0x132>
       current_setpoint = 1;
    }
    advance_LED();
  }  

  if ((button_hold_down_time % 50 == 0) && (button_hold_down_time > SHOP_START) && (button_hold_down_time < SHOP_END))
     d30:	24 2f       	mov	r18, r20
     d32:	3e 2f       	mov	r19, r30
       current_setpoint = 1;
    }
    advance_LED();
  }

  if ((button_hold_down_time > BUTTON_STUCK))
     d34:	83 e1       	ldi	r24, 0x13	; 19
     d36:	29 38       	cpi	r18, 0x89	; 137
     d38:	38 07       	cpc	r19, r24
     d3a:	18 f6       	brcc	.-122    	; 0xcc2 <__vector_8+0x278>
     d3c:	c5 cf       	rjmp	.-118    	; 0xcc8 <__vector_8+0x27e>
          //  charging = 0;
            button_down();
            button_state = DOWN;
          }
        } else {
          if (button_state == DOWN) //needed in case the torch is running and the charger is connected
     d3e:	20 91 e5 00 	lds	r18, 0x00E5
     d42:	30 91 e6 00 	lds	r19, 0x00E6
     d46:	21 30       	cpi	r18, 0x01	; 1
     d48:	31 05       	cpc	r19, r1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__vector_8+0x304>
     d4c:	b5 ce       	rjmp	.-662    	; 0xab8 <__vector_8+0x6e>
          {
          //  charging = 0;
            button_up();
     d4e:	17 db       	rcall	.-2514   	; 0x37e <button_up>
            button_state = UP;
     d50:	10 92 e6 00 	sts	0x00E6, r1
     d54:	10 92 e5 00 	sts	0x00E5, r1
     d58:	40 91 79 00 	lds	r20, 0x0079
     d5c:	ad ce       	rjmp	.-678    	; 0xab8 <__vector_8+0x6e>
  if (button_state == DOWN) 
  {
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
     d5e:	23 30       	cpi	r18, 0x03	; 3
     d60:	31 05       	cpc	r19, r1
     d62:	59 f1       	breq	.+86     	; 0xdba <__vector_8+0x370>
      advance_LED();
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     d64:	c9 01       	movw	r24, r18
     d66:	8f 73       	andi	r24, 0x3F	; 63
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	09 f0       	breq	.+2      	; 0xd70 <__vector_8+0x326>
     d6e:	49 cf       	rjmp	.-366    	; 0xc02 <__vector_8+0x1b8>
    {
      if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two highest powers.
     d70:	80 91 73 00 	lds	r24, 0x0073
     d74:	85 30       	cpi	r24, 0x05	; 5
     d76:	18 f0       	brcs	.+6      	; 0xd7e <__vector_8+0x334>
      {
         current_setpoint = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 73 00 	sts	0x0073, r24
      }
      advance_LED();
     d7e:	80 da       	rcall	.-2816   	; 0x280 <advance_LED>
     d80:	40 91 71 00 	lds	r20, 0x0071
     d84:	e0 91 72 00 	lds	r30, 0x0072
     d88:	24 2f       	mov	r18, r20
     d8a:	3e 2f       	mov	r19, r30
     d8c:	1e cf       	rjmp	.-452    	; 0xbca <__vector_8+0x180>
    advance_LED();
  }

 if ((button_hold_down_time < 256) && (button_hold_down_time % 50 == 0) && (mode == LOCK))
  {
    if (current_setpoint >= NUM_OF_LED_STATES - 1) //use the two lowest powers.
     d8e:	80 91 73 00 	lds	r24, 0x0073
     d92:	85 30       	cpi	r24, 0x05	; 5
     d94:	18 f0       	brcs	.+6      	; 0xd9c <__vector_8+0x352>
    {
       current_setpoint = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 73 00 	sts	0x0073, r24
    }
    advance_LED();
     d9c:	71 da       	rcall	.-2846   	; 0x280 <advance_LED>
     d9e:	40 91 71 00 	lds	r20, 0x0071
     da2:	e0 91 72 00 	lds	r30, 0x0072
     da6:	24 2f       	mov	r18, r20
     da8:	3e 2f       	mov	r19, r30
     daa:	3d cf       	rjmp	.-390    	; 0xc26 <__vector_8+0x1dc>
  
  if ((killit == 0) && (LowBatt == 1)) // if the battery is low and we aren't going to die for some other reason turn the LED's off for .1 of a second every 2ish seconds
  {
    if (ISR_counter == 0)   //when the isr wraps set the output to 0, note this won't set killit, everything keeps running just the output is disabled
    {
      last_setpoint = current_setpoint;   //save our position
     dac:	f0 93 75 00 	sts	0x0075, r31
      current_setpoint = NUM_OF_LED_STATES-1;
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     db6:	64 da       	rcall	.-2872   	; 0x280 <advance_LED>
     db8:	93 ce       	rjmp	.-730    	; 0xae0 <__vector_8+0x96>
    button_hold_down_time++;
    runtime = 0; // only counts time in a set state

    if ((mode == LOCK) && (button_hold_down_time == 3)) //turn light on fast if locked
    {
      current_setpoint = NUM_OF_LED_STATES - 1;
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	80 93 73 00 	sts	0x0073, r24
      advance_LED();
     dc0:	5f da       	rcall	.-2882   	; 0x280 <advance_LED>
    }
    

    
    if ((mode == LOCK) && (button_hold_down_time % 64 == 0)) //flash to let user know its in lock mode
     dc2:	80 91 8b 00 	lds	r24, 0x008B
     dc6:	90 91 8c 00 	lds	r25, 0x008C
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	c1 f6       	brne	.-80     	; 0xd80 <__vector_8+0x336>
     dd0:	40 91 71 00 	lds	r20, 0x0071
     dd4:	e0 91 72 00 	lds	r30, 0x0072
     dd8:	24 2f       	mov	r18, r20
     dda:	3e 2f       	mov	r19, r30
     ddc:	c3 cf       	rjmp	.-122    	; 0xd64 <__vector_8+0x31a>

00000dde <__vector_3>:
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	8f 93       	push	r24
     dea:	10 bc       	out	0x20, r1	; 32
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	80 93 6c 00 	sts	0x006C, r24
     df2:	8f 91       	pop	r24
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <vfprintf>:
     dfe:	a3 e1       	ldi	r26, 0x13	; 19
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e0       	ldi	r30, 0x04	; 4
     e04:	f7 e0       	ldi	r31, 0x07	; 7
     e06:	bb c3       	rjmp	.+1910   	; 0x157e <__prologue_saves__>
     e08:	6c 01       	movw	r12, r24
     e0a:	7f 87       	std	Y+15, r23	; 0x0f
     e0c:	6e 87       	std	Y+14, r22	; 0x0e
     e0e:	fc 01       	movw	r30, r24
     e10:	17 82       	std	Z+7, r1	; 0x07
     e12:	16 82       	std	Z+6, r1	; 0x06
     e14:	83 81       	ldd	r24, Z+3	; 0x03
     e16:	81 fd       	sbrc	r24, 1
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <vfprintf+0x24>
     e1a:	4e c3       	rjmp	.+1692   	; 0x14b8 <vfprintf+0x6ba>
     e1c:	4c 85       	ldd	r20, Y+12	; 0x0c
     e1e:	5d 85       	ldd	r21, Y+13	; 0x0d
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <vfprintf+0x2c>
     e22:	1e 01       	movw	r2, r28
     e24:	08 94       	sec
     e26:	21 1c       	adc	r2, r1
     e28:	31 1c       	adc	r3, r1
     e2a:	f6 01       	movw	r30, r12
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e30:	ff 85       	ldd	r31, Y+15	; 0x0f
     e32:	93 fd       	sbrc	r25, 3
     e34:	85 91       	lpm	r24, Z+
     e36:	93 ff       	sbrs	r25, 3
     e38:	81 91       	ld	r24, Z+
     e3a:	ff 87       	std	Y+15, r31	; 0x0f
     e3c:	ee 87       	std	Y+14, r30	; 0x0e
     e3e:	88 23       	and	r24, r24
     e40:	09 f4       	brne	.+2      	; 0xe44 <vfprintf+0x46>
     e42:	36 c3       	rjmp	.+1644   	; 0x14b0 <vfprintf+0x6b2>
     e44:	85 32       	cpi	r24, 0x25	; 37
     e46:	41 f4       	brne	.+16     	; 0xe58 <vfprintf+0x5a>
     e48:	93 fd       	sbrc	r25, 3
     e4a:	85 91       	lpm	r24, Z+
     e4c:	93 ff       	sbrs	r25, 3
     e4e:	81 91       	ld	r24, Z+
     e50:	ff 87       	std	Y+15, r31	; 0x0f
     e52:	ee 87       	std	Y+14, r30	; 0x0e
     e54:	85 32       	cpi	r24, 0x25	; 37
     e56:	51 f4       	brne	.+20     	; 0xe6c <vfprintf+0x6e>
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	b6 01       	movw	r22, r12
     e5c:	4a 8b       	std	Y+18, r20	; 0x12
     e5e:	5b 8b       	std	Y+19, r21	; 0x13
     e60:	b3 d4       	rcall	.+2406   	; 0x17c8 <fputc>
     e62:	4a 89       	ldd	r20, Y+18	; 0x12
     e64:	5b 89       	ldd	r21, Y+19	; 0x13
     e66:	5d 87       	std	Y+13, r21	; 0x0d
     e68:	4c 87       	std	Y+12, r20	; 0x0c
     e6a:	d8 cf       	rjmp	.-80     	; 0xe1c <vfprintf+0x1e>
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	ff 24       	eor	r15, r15
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	00 32       	cpi	r16, 0x20	; 32
     e74:	b0 f4       	brcc	.+44     	; 0xea2 <vfprintf+0xa4>
     e76:	8b 32       	cpi	r24, 0x2B	; 43
     e78:	69 f0       	breq	.+26     	; 0xe94 <vfprintf+0x96>
     e7a:	8c 32       	cpi	r24, 0x2C	; 44
     e7c:	28 f4       	brcc	.+10     	; 0xe88 <vfprintf+0x8a>
     e7e:	80 32       	cpi	r24, 0x20	; 32
     e80:	51 f0       	breq	.+20     	; 0xe96 <vfprintf+0x98>
     e82:	83 32       	cpi	r24, 0x23	; 35
     e84:	71 f4       	brne	.+28     	; 0xea2 <vfprintf+0xa4>
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <vfprintf+0xa0>
     e88:	8d 32       	cpi	r24, 0x2D	; 45
     e8a:	39 f0       	breq	.+14     	; 0xe9a <vfprintf+0x9c>
     e8c:	80 33       	cpi	r24, 0x30	; 48
     e8e:	49 f4       	brne	.+18     	; 0xea2 <vfprintf+0xa4>
     e90:	01 60       	ori	r16, 0x01	; 1
     e92:	28 c0       	rjmp	.+80     	; 0xee4 <vfprintf+0xe6>
     e94:	02 60       	ori	r16, 0x02	; 2
     e96:	04 60       	ori	r16, 0x04	; 4
     e98:	25 c0       	rjmp	.+74     	; 0xee4 <vfprintf+0xe6>
     e9a:	08 60       	ori	r16, 0x08	; 8
     e9c:	23 c0       	rjmp	.+70     	; 0xee4 <vfprintf+0xe6>
     e9e:	00 61       	ori	r16, 0x10	; 16
     ea0:	21 c0       	rjmp	.+66     	; 0xee4 <vfprintf+0xe6>
     ea2:	07 fd       	sbrc	r16, 7
     ea4:	2a c0       	rjmp	.+84     	; 0xefa <vfprintf+0xfc>
     ea6:	28 2f       	mov	r18, r24
     ea8:	20 53       	subi	r18, 0x30	; 48
     eaa:	2a 30       	cpi	r18, 0x0A	; 10
     eac:	78 f4       	brcc	.+30     	; 0xecc <vfprintf+0xce>
     eae:	06 ff       	sbrs	r16, 6
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <vfprintf+0xc0>
     eb2:	81 2f       	mov	r24, r17
     eb4:	6a e0       	ldi	r22, 0x0A	; 10
     eb6:	06 d3       	rcall	.+1548   	; 0x14c4 <__mulqi3>
     eb8:	18 2f       	mov	r17, r24
     eba:	12 0f       	add	r17, r18
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <vfprintf+0xe6>
     ebe:	8f 2d       	mov	r24, r15
     ec0:	6a e0       	ldi	r22, 0x0A	; 10
     ec2:	00 d3       	rcall	.+1536   	; 0x14c4 <__mulqi3>
     ec4:	f8 2e       	mov	r15, r24
     ec6:	f2 0e       	add	r15, r18
     ec8:	00 62       	ori	r16, 0x20	; 32
     eca:	0c c0       	rjmp	.+24     	; 0xee4 <vfprintf+0xe6>
     ecc:	8e 32       	cpi	r24, 0x2E	; 46
     ece:	21 f4       	brne	.+8      	; 0xed8 <vfprintf+0xda>
     ed0:	06 fd       	sbrc	r16, 6
     ed2:	ee c2       	rjmp	.+1500   	; 0x14b0 <vfprintf+0x6b2>
     ed4:	00 64       	ori	r16, 0x40	; 64
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <vfprintf+0xe6>
     ed8:	8c 36       	cpi	r24, 0x6C	; 108
     eda:	11 f4       	brne	.+4      	; 0xee0 <vfprintf+0xe2>
     edc:	00 68       	ori	r16, 0x80	; 128
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0xe6>
     ee0:	88 36       	cpi	r24, 0x68	; 104
     ee2:	59 f4       	brne	.+22     	; 0xefa <vfprintf+0xfc>
     ee4:	ee 85       	ldd	r30, Y+14	; 0x0e
     ee6:	ff 85       	ldd	r31, Y+15	; 0x0f
     ee8:	93 fd       	sbrc	r25, 3
     eea:	85 91       	lpm	r24, Z+
     eec:	93 ff       	sbrs	r25, 3
     eee:	81 91       	ld	r24, Z+
     ef0:	ff 87       	std	Y+15, r31	; 0x0f
     ef2:	ee 87       	std	Y+14, r30	; 0x0e
     ef4:	88 23       	and	r24, r24
     ef6:	09 f0       	breq	.+2      	; 0xefa <vfprintf+0xfc>
     ef8:	bc cf       	rjmp	.-136    	; 0xe72 <vfprintf+0x74>
     efa:	98 2f       	mov	r25, r24
     efc:	95 54       	subi	r25, 0x45	; 69
     efe:	93 30       	cpi	r25, 0x03	; 3
     f00:	18 f4       	brcc	.+6      	; 0xf08 <vfprintf+0x10a>
     f02:	00 61       	ori	r16, 0x10	; 16
     f04:	80 5e       	subi	r24, 0xE0	; 224
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <vfprintf+0x116>
     f08:	98 2f       	mov	r25, r24
     f0a:	95 56       	subi	r25, 0x65	; 101
     f0c:	93 30       	cpi	r25, 0x03	; 3
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <vfprintf+0x114>
     f10:	8b c1       	rjmp	.+790    	; 0x1228 <vfprintf+0x42a>
     f12:	0f 7e       	andi	r16, 0xEF	; 239
     f14:	06 ff       	sbrs	r16, 6
     f16:	16 e0       	ldi	r17, 0x06	; 6
     f18:	6f e3       	ldi	r22, 0x3F	; 63
     f1a:	e6 2e       	mov	r14, r22
     f1c:	e0 22       	and	r14, r16
     f1e:	85 36       	cpi	r24, 0x65	; 101
     f20:	19 f4       	brne	.+6      	; 0xf28 <vfprintf+0x12a>
     f22:	f0 e4       	ldi	r31, 0x40	; 64
     f24:	ef 2a       	or	r14, r31
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <vfprintf+0x138>
     f28:	86 36       	cpi	r24, 0x66	; 102
     f2a:	19 f4       	brne	.+6      	; 0xf32 <vfprintf+0x134>
     f2c:	20 e8       	ldi	r18, 0x80	; 128
     f2e:	e2 2a       	or	r14, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x138>
     f32:	11 11       	cpse	r17, r1
     f34:	11 50       	subi	r17, 0x01	; 1
     f36:	e7 fe       	sbrs	r14, 7
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x148>
     f3a:	1c 33       	cpi	r17, 0x3C	; 60
     f3c:	40 f4       	brcc	.+16     	; 0xf4e <vfprintf+0x150>
     f3e:	91 2e       	mov	r9, r17
     f40:	93 94       	inc	r9
     f42:	27 e0       	ldi	r18, 0x07	; 7
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <vfprintf+0x15e>
     f46:	18 30       	cpi	r17, 0x08	; 8
     f48:	30 f4       	brcc	.+12     	; 0xf56 <vfprintf+0x158>
     f4a:	21 2f       	mov	r18, r17
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0x15c>
     f4e:	27 e0       	ldi	r18, 0x07	; 7
     f50:	3c e3       	ldi	r19, 0x3C	; 60
     f52:	93 2e       	mov	r9, r19
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <vfprintf+0x15e>
     f56:	27 e0       	ldi	r18, 0x07	; 7
     f58:	17 e0       	ldi	r17, 0x07	; 7
     f5a:	99 24       	eor	r9, r9
     f5c:	ca 01       	movw	r24, r20
     f5e:	04 96       	adiw	r24, 0x04	; 4
     f60:	9d 87       	std	Y+13, r25	; 0x0d
     f62:	8c 87       	std	Y+12, r24	; 0x0c
     f64:	fa 01       	movw	r30, r20
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	a1 01       	movw	r20, r2
     f70:	09 2d       	mov	r16, r9
     f72:	3c d3       	rcall	.+1656   	; 0x15ec <__ftoa_engine>
     f74:	5c 01       	movw	r10, r24
     f76:	69 80       	ldd	r6, Y+1	; 0x01
     f78:	26 2d       	mov	r18, r6
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	39 8b       	std	Y+17, r19	; 0x11
     f7e:	28 8b       	std	Y+16, r18	; 0x10
     f80:	60 fe       	sbrs	r6, 0
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <vfprintf+0x18c>
     f84:	38 89       	ldd	r19, Y+16	; 0x10
     f86:	33 ff       	sbrs	r19, 3
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <vfprintf+0x198>
     f8a:	e1 fc       	sbrc	r14, 1
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <vfprintf+0x19c>
     f8e:	e2 fe       	sbrs	r14, 2
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x1a0>
     f92:	00 e2       	ldi	r16, 0x20	; 32
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <vfprintf+0x1a2>
     f96:	0d e2       	ldi	r16, 0x2D	; 45
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <vfprintf+0x1a2>
     f9a:	0b e2       	ldi	r16, 0x2B	; 43
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <vfprintf+0x1a2>
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	88 89       	ldd	r24, Y+16	; 0x10
     fa2:	99 89       	ldd	r25, Y+17	; 0x11
     fa4:	8c 70       	andi	r24, 0x0C	; 12
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	a9 f1       	breq	.+106    	; 0x1016 <vfprintf+0x218>
     fac:	00 23       	and	r16, r16
     fae:	11 f0       	breq	.+4      	; 0xfb4 <vfprintf+0x1b6>
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <vfprintf+0x1b8>
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	8f 15       	cp	r24, r15
     fb8:	50 f4       	brcc	.+20     	; 0xfce <vfprintf+0x1d0>
     fba:	f8 1a       	sub	r15, r24
     fbc:	e3 fc       	sbrc	r14, 3
     fbe:	08 c0       	rjmp	.+16     	; 0xfd0 <vfprintf+0x1d2>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	b6 01       	movw	r22, r12
     fc6:	00 d4       	rcall	.+2048   	; 0x17c8 <fputc>
     fc8:	fa 94       	dec	r15
     fca:	d1 f7       	brne	.-12     	; 0xfc0 <vfprintf+0x1c2>
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <vfprintf+0x1d2>
     fce:	ff 24       	eor	r15, r15
     fd0:	00 23       	and	r16, r16
     fd2:	21 f0       	breq	.+8      	; 0xfdc <vfprintf+0x1de>
     fd4:	80 2f       	mov	r24, r16
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b6 01       	movw	r22, r12
     fda:	f6 d3       	rcall	.+2028   	; 0x17c8 <fputc>
     fdc:	88 89       	ldd	r24, Y+16	; 0x10
     fde:	83 fd       	sbrc	r24, 3
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <vfprintf+0x1ea>
     fe2:	06 e2       	ldi	r16, 0x26	; 38
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <vfprintf+0x204>
     fe8:	02 e2       	ldi	r16, 0x22	; 34
     fea:	10 e0       	ldi	r17, 0x00	; 0
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <vfprintf+0x204>
     fee:	a1 14       	cp	r10, r1
     ff0:	b1 04       	cpc	r11, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <vfprintf+0x1f8>
     ff4:	80 52       	subi	r24, 0x20	; 32
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	b6 01       	movw	r22, r12
     ffa:	e6 d3       	rcall	.+1996   	; 0x17c8 <fputc>
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x20e>
    1002:	ae 2c       	mov	r10, r14
    1004:	bb 24       	eor	r11, r11
    1006:	90 e1       	ldi	r25, 0x10	; 16
    1008:	a9 22       	and	r10, r25
    100a:	bb 24       	eor	r11, r11
    100c:	f8 01       	movw	r30, r16
    100e:	84 91       	lpm	r24, Z+
    1010:	88 23       	and	r24, r24
    1012:	69 f7       	brne	.-38     	; 0xfee <vfprintf+0x1f0>
    1014:	4a c2       	rjmp	.+1172   	; 0x14aa <vfprintf+0x6ac>
    1016:	e7 fe       	sbrs	r14, 7
    1018:	0e c0       	rjmp	.+28     	; 0x1036 <vfprintf+0x238>
    101a:	9a 0c       	add	r9, r10
    101c:	f8 89       	ldd	r31, Y+16	; 0x10
    101e:	f4 ff       	sbrs	r31, 4
    1020:	04 c0       	rjmp	.+8      	; 0x102a <vfprintf+0x22c>
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	81 33       	cpi	r24, 0x31	; 49
    1026:	09 f4       	brne	.+2      	; 0x102a <vfprintf+0x22c>
    1028:	9a 94       	dec	r9
    102a:	19 14       	cp	r1, r9
    102c:	54 f5       	brge	.+84     	; 0x1082 <vfprintf+0x284>
    102e:	29 2d       	mov	r18, r9
    1030:	29 30       	cpi	r18, 0x09	; 9
    1032:	50 f5       	brcc	.+84     	; 0x1088 <vfprintf+0x28a>
    1034:	2d c0       	rjmp	.+90     	; 0x1090 <vfprintf+0x292>
    1036:	e6 fc       	sbrc	r14, 6
    1038:	2b c0       	rjmp	.+86     	; 0x1090 <vfprintf+0x292>
    103a:	81 2f       	mov	r24, r17
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	8a 15       	cp	r24, r10
    1040:	9b 05       	cpc	r25, r11
    1042:	4c f0       	brlt	.+18     	; 0x1056 <vfprintf+0x258>
    1044:	3c ef       	ldi	r19, 0xFC	; 252
    1046:	a3 16       	cp	r10, r19
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	b3 06       	cpc	r11, r19
    104c:	24 f0       	brlt	.+8      	; 0x1056 <vfprintf+0x258>
    104e:	80 e8       	ldi	r24, 0x80	; 128
    1050:	e8 2a       	or	r14, r24
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <vfprintf+0x258>
    1054:	11 50       	subi	r17, 0x01	; 1
    1056:	11 23       	and	r17, r17
    1058:	49 f0       	breq	.+18     	; 0x106c <vfprintf+0x26e>
    105a:	e2 e0       	ldi	r30, 0x02	; 2
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ec 0f       	add	r30, r28
    1060:	fd 1f       	adc	r31, r29
    1062:	e1 0f       	add	r30, r17
    1064:	f1 1d       	adc	r31, r1
    1066:	80 81       	ld	r24, Z
    1068:	80 33       	cpi	r24, 0x30	; 48
    106a:	a1 f3       	breq	.-24     	; 0x1054 <vfprintf+0x256>
    106c:	e7 fe       	sbrs	r14, 7
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <vfprintf+0x292>
    1070:	91 2e       	mov	r9, r17
    1072:	93 94       	inc	r9
    1074:	81 2f       	mov	r24, r17
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a8 16       	cp	r10, r24
    107a:	b9 06       	cpc	r11, r25
    107c:	44 f4       	brge	.+16     	; 0x108e <vfprintf+0x290>
    107e:	1a 19       	sub	r17, r10
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <vfprintf+0x292>
    1082:	99 24       	eor	r9, r9
    1084:	93 94       	inc	r9
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <vfprintf+0x292>
    1088:	98 e0       	ldi	r25, 0x08	; 8
    108a:	99 2e       	mov	r9, r25
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <vfprintf+0x292>
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	e7 fe       	sbrs	r14, 7
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <vfprintf+0x2a4>
    1094:	1a 14       	cp	r1, r10
    1096:	1b 04       	cpc	r1, r11
    1098:	3c f4       	brge	.+14     	; 0x10a8 <vfprintf+0x2aa>
    109a:	95 01       	movw	r18, r10
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <vfprintf+0x2ae>
    10a2:	25 e0       	ldi	r18, 0x05	; 5
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x2ae>
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	00 23       	and	r16, r16
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <vfprintf+0x2b6>
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	11 23       	and	r17, r17
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <vfprintf+0x2c4>
    10b8:	81 2f       	mov	r24, r17
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	28 0f       	add	r18, r24
    10c0:	39 1f       	adc	r19, r25
    10c2:	8f 2d       	mov	r24, r15
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	14 f4       	brge	.+4      	; 0x10d0 <vfprintf+0x2d2>
    10cc:	f2 1a       	sub	r15, r18
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <vfprintf+0x2d4>
    10d0:	ff 24       	eor	r15, r15
    10d2:	4e 2c       	mov	r4, r14
    10d4:	55 24       	eor	r5, r5
    10d6:	c2 01       	movw	r24, r4
    10d8:	89 70       	andi	r24, 0x09	; 9
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	41 f4       	brne	.+16     	; 0x10f0 <vfprintf+0x2f2>
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <vfprintf+0x2ee>
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	b6 01       	movw	r22, r12
    10e8:	6f d3       	rcall	.+1758   	; 0x17c8 <fputc>
    10ea:	fa 94       	dec	r15
    10ec:	ff 20       	and	r15, r15
    10ee:	c9 f7       	brne	.-14     	; 0x10e2 <vfprintf+0x2e4>
    10f0:	00 23       	and	r16, r16
    10f2:	21 f0       	breq	.+8      	; 0x10fc <vfprintf+0x2fe>
    10f4:	80 2f       	mov	r24, r16
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	b6 01       	movw	r22, r12
    10fa:	66 d3       	rcall	.+1740   	; 0x17c8 <fputc>
    10fc:	43 fc       	sbrc	r4, 3
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <vfprintf+0x312>
    1100:	05 c0       	rjmp	.+10     	; 0x110c <vfprintf+0x30e>
    1102:	80 e3       	ldi	r24, 0x30	; 48
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	b6 01       	movw	r22, r12
    1108:	5f d3       	rcall	.+1726   	; 0x17c8 <fputc>
    110a:	fa 94       	dec	r15
    110c:	ff 20       	and	r15, r15
    110e:	c9 f7       	brne	.-14     	; 0x1102 <vfprintf+0x304>
    1110:	e7 fe       	sbrs	r14, 7
    1112:	44 c0       	rjmp	.+136    	; 0x119c <vfprintf+0x39e>
    1114:	35 01       	movw	r6, r10
    1116:	b7 fe       	sbrs	r11, 7
    1118:	02 c0       	rjmp	.+4      	; 0x111e <vfprintf+0x320>
    111a:	66 24       	eor	r6, r6
    111c:	77 24       	eor	r7, r7
    111e:	25 01       	movw	r4, r10
    1120:	08 94       	sec
    1122:	41 1c       	adc	r4, r1
    1124:	51 1c       	adc	r5, r1
    1126:	46 18       	sub	r4, r6
    1128:	57 08       	sbc	r5, r7
    112a:	42 0c       	add	r4, r2
    112c:	53 1c       	adc	r5, r3
    112e:	f5 01       	movw	r30, r10
    1130:	e9 19       	sub	r30, r9
    1132:	f1 09       	sbc	r31, r1
    1134:	4f 01       	movw	r8, r30
    1136:	81 2f       	mov	r24, r17
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	00 27       	eor	r16, r16
    113c:	11 27       	eor	r17, r17
    113e:	08 1b       	sub	r16, r24
    1140:	19 0b       	sbc	r17, r25
    1142:	ff ef       	ldi	r31, 0xFF	; 255
    1144:	6f 16       	cp	r6, r31
    1146:	ff ef       	ldi	r31, 0xFF	; 255
    1148:	7f 06       	cpc	r7, r31
    114a:	21 f4       	brne	.+8      	; 0x1154 <vfprintf+0x356>
    114c:	8e e2       	ldi	r24, 0x2E	; 46
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	b6 01       	movw	r22, r12
    1152:	3a d3       	rcall	.+1652   	; 0x17c8 <fputc>
    1154:	a6 14       	cp	r10, r6
    1156:	b7 04       	cpc	r11, r7
    1158:	34 f0       	brlt	.+12     	; 0x1166 <vfprintf+0x368>
    115a:	86 14       	cp	r8, r6
    115c:	97 04       	cpc	r9, r7
    115e:	1c f4       	brge	.+6      	; 0x1166 <vfprintf+0x368>
    1160:	f2 01       	movw	r30, r4
    1162:	80 81       	ld	r24, Z
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <vfprintf+0x36a>
    1166:	80 e3       	ldi	r24, 0x30	; 48
    1168:	08 94       	sec
    116a:	61 08       	sbc	r6, r1
    116c:	71 08       	sbc	r7, r1
    116e:	08 94       	sec
    1170:	41 1c       	adc	r4, r1
    1172:	51 1c       	adc	r5, r1
    1174:	60 16       	cp	r6, r16
    1176:	71 06       	cpc	r7, r17
    1178:	24 f0       	brlt	.+8      	; 0x1182 <vfprintf+0x384>
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	b6 01       	movw	r22, r12
    117e:	24 d3       	rcall	.+1608   	; 0x17c8 <fputc>
    1180:	e0 cf       	rjmp	.-64     	; 0x1142 <vfprintf+0x344>
    1182:	6a 14       	cp	r6, r10
    1184:	7b 04       	cpc	r7, r11
    1186:	41 f4       	brne	.+16     	; 0x1198 <vfprintf+0x39a>
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	96 33       	cpi	r25, 0x36	; 54
    118c:	20 f4       	brcc	.+8      	; 0x1196 <vfprintf+0x398>
    118e:	95 33       	cpi	r25, 0x35	; 53
    1190:	19 f4       	brne	.+6      	; 0x1198 <vfprintf+0x39a>
    1192:	f8 89       	ldd	r31, Y+16	; 0x10
    1194:	f4 ff       	sbrs	r31, 4
    1196:	81 e3       	ldi	r24, 0x31	; 49
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	43 c0       	rjmp	.+134    	; 0x1222 <vfprintf+0x424>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	81 33       	cpi	r24, 0x31	; 49
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <vfprintf+0x3a8>
    11a2:	2f ee       	ldi	r18, 0xEF	; 239
    11a4:	62 22       	and	r6, r18
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	b6 01       	movw	r22, r12
    11aa:	0e d3       	rcall	.+1564   	; 0x17c8 <fputc>
    11ac:	11 23       	and	r17, r17
    11ae:	79 f0       	breq	.+30     	; 0x11ce <vfprintf+0x3d0>
    11b0:	8e e2       	ldi	r24, 0x2E	; 46
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	b6 01       	movw	r22, r12
    11b6:	08 d3       	rcall	.+1552   	; 0x17c8 <fputc>
    11b8:	02 e0       	ldi	r16, 0x02	; 2
    11ba:	f1 01       	movw	r30, r2
    11bc:	e0 0f       	add	r30, r16
    11be:	f1 1d       	adc	r31, r1
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b6 01       	movw	r22, r12
    11c8:	ff d2       	rcall	.+1534   	; 0x17c8 <fputc>
    11ca:	11 50       	subi	r17, 0x01	; 1
    11cc:	b1 f7       	brne	.-20     	; 0x11ba <vfprintf+0x3bc>
    11ce:	44 fe       	sbrs	r4, 4
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <vfprintf+0x3da>
    11d2:	85 e4       	ldi	r24, 0x45	; 69
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <vfprintf+0x3de>
    11d8:	85 e6       	ldi	r24, 0x65	; 101
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	b6 01       	movw	r22, r12
    11de:	f4 d2       	rcall	.+1512   	; 0x17c8 <fputc>
    11e0:	b7 fc       	sbrc	r11, 7
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <vfprintf+0x3f0>
    11e4:	a1 14       	cp	r10, r1
    11e6:	b1 04       	cpc	r11, r1
    11e8:	41 f4       	brne	.+16     	; 0x11fa <vfprintf+0x3fc>
    11ea:	64 fe       	sbrs	r6, 4
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x3fc>
    11ee:	b0 94       	com	r11
    11f0:	a1 94       	neg	r10
    11f2:	b1 08       	sbc	r11, r1
    11f4:	b3 94       	inc	r11
    11f6:	8d e2       	ldi	r24, 0x2D	; 45
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x3fe>
    11fa:	8b e2       	ldi	r24, 0x2B	; 43
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	b6 01       	movw	r22, r12
    1200:	e3 d2       	rcall	.+1478   	; 0x17c8 <fputc>
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <vfprintf+0x412>
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	e6 ef       	ldi	r30, 0xF6	; 246
    120a:	ff ef       	ldi	r31, 0xFF	; 255
    120c:	ae 0e       	add	r10, r30
    120e:	bf 1e       	adc	r11, r31
    1210:	fa e0       	ldi	r31, 0x0A	; 10
    1212:	af 16       	cp	r10, r31
    1214:	b1 04       	cpc	r11, r1
    1216:	bc f7       	brge	.-18     	; 0x1206 <vfprintf+0x408>
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	b6 01       	movw	r22, r12
    121c:	d5 d2       	rcall	.+1450   	; 0x17c8 <fputc>
    121e:	c5 01       	movw	r24, r10
    1220:	c0 96       	adiw	r24, 0x30	; 48
    1222:	b6 01       	movw	r22, r12
    1224:	d1 d2       	rcall	.+1442   	; 0x17c8 <fputc>
    1226:	41 c1       	rjmp	.+642    	; 0x14aa <vfprintf+0x6ac>
    1228:	83 36       	cpi	r24, 0x63	; 99
    122a:	31 f0       	breq	.+12     	; 0x1238 <vfprintf+0x43a>
    122c:	83 37       	cpi	r24, 0x73	; 115
    122e:	89 f0       	breq	.+34     	; 0x1252 <vfprintf+0x454>
    1230:	83 35       	cpi	r24, 0x53	; 83
    1232:	09 f0       	breq	.+2      	; 0x1236 <vfprintf+0x438>
    1234:	55 c0       	rjmp	.+170    	; 0x12e0 <vfprintf+0x4e2>
    1236:	21 c0       	rjmp	.+66     	; 0x127a <vfprintf+0x47c>
    1238:	9a 01       	movw	r18, r20
    123a:	2e 5f       	subi	r18, 0xFE	; 254
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	3d 87       	std	Y+13, r19	; 0x0d
    1240:	2c 87       	std	Y+12, r18	; 0x0c
    1242:	fa 01       	movw	r30, r20
    1244:	80 81       	ld	r24, Z
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	31 01       	movw	r6, r2
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	a8 2e       	mov	r10, r24
    124e:	b1 2c       	mov	r11, r1
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <vfprintf+0x478>
    1252:	9a 01       	movw	r18, r20
    1254:	2e 5f       	subi	r18, 0xFE	; 254
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	3d 87       	std	Y+13, r19	; 0x0d
    125a:	2c 87       	std	Y+12, r18	; 0x0c
    125c:	fa 01       	movw	r30, r20
    125e:	60 80       	ld	r6, Z
    1260:	71 80       	ldd	r7, Z+1	; 0x01
    1262:	06 ff       	sbrs	r16, 6
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x46e>
    1266:	61 2f       	mov	r22, r17
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x472>
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	7f ef       	ldi	r23, 0xFF	; 255
    1270:	c3 01       	movw	r24, r6
    1272:	9f d2       	rcall	.+1342   	; 0x17b2 <strnlen>
    1274:	5c 01       	movw	r10, r24
    1276:	0f 77       	andi	r16, 0x7F	; 127
    1278:	13 c0       	rjmp	.+38     	; 0x12a0 <vfprintf+0x4a2>
    127a:	9a 01       	movw	r18, r20
    127c:	2e 5f       	subi	r18, 0xFE	; 254
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	3d 87       	std	Y+13, r19	; 0x0d
    1282:	2c 87       	std	Y+12, r18	; 0x0c
    1284:	fa 01       	movw	r30, r20
    1286:	60 80       	ld	r6, Z
    1288:	71 80       	ldd	r7, Z+1	; 0x01
    128a:	06 ff       	sbrs	r16, 6
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <vfprintf+0x496>
    128e:	61 2f       	mov	r22, r17
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x49a>
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	7f ef       	ldi	r23, 0xFF	; 255
    1298:	c3 01       	movw	r24, r6
    129a:	80 d2       	rcall	.+1280   	; 0x179c <strnlen_P>
    129c:	5c 01       	movw	r10, r24
    129e:	00 68       	ori	r16, 0x80	; 128
    12a0:	03 fd       	sbrc	r16, 3
    12a2:	1a c0       	rjmp	.+52     	; 0x12d8 <vfprintf+0x4da>
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <vfprintf+0x4b2>
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	b6 01       	movw	r22, r12
    12ac:	8d d2       	rcall	.+1306   	; 0x17c8 <fputc>
    12ae:	fa 94       	dec	r15
    12b0:	8f 2d       	mov	r24, r15
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a8 16       	cp	r10, r24
    12b6:	b9 06       	cpc	r11, r25
    12b8:	b0 f3       	brcs	.-20     	; 0x12a6 <vfprintf+0x4a8>
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <vfprintf+0x4da>
    12bc:	f3 01       	movw	r30, r6
    12be:	07 fd       	sbrc	r16, 7
    12c0:	85 91       	lpm	r24, Z+
    12c2:	07 ff       	sbrs	r16, 7
    12c4:	81 91       	ld	r24, Z+
    12c6:	3f 01       	movw	r6, r30
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	b6 01       	movw	r22, r12
    12cc:	7d d2       	rcall	.+1274   	; 0x17c8 <fputc>
    12ce:	f1 10       	cpse	r15, r1
    12d0:	fa 94       	dec	r15
    12d2:	08 94       	sec
    12d4:	a1 08       	sbc	r10, r1
    12d6:	b1 08       	sbc	r11, r1
    12d8:	a1 14       	cp	r10, r1
    12da:	b1 04       	cpc	r11, r1
    12dc:	79 f7       	brne	.-34     	; 0x12bc <vfprintf+0x4be>
    12de:	e5 c0       	rjmp	.+458    	; 0x14aa <vfprintf+0x6ac>
    12e0:	84 36       	cpi	r24, 0x64	; 100
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <vfprintf+0x4ea>
    12e4:	89 36       	cpi	r24, 0x69	; 105
    12e6:	59 f5       	brne	.+86     	; 0x133e <vfprintf+0x540>
    12e8:	07 ff       	sbrs	r16, 7
    12ea:	0b c0       	rjmp	.+22     	; 0x1302 <vfprintf+0x504>
    12ec:	9a 01       	movw	r18, r20
    12ee:	2c 5f       	subi	r18, 0xFC	; 252
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	3d 87       	std	Y+13, r19	; 0x0d
    12f4:	2c 87       	std	Y+12, r18	; 0x0c
    12f6:	fa 01       	movw	r30, r20
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	0c c0       	rjmp	.+24     	; 0x131a <vfprintf+0x51c>
    1302:	9a 01       	movw	r18, r20
    1304:	2e 5f       	subi	r18, 0xFE	; 254
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	3d 87       	std	Y+13, r19	; 0x0d
    130a:	2c 87       	std	Y+12, r18	; 0x0c
    130c:	fa 01       	movw	r30, r20
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	88 27       	eor	r24, r24
    1314:	77 fd       	sbrc	r23, 7
    1316:	80 95       	com	r24
    1318:	98 2f       	mov	r25, r24
    131a:	0f 76       	andi	r16, 0x6F	; 111
    131c:	97 ff       	sbrs	r25, 7
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <vfprintf+0x532>
    1320:	90 95       	com	r25
    1322:	80 95       	com	r24
    1324:	70 95       	com	r23
    1326:	61 95       	neg	r22
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	00 68       	ori	r16, 0x80	; 128
    1330:	a1 01       	movw	r20, r2
    1332:	2a e0       	ldi	r18, 0x0A	; 10
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	74 d2       	rcall	.+1256   	; 0x1820 <__ultoa_invert>
    1338:	98 2e       	mov	r9, r24
    133a:	92 18       	sub	r9, r2
    133c:	40 c0       	rjmp	.+128    	; 0x13be <vfprintf+0x5c0>
    133e:	85 37       	cpi	r24, 0x75	; 117
    1340:	21 f4       	brne	.+8      	; 0x134a <vfprintf+0x54c>
    1342:	0f 7e       	andi	r16, 0xEF	; 239
    1344:	2a e0       	ldi	r18, 0x0A	; 10
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	20 c0       	rjmp	.+64     	; 0x138a <vfprintf+0x58c>
    134a:	09 7f       	andi	r16, 0xF9	; 249
    134c:	8f 36       	cpi	r24, 0x6F	; 111
    134e:	a9 f0       	breq	.+42     	; 0x137a <vfprintf+0x57c>
    1350:	80 37       	cpi	r24, 0x70	; 112
    1352:	20 f4       	brcc	.+8      	; 0x135c <vfprintf+0x55e>
    1354:	88 35       	cpi	r24, 0x58	; 88
    1356:	09 f0       	breq	.+2      	; 0x135a <vfprintf+0x55c>
    1358:	ab c0       	rjmp	.+342    	; 0x14b0 <vfprintf+0x6b2>
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <vfprintf+0x574>
    135c:	80 37       	cpi	r24, 0x70	; 112
    135e:	21 f0       	breq	.+8      	; 0x1368 <vfprintf+0x56a>
    1360:	88 37       	cpi	r24, 0x78	; 120
    1362:	09 f0       	breq	.+2      	; 0x1366 <vfprintf+0x568>
    1364:	a5 c0       	rjmp	.+330    	; 0x14b0 <vfprintf+0x6b2>
    1366:	01 c0       	rjmp	.+2      	; 0x136a <vfprintf+0x56c>
    1368:	00 61       	ori	r16, 0x10	; 16
    136a:	04 ff       	sbrs	r16, 4
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <vfprintf+0x582>
    136e:	04 60       	ori	r16, 0x04	; 4
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <vfprintf+0x582>
    1372:	04 ff       	sbrs	r16, 4
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <vfprintf+0x588>
    1376:	06 60       	ori	r16, 0x06	; 6
    1378:	06 c0       	rjmp	.+12     	; 0x1386 <vfprintf+0x588>
    137a:	28 e0       	ldi	r18, 0x08	; 8
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	05 c0       	rjmp	.+10     	; 0x138a <vfprintf+0x58c>
    1380:	20 e1       	ldi	r18, 0x10	; 16
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x58c>
    1386:	20 e1       	ldi	r18, 0x10	; 16
    1388:	32 e0       	ldi	r19, 0x02	; 2
    138a:	07 ff       	sbrs	r16, 7
    138c:	0a c0       	rjmp	.+20     	; 0x13a2 <vfprintf+0x5a4>
    138e:	ca 01       	movw	r24, r20
    1390:	04 96       	adiw	r24, 0x04	; 4
    1392:	9d 87       	std	Y+13, r25	; 0x0d
    1394:	8c 87       	std	Y+12, r24	; 0x0c
    1396:	fa 01       	movw	r30, r20
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <vfprintf+0x5b6>
    13a2:	ca 01       	movw	r24, r20
    13a4:	02 96       	adiw	r24, 0x02	; 2
    13a6:	9d 87       	std	Y+13, r25	; 0x0d
    13a8:	8c 87       	std	Y+12, r24	; 0x0c
    13aa:	fa 01       	movw	r30, r20
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a1 01       	movw	r20, r2
    13b6:	34 d2       	rcall	.+1128   	; 0x1820 <__ultoa_invert>
    13b8:	98 2e       	mov	r9, r24
    13ba:	92 18       	sub	r9, r2
    13bc:	0f 77       	andi	r16, 0x7F	; 127
    13be:	06 ff       	sbrs	r16, 6
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <vfprintf+0x5d6>
    13c2:	0e 7f       	andi	r16, 0xFE	; 254
    13c4:	91 16       	cp	r9, r17
    13c6:	30 f4       	brcc	.+12     	; 0x13d4 <vfprintf+0x5d6>
    13c8:	04 ff       	sbrs	r16, 4
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0x5da>
    13cc:	02 fd       	sbrc	r16, 2
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <vfprintf+0x5da>
    13d0:	0f 7e       	andi	r16, 0xEF	; 239
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x5da>
    13d4:	e9 2c       	mov	r14, r9
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <vfprintf+0x5dc>
    13d8:	e1 2e       	mov	r14, r17
    13da:	80 2f       	mov	r24, r16
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	04 ff       	sbrs	r16, 4
    13e0:	0c c0       	rjmp	.+24     	; 0x13fa <vfprintf+0x5fc>
    13e2:	fe 01       	movw	r30, r28
    13e4:	e9 0d       	add	r30, r9
    13e6:	f1 1d       	adc	r31, r1
    13e8:	20 81       	ld	r18, Z
    13ea:	20 33       	cpi	r18, 0x30	; 48
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <vfprintf+0x5f4>
    13ee:	09 7e       	andi	r16, 0xE9	; 233
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <vfprintf+0x606>
    13f2:	e3 94       	inc	r14
    13f4:	02 ff       	sbrs	r16, 2
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <vfprintf+0x606>
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <vfprintf+0x604>
    13fa:	86 78       	andi	r24, 0x86	; 134
    13fc:	90 70       	andi	r25, 0x00	; 0
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfprintf+0x606>
    1402:	e3 94       	inc	r14
    1404:	a0 2e       	mov	r10, r16
    1406:	bb 24       	eor	r11, r11
    1408:	03 fd       	sbrc	r16, 3
    140a:	13 c0       	rjmp	.+38     	; 0x1432 <vfprintf+0x634>
    140c:	00 ff       	sbrs	r16, 0
    140e:	0e c0       	rjmp	.+28     	; 0x142c <vfprintf+0x62e>
    1410:	ef 14       	cp	r14, r15
    1412:	28 f4       	brcc	.+10     	; 0x141e <vfprintf+0x620>
    1414:	19 2d       	mov	r17, r9
    1416:	1f 0d       	add	r17, r15
    1418:	1e 19       	sub	r17, r14
    141a:	ef 2c       	mov	r14, r15
    141c:	07 c0       	rjmp	.+14     	; 0x142c <vfprintf+0x62e>
    141e:	19 2d       	mov	r17, r9
    1420:	05 c0       	rjmp	.+10     	; 0x142c <vfprintf+0x62e>
    1422:	80 e2       	ldi	r24, 0x20	; 32
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	b6 01       	movw	r22, r12
    1428:	cf d1       	rcall	.+926    	; 0x17c8 <fputc>
    142a:	e3 94       	inc	r14
    142c:	ef 14       	cp	r14, r15
    142e:	c8 f3       	brcs	.-14     	; 0x1422 <vfprintf+0x624>
    1430:	04 c0       	rjmp	.+8      	; 0x143a <vfprintf+0x63c>
    1432:	ef 14       	cp	r14, r15
    1434:	10 f4       	brcc	.+4      	; 0x143a <vfprintf+0x63c>
    1436:	fe 18       	sub	r15, r14
    1438:	01 c0       	rjmp	.+2      	; 0x143c <vfprintf+0x63e>
    143a:	ff 24       	eor	r15, r15
    143c:	a4 fe       	sbrs	r10, 4
    143e:	0e c0       	rjmp	.+28     	; 0x145c <vfprintf+0x65e>
    1440:	80 e3       	ldi	r24, 0x30	; 48
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	b6 01       	movw	r22, r12
    1446:	c0 d1       	rcall	.+896    	; 0x17c8 <fputc>
    1448:	a2 fe       	sbrs	r10, 2
    144a:	1d c0       	rjmp	.+58     	; 0x1486 <vfprintf+0x688>
    144c:	a1 fe       	sbrs	r10, 1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <vfprintf+0x658>
    1450:	88 e5       	ldi	r24, 0x58	; 88
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	10 c0       	rjmp	.+32     	; 0x1476 <vfprintf+0x678>
    1456:	88 e7       	ldi	r24, 0x78	; 120
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <vfprintf+0x678>
    145c:	c5 01       	movw	r24, r10
    145e:	86 78       	andi	r24, 0x86	; 134
    1460:	90 70       	andi	r25, 0x00	; 0
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	81 f0       	breq	.+32     	; 0x1486 <vfprintf+0x688>
    1466:	a1 fc       	sbrc	r10, 1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfprintf+0x670>
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <vfprintf+0x672>
    146e:	8b e2       	ldi	r24, 0x2B	; 43
    1470:	07 fd       	sbrc	r16, 7
    1472:	8d e2       	ldi	r24, 0x2D	; 45
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b6 01       	movw	r22, r12
    1478:	a7 d1       	rcall	.+846    	; 0x17c8 <fputc>
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <vfprintf+0x688>
    147c:	80 e3       	ldi	r24, 0x30	; 48
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	b6 01       	movw	r22, r12
    1482:	a2 d1       	rcall	.+836    	; 0x17c8 <fputc>
    1484:	11 50       	subi	r17, 0x01	; 1
    1486:	91 16       	cp	r9, r17
    1488:	c8 f3       	brcs	.-14     	; 0x147c <vfprintf+0x67e>
    148a:	9a 94       	dec	r9
    148c:	f1 01       	movw	r30, r2
    148e:	e9 0d       	add	r30, r9
    1490:	f1 1d       	adc	r31, r1
    1492:	80 81       	ld	r24, Z
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b6 01       	movw	r22, r12
    1498:	97 d1       	rcall	.+814    	; 0x17c8 <fputc>
    149a:	99 20       	and	r9, r9
    149c:	b1 f7       	brne	.-20     	; 0x148a <vfprintf+0x68c>
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <vfprintf+0x6ac>
    14a0:	80 e2       	ldi	r24, 0x20	; 32
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	b6 01       	movw	r22, r12
    14a6:	90 d1       	rcall	.+800    	; 0x17c8 <fputc>
    14a8:	fa 94       	dec	r15
    14aa:	ff 20       	and	r15, r15
    14ac:	c9 f7       	brne	.-14     	; 0x14a0 <vfprintf+0x6a2>
    14ae:	b6 cc       	rjmp	.-1684   	; 0xe1c <vfprintf+0x1e>
    14b0:	f6 01       	movw	r30, r12
    14b2:	26 81       	ldd	r18, Z+6	; 0x06
    14b4:	37 81       	ldd	r19, Z+7	; 0x07
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <vfprintf+0x6be>
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	c9 01       	movw	r24, r18
    14be:	63 96       	adiw	r28, 0x13	; 19
    14c0:	e2 e1       	ldi	r30, 0x12	; 18
    14c2:	79 c0       	rjmp	.+242    	; 0x15b6 <__epilogue_restores__>

000014c4 <__mulqi3>:
    14c4:	00 24       	eor	r0, r0

000014c6 <__mulqi3_loop>:
    14c6:	80 fd       	sbrc	r24, 0
    14c8:	06 0e       	add	r0, r22
    14ca:	66 0f       	add	r22, r22
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <__mulqi3_exit>
    14ce:	86 95       	lsr	r24
    14d0:	d1 f7       	brne	.-12     	; 0x14c6 <__mulqi3_loop>

000014d2 <__mulqi3_exit>:
    14d2:	80 2d       	mov	r24, r0
    14d4:	08 95       	ret

000014d6 <__mulhi3>:
    14d6:	55 27       	eor	r21, r21
    14d8:	00 24       	eor	r0, r0

000014da <__mulhi3_loop>:
    14da:	80 ff       	sbrs	r24, 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <__mulhi3_skip1>
    14de:	06 0e       	add	r0, r22
    14e0:	57 1f       	adc	r21, r23

000014e2 <__mulhi3_skip1>:
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	61 15       	cp	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <__mulhi3_exit>
    14ec:	96 95       	lsr	r25
    14ee:	87 95       	ror	r24
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	99 f7       	brne	.-26     	; 0x14da <__mulhi3_loop>

000014f4 <__mulhi3_exit>:
    14f4:	95 2f       	mov	r25, r21
    14f6:	80 2d       	mov	r24, r0
    14f8:	08 95       	ret

000014fa <__udivmodqi4>:
    14fa:	99 1b       	sub	r25, r25
    14fc:	79 e0       	ldi	r23, 0x09	; 9
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <__udivmodqi4_ep>

00001500 <__udivmodqi4_loop>:
    1500:	99 1f       	adc	r25, r25
    1502:	96 17       	cp	r25, r22
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__udivmodqi4_ep>
    1506:	96 1b       	sub	r25, r22

00001508 <__udivmodqi4_ep>:
    1508:	88 1f       	adc	r24, r24
    150a:	7a 95       	dec	r23
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__udivmodqi4_loop>
    150e:	80 95       	com	r24
    1510:	08 95       	ret

00001512 <__udivmodhi4>:
    1512:	aa 1b       	sub	r26, r26
    1514:	bb 1b       	sub	r27, r27
    1516:	51 e1       	ldi	r21, 0x11	; 17
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <__udivmodhi4_ep>

0000151a <__udivmodhi4_loop>:
    151a:	aa 1f       	adc	r26, r26
    151c:	bb 1f       	adc	r27, r27
    151e:	a6 17       	cp	r26, r22
    1520:	b7 07       	cpc	r27, r23
    1522:	10 f0       	brcs	.+4      	; 0x1528 <__udivmodhi4_ep>
    1524:	a6 1b       	sub	r26, r22
    1526:	b7 0b       	sbc	r27, r23

00001528 <__udivmodhi4_ep>:
    1528:	88 1f       	adc	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	5a 95       	dec	r21
    152e:	a9 f7       	brne	.-22     	; 0x151a <__udivmodhi4_loop>
    1530:	80 95       	com	r24
    1532:	90 95       	com	r25
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	08 95       	ret

0000153a <__udivmodsi4>:
    153a:	a1 e2       	ldi	r26, 0x21	; 33
    153c:	1a 2e       	mov	r1, r26
    153e:	aa 1b       	sub	r26, r26
    1540:	bb 1b       	sub	r27, r27
    1542:	fd 01       	movw	r30, r26
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <__udivmodsi4_ep>

00001546 <__udivmodsi4_loop>:
    1546:	aa 1f       	adc	r26, r26
    1548:	bb 1f       	adc	r27, r27
    154a:	ee 1f       	adc	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	a2 17       	cp	r26, r18
    1550:	b3 07       	cpc	r27, r19
    1552:	e4 07       	cpc	r30, r20
    1554:	f5 07       	cpc	r31, r21
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__udivmodsi4_ep>
    1558:	a2 1b       	sub	r26, r18
    155a:	b3 0b       	sbc	r27, r19
    155c:	e4 0b       	sbc	r30, r20
    155e:	f5 0b       	sbc	r31, r21

00001560 <__udivmodsi4_ep>:
    1560:	66 1f       	adc	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	1a 94       	dec	r1
    156a:	69 f7       	brne	.-38     	; 0x1546 <__udivmodsi4_loop>
    156c:	60 95       	com	r22
    156e:	70 95       	com	r23
    1570:	80 95       	com	r24
    1572:	90 95       	com	r25
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	bd 01       	movw	r22, r26
    157a:	cf 01       	movw	r24, r30
    157c:	08 95       	ret

0000157e <__prologue_saves__>:
    157e:	2f 92       	push	r2
    1580:	3f 92       	push	r3
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	ca 1b       	sub	r28, r26
    15a8:	db 0b       	sbc	r29, r27
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	09 94       	ijmp

000015b6 <__epilogue_restores__>:
    15b6:	2a 88       	ldd	r2, Y+18	; 0x12
    15b8:	39 88       	ldd	r3, Y+17	; 0x11
    15ba:	48 88       	ldd	r4, Y+16	; 0x10
    15bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    15be:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c8:	b9 84       	ldd	r11, Y+9	; 0x09
    15ca:	c8 84       	ldd	r12, Y+8	; 0x08
    15cc:	df 80       	ldd	r13, Y+7	; 0x07
    15ce:	ee 80       	ldd	r14, Y+6	; 0x06
    15d0:	fd 80       	ldd	r15, Y+5	; 0x05
    15d2:	0c 81       	ldd	r16, Y+4	; 0x04
    15d4:	1b 81       	ldd	r17, Y+3	; 0x03
    15d6:	aa 81       	ldd	r26, Y+2	; 0x02
    15d8:	b9 81       	ldd	r27, Y+1	; 0x01
    15da:	ce 0f       	add	r28, r30
    15dc:	d1 1d       	adc	r29, r1
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	ed 01       	movw	r28, r26
    15ea:	08 95       	ret

000015ec <__ftoa_engine>:
    15ec:	28 30       	cpi	r18, 0x08	; 8
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <__ftoa_engine+0x6>
    15f0:	27 e0       	ldi	r18, 0x07	; 7
    15f2:	33 27       	eor	r19, r19
    15f4:	da 01       	movw	r26, r20
    15f6:	99 0f       	add	r25, r25
    15f8:	31 1d       	adc	r19, r1
    15fa:	87 fd       	sbrc	r24, 7
    15fc:	91 60       	ori	r25, 0x01	; 1
    15fe:	00 96       	adiw	r24, 0x00	; 0
    1600:	61 05       	cpc	r22, r1
    1602:	71 05       	cpc	r23, r1
    1604:	39 f4       	brne	.+14     	; 0x1614 <__ftoa_engine+0x28>
    1606:	32 60       	ori	r19, 0x02	; 2
    1608:	2e 5f       	subi	r18, 0xFE	; 254
    160a:	3d 93       	st	X+, r19
    160c:	30 e3       	ldi	r19, 0x30	; 48
    160e:	2a 95       	dec	r18
    1610:	e1 f7       	brne	.-8      	; 0x160a <__ftoa_engine+0x1e>
    1612:	08 95       	ret
    1614:	9f 3f       	cpi	r25, 0xFF	; 255
    1616:	30 f0       	brcs	.+12     	; 0x1624 <__ftoa_engine+0x38>
    1618:	80 38       	cpi	r24, 0x80	; 128
    161a:	71 05       	cpc	r23, r1
    161c:	61 05       	cpc	r22, r1
    161e:	09 f0       	breq	.+2      	; 0x1622 <__ftoa_engine+0x36>
    1620:	3c 5f       	subi	r19, 0xFC	; 252
    1622:	3c 5f       	subi	r19, 0xFC	; 252
    1624:	3d 93       	st	X+, r19
    1626:	91 30       	cpi	r25, 0x01	; 1
    1628:	08 f0       	brcs	.+2      	; 0x162c <__ftoa_engine+0x40>
    162a:	80 68       	ori	r24, 0x80	; 128
    162c:	91 1d       	adc	r25, r1
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	1f 93       	push	r17
    1634:	0f 93       	push	r16
    1636:	ff 92       	push	r15
    1638:	ef 92       	push	r14
    163a:	19 2f       	mov	r17, r25
    163c:	98 7f       	andi	r25, 0xF8	; 248
    163e:	96 95       	lsr	r25
    1640:	e9 2f       	mov	r30, r25
    1642:	96 95       	lsr	r25
    1644:	96 95       	lsr	r25
    1646:	e9 0f       	add	r30, r25
    1648:	ff 27       	eor	r31, r31
    164a:	ec 57       	subi	r30, 0x7C	; 124
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	99 27       	eor	r25, r25
    1650:	33 27       	eor	r19, r19
    1652:	ee 24       	eor	r14, r14
    1654:	ff 24       	eor	r15, r15
    1656:	a7 01       	movw	r20, r14
    1658:	e7 01       	movw	r28, r14
    165a:	05 90       	lpm	r0, Z+
    165c:	08 94       	sec
    165e:	07 94       	ror	r0
    1660:	28 f4       	brcc	.+10     	; 0x166c <__ftoa_engine+0x80>
    1662:	36 0f       	add	r19, r22
    1664:	e7 1e       	adc	r14, r23
    1666:	f8 1e       	adc	r15, r24
    1668:	49 1f       	adc	r20, r25
    166a:	51 1d       	adc	r21, r1
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	06 94       	lsr	r0
    1676:	a1 f7       	brne	.-24     	; 0x1660 <__ftoa_engine+0x74>
    1678:	05 90       	lpm	r0, Z+
    167a:	07 94       	ror	r0
    167c:	28 f4       	brcc	.+10     	; 0x1688 <__ftoa_engine+0x9c>
    167e:	e7 0e       	add	r14, r23
    1680:	f8 1e       	adc	r15, r24
    1682:	49 1f       	adc	r20, r25
    1684:	56 1f       	adc	r21, r22
    1686:	c1 1d       	adc	r28, r1
    1688:	77 0f       	add	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	66 1f       	adc	r22, r22
    1690:	06 94       	lsr	r0
    1692:	a1 f7       	brne	.-24     	; 0x167c <__ftoa_engine+0x90>
    1694:	05 90       	lpm	r0, Z+
    1696:	07 94       	ror	r0
    1698:	28 f4       	brcc	.+10     	; 0x16a4 <__ftoa_engine+0xb8>
    169a:	f8 0e       	add	r15, r24
    169c:	49 1f       	adc	r20, r25
    169e:	56 1f       	adc	r21, r22
    16a0:	c7 1f       	adc	r28, r23
    16a2:	d1 1d       	adc	r29, r1
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	66 1f       	adc	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	06 94       	lsr	r0
    16ae:	a1 f7       	brne	.-24     	; 0x1698 <__ftoa_engine+0xac>
    16b0:	05 90       	lpm	r0, Z+
    16b2:	07 94       	ror	r0
    16b4:	20 f4       	brcc	.+8      	; 0x16be <__ftoa_engine+0xd2>
    16b6:	49 0f       	add	r20, r25
    16b8:	56 1f       	adc	r21, r22
    16ba:	c7 1f       	adc	r28, r23
    16bc:	d8 1f       	adc	r29, r24
    16be:	99 0f       	add	r25, r25
    16c0:	66 1f       	adc	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	06 94       	lsr	r0
    16c8:	a9 f7       	brne	.-22     	; 0x16b4 <__ftoa_engine+0xc8>
    16ca:	84 91       	lpm	r24, Z+
    16cc:	10 95       	com	r17
    16ce:	17 70       	andi	r17, 0x07	; 7
    16d0:	41 f0       	breq	.+16     	; 0x16e2 <__ftoa_engine+0xf6>
    16d2:	d6 95       	lsr	r29
    16d4:	c7 95       	ror	r28
    16d6:	57 95       	ror	r21
    16d8:	47 95       	ror	r20
    16da:	f7 94       	ror	r15
    16dc:	e7 94       	ror	r14
    16de:	1a 95       	dec	r17
    16e0:	c1 f7       	brne	.-16     	; 0x16d2 <__ftoa_engine+0xe6>
    16e2:	ea e2       	ldi	r30, 0x2A	; 42
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	68 94       	set
    16e8:	15 90       	lpm	r1, Z+
    16ea:	15 91       	lpm	r17, Z+
    16ec:	35 91       	lpm	r19, Z+
    16ee:	65 91       	lpm	r22, Z+
    16f0:	95 91       	lpm	r25, Z+
    16f2:	05 90       	lpm	r0, Z+
    16f4:	7f e2       	ldi	r23, 0x2F	; 47
    16f6:	73 95       	inc	r23
    16f8:	e1 18       	sub	r14, r1
    16fa:	f1 0a       	sbc	r15, r17
    16fc:	43 0b       	sbc	r20, r19
    16fe:	56 0b       	sbc	r21, r22
    1700:	c9 0b       	sbc	r28, r25
    1702:	d0 09       	sbc	r29, r0
    1704:	c0 f7       	brcc	.-16     	; 0x16f6 <__ftoa_engine+0x10a>
    1706:	e1 0c       	add	r14, r1
    1708:	f1 1e       	adc	r15, r17
    170a:	43 1f       	adc	r20, r19
    170c:	56 1f       	adc	r21, r22
    170e:	c9 1f       	adc	r28, r25
    1710:	d0 1d       	adc	r29, r0
    1712:	7e f4       	brtc	.+30     	; 0x1732 <__ftoa_engine+0x146>
    1714:	70 33       	cpi	r23, 0x30	; 48
    1716:	11 f4       	brne	.+4      	; 0x171c <__ftoa_engine+0x130>
    1718:	8a 95       	dec	r24
    171a:	e6 cf       	rjmp	.-52     	; 0x16e8 <__ftoa_engine+0xfc>
    171c:	e8 94       	clt
    171e:	01 50       	subi	r16, 0x01	; 1
    1720:	30 f0       	brcs	.+12     	; 0x172e <__ftoa_engine+0x142>
    1722:	08 0f       	add	r16, r24
    1724:	0a f4       	brpl	.+2      	; 0x1728 <__ftoa_engine+0x13c>
    1726:	00 27       	eor	r16, r16
    1728:	02 17       	cp	r16, r18
    172a:	08 f4       	brcc	.+2      	; 0x172e <__ftoa_engine+0x142>
    172c:	20 2f       	mov	r18, r16
    172e:	23 95       	inc	r18
    1730:	02 2f       	mov	r16, r18
    1732:	7a 33       	cpi	r23, 0x3A	; 58
    1734:	28 f0       	brcs	.+10     	; 0x1740 <__ftoa_engine+0x154>
    1736:	79 e3       	ldi	r23, 0x39	; 57
    1738:	7d 93       	st	X+, r23
    173a:	2a 95       	dec	r18
    173c:	e9 f7       	brne	.-6      	; 0x1738 <__ftoa_engine+0x14c>
    173e:	10 c0       	rjmp	.+32     	; 0x1760 <__ftoa_engine+0x174>
    1740:	7d 93       	st	X+, r23
    1742:	2a 95       	dec	r18
    1744:	89 f6       	brne	.-94     	; 0x16e8 <__ftoa_engine+0xfc>
    1746:	06 94       	lsr	r0
    1748:	97 95       	ror	r25
    174a:	67 95       	ror	r22
    174c:	37 95       	ror	r19
    174e:	17 95       	ror	r17
    1750:	17 94       	ror	r1
    1752:	e1 18       	sub	r14, r1
    1754:	f1 0a       	sbc	r15, r17
    1756:	43 0b       	sbc	r20, r19
    1758:	56 0b       	sbc	r21, r22
    175a:	c9 0b       	sbc	r28, r25
    175c:	d0 09       	sbc	r29, r0
    175e:	98 f0       	brcs	.+38     	; 0x1786 <__ftoa_engine+0x19a>
    1760:	23 95       	inc	r18
    1762:	7e 91       	ld	r23, -X
    1764:	73 95       	inc	r23
    1766:	7a 33       	cpi	r23, 0x3A	; 58
    1768:	08 f0       	brcs	.+2      	; 0x176c <__ftoa_engine+0x180>
    176a:	70 e3       	ldi	r23, 0x30	; 48
    176c:	7c 93       	st	X, r23
    176e:	20 13       	cpse	r18, r16
    1770:	b8 f7       	brcc	.-18     	; 0x1760 <__ftoa_engine+0x174>
    1772:	7e 91       	ld	r23, -X
    1774:	70 61       	ori	r23, 0x10	; 16
    1776:	7d 93       	st	X+, r23
    1778:	30 f0       	brcs	.+12     	; 0x1786 <__ftoa_engine+0x19a>
    177a:	83 95       	inc	r24
    177c:	71 e3       	ldi	r23, 0x31	; 49
    177e:	7d 93       	st	X+, r23
    1780:	70 e3       	ldi	r23, 0x30	; 48
    1782:	2a 95       	dec	r18
    1784:	e1 f7       	brne	.-8      	; 0x177e <__ftoa_engine+0x192>
    1786:	11 24       	eor	r1, r1
    1788:	ef 90       	pop	r14
    178a:	ff 90       	pop	r15
    178c:	0f 91       	pop	r16
    178e:	1f 91       	pop	r17
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	99 27       	eor	r25, r25
    1796:	87 fd       	sbrc	r24, 7
    1798:	90 95       	com	r25
    179a:	08 95       	ret

0000179c <strnlen_P>:
    179c:	fc 01       	movw	r30, r24
    179e:	05 90       	lpm	r0, Z+
    17a0:	61 50       	subi	r22, 0x01	; 1
    17a2:	70 40       	sbci	r23, 0x00	; 0
    17a4:	01 10       	cpse	r0, r1
    17a6:	d8 f7       	brcc	.-10     	; 0x179e <strnlen_P+0x2>
    17a8:	80 95       	com	r24
    17aa:	90 95       	com	r25
    17ac:	8e 0f       	add	r24, r30
    17ae:	9f 1f       	adc	r25, r31
    17b0:	08 95       	ret

000017b2 <strnlen>:
    17b2:	fc 01       	movw	r30, r24
    17b4:	61 50       	subi	r22, 0x01	; 1
    17b6:	70 40       	sbci	r23, 0x00	; 0
    17b8:	01 90       	ld	r0, Z+
    17ba:	01 10       	cpse	r0, r1
    17bc:	d8 f7       	brcc	.-10     	; 0x17b4 <strnlen+0x2>
    17be:	80 95       	com	r24
    17c0:	90 95       	com	r25
    17c2:	8e 0f       	add	r24, r30
    17c4:	9f 1f       	adc	r25, r31
    17c6:	08 95       	ret

000017c8 <fputc>:
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	8c 01       	movw	r16, r24
    17d2:	eb 01       	movw	r28, r22
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 ff       	sbrs	r24, 1
    17d8:	1b c0       	rjmp	.+54     	; 0x1810 <fputc+0x48>
    17da:	82 ff       	sbrs	r24, 2
    17dc:	0d c0       	rjmp	.+26     	; 0x17f8 <fputc+0x30>
    17de:	2e 81       	ldd	r18, Y+6	; 0x06
    17e0:	3f 81       	ldd	r19, Y+7	; 0x07
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	28 17       	cp	r18, r24
    17e8:	39 07       	cpc	r19, r25
    17ea:	64 f4       	brge	.+24     	; 0x1804 <fputc+0x3c>
    17ec:	e8 81       	ld	r30, Y
    17ee:	f9 81       	ldd	r31, Y+1	; 0x01
    17f0:	01 93       	st	Z+, r16
    17f2:	f9 83       	std	Y+1, r31	; 0x01
    17f4:	e8 83       	st	Y, r30
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <fputc+0x3c>
    17f8:	e8 85       	ldd	r30, Y+8	; 0x08
    17fa:	f9 85       	ldd	r31, Y+9	; 0x09
    17fc:	80 2f       	mov	r24, r16
    17fe:	09 95       	icall
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	31 f4       	brne	.+12     	; 0x1810 <fputc+0x48>
    1804:	8e 81       	ldd	r24, Y+6	; 0x06
    1806:	9f 81       	ldd	r25, Y+7	; 0x07
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	9f 83       	std	Y+7, r25	; 0x07
    180c:	8e 83       	std	Y+6, r24	; 0x06
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <fputc+0x4c>
    1810:	0f ef       	ldi	r16, 0xFF	; 255
    1812:	1f ef       	ldi	r17, 0xFF	; 255
    1814:	c8 01       	movw	r24, r16
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <__ultoa_invert>:
    1820:	fa 01       	movw	r30, r20
    1822:	aa 27       	eor	r26, r26
    1824:	28 30       	cpi	r18, 0x08	; 8
    1826:	61 f1       	breq	.+88     	; 0x1880 <__ultoa_invert+0x60>
    1828:	20 31       	cpi	r18, 0x10	; 16
    182a:	91 f1       	breq	.+100    	; 0x1890 <__ultoa_invert+0x70>
    182c:	e8 94       	clt
    182e:	6f 93       	push	r22
    1830:	6e 7f       	andi	r22, 0xFE	; 254
    1832:	6e 5f       	subi	r22, 0xFE	; 254
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8f 4f       	sbci	r24, 0xFF	; 255
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	af 4f       	sbci	r26, 0xFF	; 255
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	40 d0       	rcall	.+128    	; 0x18c0 <__ultoa_invert+0xa0>
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	3e d0       	rcall	.+124    	; 0x18c0 <__ultoa_invert+0xa0>
    1844:	67 0f       	add	r22, r23
    1846:	78 1f       	adc	r23, r24
    1848:	89 1f       	adc	r24, r25
    184a:	9a 1f       	adc	r25, r26
    184c:	a1 1d       	adc	r26, r1
    184e:	68 0f       	add	r22, r24
    1850:	79 1f       	adc	r23, r25
    1852:	8a 1f       	adc	r24, r26
    1854:	91 1d       	adc	r25, r1
    1856:	a1 1d       	adc	r26, r1
    1858:	6a 0f       	add	r22, r26
    185a:	71 1d       	adc	r23, r1
    185c:	81 1d       	adc	r24, r1
    185e:	91 1d       	adc	r25, r1
    1860:	a1 1d       	adc	r26, r1
    1862:	22 d0       	rcall	.+68     	; 0x18a8 <__ultoa_invert+0x88>
    1864:	09 f4       	brne	.+2      	; 0x1868 <__ultoa_invert+0x48>
    1866:	68 94       	set
    1868:	3f 91       	pop	r19
    186a:	06 2e       	mov	r0, r22
    186c:	00 0c       	add	r0, r0
    186e:	30 19       	sub	r19, r0
    1870:	00 0c       	add	r0, r0
    1872:	00 0c       	add	r0, r0
    1874:	30 19       	sub	r19, r0
    1876:	30 5d       	subi	r19, 0xD0	; 208
    1878:	31 93       	st	Z+, r19
    187a:	ce f6       	brtc	.-78     	; 0x182e <__ultoa_invert+0xe>
    187c:	cf 01       	movw	r24, r30
    187e:	08 95       	ret
    1880:	46 2f       	mov	r20, r22
    1882:	47 70       	andi	r20, 0x07	; 7
    1884:	40 5d       	subi	r20, 0xD0	; 208
    1886:	41 93       	st	Z+, r20
    1888:	b3 e0       	ldi	r27, 0x03	; 3
    188a:	0f d0       	rcall	.+30     	; 0x18aa <__ultoa_invert+0x8a>
    188c:	c9 f7       	brne	.-14     	; 0x1880 <__ultoa_invert+0x60>
    188e:	f6 cf       	rjmp	.-20     	; 0x187c <__ultoa_invert+0x5c>
    1890:	46 2f       	mov	r20, r22
    1892:	4f 70       	andi	r20, 0x0F	; 15
    1894:	40 5d       	subi	r20, 0xD0	; 208
    1896:	4a 33       	cpi	r20, 0x3A	; 58
    1898:	18 f0       	brcs	.+6      	; 0x18a0 <__ultoa_invert+0x80>
    189a:	49 5d       	subi	r20, 0xD9	; 217
    189c:	31 fd       	sbrc	r19, 1
    189e:	40 52       	subi	r20, 0x20	; 32
    18a0:	41 93       	st	Z+, r20
    18a2:	02 d0       	rcall	.+4      	; 0x18a8 <__ultoa_invert+0x88>
    18a4:	a9 f7       	brne	.-22     	; 0x1890 <__ultoa_invert+0x70>
    18a6:	ea cf       	rjmp	.-44     	; 0x187c <__ultoa_invert+0x5c>
    18a8:	b4 e0       	ldi	r27, 0x04	; 4
    18aa:	a6 95       	lsr	r26
    18ac:	97 95       	ror	r25
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	ba 95       	dec	r27
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <__ultoa_invert+0x8a>
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	61 05       	cpc	r22, r1
    18bc:	71 05       	cpc	r23, r1
    18be:	08 95       	ret
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	0a 2e       	mov	r0, r26
    18c6:	06 94       	lsr	r0
    18c8:	57 95       	ror	r21
    18ca:	47 95       	ror	r20
    18cc:	37 95       	ror	r19
    18ce:	27 95       	ror	r18
    18d0:	ba 95       	dec	r27
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__ultoa_invert+0xa6>
    18d4:	62 0f       	add	r22, r18
    18d6:	73 1f       	adc	r23, r19
    18d8:	84 1f       	adc	r24, r20
    18da:	95 1f       	adc	r25, r21
    18dc:	a0 1d       	adc	r26, r0
    18de:	08 95       	ret

000018e0 <_exit>:
    18e0:	f8 94       	cli

000018e2 <__stop_program>:
    18e2:	ff cf       	rjmp	.-2      	; 0x18e2 <__stop_program>
